pipeline {
    environment {
        repository = "1w2k/code-odyssesy"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
        DISCOVERY_SERVER="${env.DISCOVERY_SERVER}"
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Judge-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch : \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "Judge server 입니다."
                    sh 'pwd'
                    sh 'ls -al'
                    //gradlew 빌드
                    sh 'java --version'
                    sh 'chmod +x ./BackEnd/judge/gradlew'
                    sh '''
                        cd ./BackEnd/judge
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build Judge-Server Image'){
            steps{
                script{
                    dockerImage = docker.build("${repository}:Judge_Server_${BUILD_NUMBER}", "-f BackEnd/judge/Dockerfile ./BackEnd/judge")
                }
            }
        }

        stage('DockerHub Login'){
            steps{
                script{
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Judge-Server Image to DockerHub'){
            steps {
                script {
                    sh "docker push \${repository}:Judge_Server_\${BUILD_NUMBER}"
                }
            }
        }

        stage('Clean Judge-Server Image'){
            steps{
                script{
                    sh "docker rmi \${repository}:Judge_Server_\${BUILD_NUMBER}"
                }
            }
        }

        stage("Garbage Collect TESTSERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "JUDGE_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep Judge | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy"){
            steps{
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "JUDGE_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker pull " + repository +":Judge_Server_${BUILD_NUMBER}"),
                                sshTransfer(execCommand: "sudo docker run -d -p 8080:8080 --name judge -e DISCOVERY_SERVER=\"${DISCOVERY_SERVER}\" " + repository + ":Judge_Server_${BUILD_NUMBER}")
                            ]
                        )
                    ]
                )
            }
        }


    }
    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        unstable {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
    }      
}