pipeline {
    environment {
        repository = "1w2k/code-odyssesy"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
        CHATTING_SERVER = "${env.CHATTING_SERVER}"
        MONGODB_USER_NAME = "${env.MONGODB_USER_NAME}"
        MONGODB_USER_PASSWORD = "${env.MONGODB_USER_PASSWORD}"
        RABBIT_MQ_USERNAME = "${env.RABBIT_MQ_USERNAME}"
        RABBIT_MQ_PASSWORD = "${env.RABBIT_MQ_PASSWORD}"
        DISCOVERY_SERVER = "${env.DISCOVERY_SERVER}"
        OPENVIDU_URL = "${env.OPENVIDU_URL}"
        OPENVIDU_SECRET = "${env.OPENVIDU_SECRET}"
        COMMON_SERVER = "${env.COMMON_SERVER}"
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Gateway-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch: \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "common server 입니다."
                    // gradlew 빌드
                    sh 'chmod +x ./BackEnd/chatting/gradlew'
                    sh '''
                        cd ./BackEnd/chatting
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build Gateway Image') {
            steps {
                script {
                    dockerImage = docker.build("${repository}:chatting_${BUILD_NUMBER}", "-f BackEnd/chatting/Dockerfile ./BackEnd/chatting")
                }
            }
        }

        stage('DockerHub Login') {
            steps {
                script {
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Gateway Image to DockerHub') {
            steps {
                script {
                    sh "docker push \${repository}:chatting_\${BUILD_NUMBER}"
                }
            }
        }

        stage('Clean Gateway Image') {
            steps {
                script {
                    sh "docker rmi \${repository}:chatting_\${BUILD_NUMBER}"
                }
            }
        }

        stage("Garbage Collect TESTS ERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "CHATTING_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep chatting | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af"),
                                sshTransfer(execCommand: "sudo docker rm -f chatting")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy") {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "CHATTING_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker rm -f chatting"),
                                sshTransfer(execCommand: "sudo docker pull " + repository + ":chatting_$BUILD_NUMBER"),
                                sshTransfer(execCommand: "sudo docker run -d -p 8888:8888 --name chatting  -e CHATTING_SERVER=\"${CHATTING_SERVER}\" -e MONGODB_USER_NAME=\"${MONGODB_USER_NAME}\" -e MONGODB_USER_PASSWORD=\"${MONGODB_USER_PASSWORD}\" -e RABBIT_MQ_USERNAME=\"${RABBIT_MQ_USERNAME}\" -e RABBIT_MQ_PASSWORD=\"${RABBIT_MQ_PASSWORD}\" -e DISCOVERY_SERVER=\"${DISCOVERY_SERVER}\" -e OPENVIDU_URL=\"${OPENVIDU_URL}\" -e OPENVIDU_SECRET=\"${OPENVIDU_SECRET}\" -e COMMON_SERVER=\"${COMMON_SERVER}\" " + repository + ":chatting_${BUILD_NUMBER}")

                            ]
                        )
                    ]
                )
            }
        }
    }
    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        unstable {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'warning',
                    message: "빌드가 Unstable 상태입니다: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: "${env.MM_WEBHOOK}",
                    channel: 'C205'
                )
            }
        }
    }
}
