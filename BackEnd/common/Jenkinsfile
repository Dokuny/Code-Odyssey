pipeline {
    environment {
        repository = "1w2k/code-odyssesy"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
        
        DISCOVERY_SERVER="${env.DISCOVERY_SERVER}"
        FRONT_SERVER="${env.FRONT_SERVER}"
        GOOGLE_OAUTH_ID="${env.GOOGLE_OAUTH_ID}"
        GOOGLE_OAUTH_SECRET="${env.GOOGLE_OAUTH_SECRET}"
        JWT_ACCESS="${env.JWT_ACCESS}"
        JWT_REFRESH="${env.JWT_REFRESH}"
        KAKAO_OAUTH_ID="${env.KAKAO_OAUTH_ID}"
        KAKAO_OAUTH_SECRET="${env.KAKAO_OAUTH_SECRET}"
        NAVER_OAUTH_ID="${env.NAVER_OAUTH_ID}"
        NAVER_OAUTH_SECRET="${env.NAVER_OAUTH_SECRET}"
        DB_URL="${env.RDB_COMMON_URL}"
        DB_USER="${env.RDB_USER}"
        DB_PASSWORD="${env.RDB_PASSWORD}"
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Common-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch: \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "gateway server 입니다."
                    // gradlew 빌드
                    sh 'chmod +x ./BackEnd/common/gradlew'
                    sh '''
                        cd ./BackEnd/common
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build Common Image') {
            steps {
                script {
                    dockerImage = docker.build("${repository}:Common_${BUILD_NUMBER}", "-f BackEnd/gateway/Dockerfile ./BackEnd/common")
                }
            }
        }

        stage('DockerHub Login') {
            steps {
                script {
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Common Image to DockerHub') {
            steps {
                script {
                    sh "docker push \${repository}:Common_\${BUILD_NUMBER}"
                }
            }
        }

        stage('Clean Common Image') {
            steps {
                script {
                    sh "docker rmi \${repository}:Common_\${BUILD_NUMBER}"
                }
            }
        }

        stage("Garbage Collect TESTS ERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep Common | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy") {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker pull " + repository + ":Common_$BUILD_NUMBER"),
                               sshTransfer(execCommand: "sudo docker run -d -p 8888:8888 --name Common -e DB_URL=${DB_URL} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} DISCOVERY_SERVER=${DISCOVERY_SERVER} FRONT_SERVER=${FRONT_SERVER} KAKAO_OAUTH_SECRET=${KAKAO_OAUTH_SECRET} KAKAO_OAUTH_ID=${KAKAO_OAUTH_ID} NAVER_OAUTH_SECRET=${NAVER_OAUTH_SECRET} NAVER_OAUTH_ID=${NAVER_OAUTH_ID} GOOGLE_OAUTH_SECRET=${GOOGLE_OAUTH_SECRET} GOOGLE_OAUTH_ID=${GOOGLE_OAUTH_ID} JWT_ACCESS=${JWT_ACCESS} JWT_REFRESH=${JWT_REFRESH}  " + repository + ":Common_${BUILD_NUMBER}")
                            ]
                        )
                    ]
                )
            }
        }
    }
}
