pipeline {
    environment {
        repository = "1w2k/code-odyssesy"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Common-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch: \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "common server 입니다."
                    // gradlew 빌드
                    sh 'chmod +x ./BackEnd/common/gradlew'
                    sh '''
                        cd ./BackEnd/common
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build Gateway Image') {
            steps {
                script {
                    sh '''
                        cd ./BackEnd/common
                        docker-compose -f docker-compose-prod.yml build common-server --build-arg BUILD_NUMBER=common_${BUILD_NUMBER}
                        ./gradlew clean build
                    '''
                    
                    sh "docker images "
                }
            }
        }

        stage('DockerHub Login') {
            steps {
                script {
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Common-Server Image to DockerHub') {
            steps {
                script {
                    sh "docker push 1w2k/common-server:latest"
                }
            }
        }

        stage('Clean Common-Servery Image') {
            steps {
                script {
                    sh "docker rmi 1w2k/common-server:latest"
                }
            }
        }

        stage("Garbage Collect TESTS ERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep common | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy") {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker pull " +"1w2k/common-server:latest"),
                                sshTransfer(execCommand: "sudo docker rm -f common"),
                                sshTransfer(execCommand: "sudo docker run -d -p 8777:8777 --name common  " +"1w2k/common-server:latest")
                            ]
                        )
                    ]
                )
            }
        }
    }
}
