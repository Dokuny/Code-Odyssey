pipeline {
    environment {
        repository = "1w2k/code-odyssesy"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
        
        DISCOVERY_SERVER="${env.DISCOVERY_SERVER}"
        FRONT_SERVER="${env.FRONT_SERVER}"
        GOOGLE_OAUTH_ID="${env.GOOGLE_OAUTH_ID}"
        GOOGLE_OAUTH_SECRET="${env.GOOGLE_OAUTH_SECRET}"
        JWT_ACCESS="${env.JWT_ACCESS}"
        JWT_REFRESH="${env.JWT_REFRESH}"
        KAKAO_OAUTH_ID="${env.KAKAO_OAUTH_ID}"
        KAKAO_OAUTH_SECRET="${env.KAKAO_OAUTH_SECRET}"
        NAVER_OAUTH_ID="${env.NAVER_OAUTH_ID}"
        NAVER_OAUTH_SECRET="${env.NAVER_OAUTH_SECRET}"
        DB_URL="${env.RDB_COMMON_URL}"
        DB_USER="${env.RDB_USER}"
        DB_PASSWORD="${env.RDB_PASSWORD}"
        PAPAGO_API_ID="${env.PAPAGO_API_ID}"
        PAPAGO_API_KEY="${env.PAPAGO_API_KEY}"

        MM_WEBHOOK="${env.MM_WEBHOOK}"
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build Common-Server .JAR') {
            steps {
                script {
                    // 변경된 브랜치와 머지 대상 브랜치 출력
                    // 현재 빌드 중인 브랜치명 확인
                    def currentBranch = env.BRANCH_NAME
                    echo "Merge Target Branch: \${CHANGE_TARGET}"
                    echo "Current Branch: \${currentBranch}"

                    echo "common server 입니다."
                    // gradlew 빌드
                    sh 'chmod +x ./BackEnd/common/gradlew'
                    sh '''
                        cd ./BackEnd/common
                        ./gradlew clean build
                    '''
                }
            }
        }

        stage('Build Common Image') {
            steps {
                script {
                    dockerImage = docker.build("${repository}:Common_${BUILD_NUMBER}", "-f BackEnd/common/Dockerfile ./BackEnd/common")
                }
            }
        }

        stage('DockerHub Login') {
            steps {
                script {
                    sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }

        stage('Push Common Image to DockerHub') {
            steps {
                script {
                    sh "docker push \${repository}:Common_\${BUILD_NUMBER}"
                }
            }
        }

        stage('Clean Common Image') {
            steps {
                script {
                    sh "docker rmi \${repository}:Common_\${BUILD_NUMBER}"
                }
            }
        }

        stage("Garbage Collect TESTS ERV") {
            steps {
                sshPublisher(
                    continueOnError: true, failOnError: false,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep Common | tr ' ' '\t' | cut -f1)"),
                                sshTransfer(execCommand: "sudo docker system prune -af")
                            ]
                        )
                    ]
                )
            }
        }

        stage("Deploy") {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "COMMON_SERVER",
                            verbose: true,
                            transfers: [
                                sshTransfer(execCommand: "sudo docker rm -f Common"),
                                sshTransfer(execCommand: "sudo docker pull " + repository + ":Common_$BUILD_NUMBER"),
                               sshTransfer(execCommand: "sudo docker run -d -p 8080:8080 --name Common -e DB_URL=\"${DB_URL}\" -e DB_USER=\"${DB_USER}\" -e DB_PASSWORD=\"${DB_PASSWORD}\" -e DISCOVERY_SERVER=\"${DISCOVERY_SERVER}\" -e FRONT_SERVER=\"${FRONT_SERVER}\" -e KAKAO_OAUTH_SECRET=\"${KAKAO_OAUTH_SECRET}\" -e KAKAO_OAUTH_ID=\"${KAKAO_OAUTH_ID}\" -e NAVER_OAUTH_SECRET=\"${NAVER_OAUTH_SECRET}\" -e NAVER_OAUTH_ID=\"${NAVER_OAUTH_ID}\" -e GOOGLE_OAUTH_SECRET=\"${GOOGLE_OAUTH_SECRET}\" -e GOOGLE_OAUTH_ID=\"${GOOGLE_OAUTH_ID}\" -e JWT_ACCESS=\"${JWT_ACCESS}\" -e JWT_REFRESH=\"${JWT_REFRESH}\" -e OPEN_AI_KEY=\"${OPEN_AI_KEY}\" -e OPEN_AI_URL=\"${OPEN_AI_URL}\" -e PAPAGO_API_KEY=\"${PAPAGO_API_KEY}\" -e PAPAGO_API_ID=\"${PAPAGO_API_ID}\" " + repository + ":Common_${BUILD_NUMBER}")
                            ]
                        )
                    ]
                )
            }
        }
    }
    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
        unstable {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: "${env.MM_WEBHOOK}",
                channel: 'C205'
                )
            }
        }
    }
}
