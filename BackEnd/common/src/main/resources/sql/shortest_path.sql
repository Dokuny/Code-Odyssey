INSERT INTO problem (problem_id,platform,href,no,title,runtime,memory,difficulty,content,input,output,type) VALUES

                                                                                                                (23,'BAEKJOON','https://www.acmicpc.net/problem/1049',1058,'기타줄','2초','128 MB',7,'<p>Day Of Mourning의 기타리스트 강토가 사용하는&nbsp;기타에서&nbsp;N개의 줄이&nbsp;끊어졌다. 따라서 새로운 줄을 사거나 교체해야 한다. 강토는 되도록이면 돈을 적게 쓰려고 한다.&nbsp;6줄 패키지를 살 수도 있고, 1개 또는 그 이상의 줄을 낱개로 살 수도 있다.</p>

<p>끊어진 기타줄의 개수 N과 기타줄 브랜드 M개가 주어지고, 각각의 브랜드에서 파는 기타줄 6개가 들어있는 패키지의 가격, 낱개로 살 때의 가격이 주어질 때, 적어도 N개를 사기 위해 필요한 돈의 수를 최소로 하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 M이 주어진다. N은 100보다 작거나 같은 자연수이고, M은 50보다 작거나 같은 자연수이다. 둘째 줄부터 M개의 줄에는 각 브랜드의 패키지 가격과 낱개의 가격이 공백으로 구분하여 주어진다. 가격은 0보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에&nbsp;기타줄을 적어도 N개 사기 위해 필요한 돈의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/jSiiLtuCpJc" width="560"></iframe></p>

				</div>
				</div>','4 2
12 3
15 4
','12
','SHORTEST_PATH'),
                                                                                                                (9164,'BAEKJOON','https://www.acmicpc.net/problem/1058',1058,'친구','2초','128 MB',9,'<p>지민이는 세계에서 가장 유명한 사람이 누구인지 궁금해졌다. 가장 유명한 사람을 구하는 방법은 각 사람의 2-친구를 구하면 된다. 어떤 사람 A가 또다른 사람 B의 2-친구가 되기 위해선, 두 사람이 친구이거나, A와 친구이고, B와 친구인 C가 존재해야 된다. 여기서 가장 유명한 사람은 2-친구의 수가 가장 많은 사람이다. 가장 유명한 사람의 2-친구의 수를 출력하는 프로그램을 작성하시오.</p>

<p>A와 B가 친구면, B와 A도 친구이고, A와 A는 친구가 아니다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 사람의 수 N이 주어진다. N은 50보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에 각 사람이 친구이면 Y, 아니면 N이 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 가장 유명한 사람의 2-친구의 수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
NYY
YNY
YYN
','2
','SHORTEST_PATH'),
                                                                                                                (11161,'BAEKJOON','https://www.acmicpc.net/problem/1162',1162,'도로포장','2초','128 MB',16,'<p>준영이는 매일 서울에서 포천까지 출퇴근을 한다. 하지만 잠이 많은 준영이는 늦잠을 자 포천에 늦게 도착하기 일쑤다. 돈이 많은 준영이는 고민 끝에 K개의 도로를 포장하여 서울에서 포천까지 가는 시간을 단축하려 한다.</p>

<p>문제는 N개의 도시가 주어지고 그 사이 도로와&nbsp;이 도로를 통과할 때 걸리는 시간이 주어졌을 때 최소 시간이 걸리도록 하는 K개의 이하의 도로를 포장하는 것이다.&nbsp;도로는 이미 있는 도로만 포장할 수 있고,&nbsp;포장하게 되면 도로를 지나는데 걸리는 시간이 0이 된다. 또한 편의상 서울은 1번 도시, 포천은 N번 도시라 하고 1번에서 N번까지 항상 갈 수 있는 데이터만 주어진다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 도시의 수 N(1 ≤ N ≤ 10,000)과 도로의 수 M(1 ≤ M ≤ 50,000)과 포장할 도로의 수 K(1 ≤ K ≤ 20)가 공백으로 구분되어 주어진다. M개의 줄에 대해 도로가 연결하는&nbsp;두 도시와 도로를 통과하는데 걸리는 시간이 주어진다. 도로들은 양방향 도로이며, 걸리는 시간은 1,000,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 K개 이하의 도로를 포장하여 얻을 수 있는 최소 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 4 1
1 2 10
2 4 10
1 3 1
3 4 100
','1
','SHORTEST_PATH'),
                                                                                                                (11172,'BAEKJOON','https://www.acmicpc.net/problem/1219',1219,'오민식의 고민','2초','128 MB',16,'<p>오민식은 세일즈맨이다. 오민식의 회사 사장님은 오민식에게 물건을 최대한 많이 팔아서 최대 이윤을 남기라고 했다.</p>

<p>오민식은 고민에 빠졌다.</p>

<p>어떻게 하면 최대 이윤을 낼 수 있을까?</p>

<p>이 나라에는 N개의 도시가 있다. 도시는 0번부터 N-1번까지 번호 매겨져 있다. 오민식의 여행은&nbsp;A도시에서 시작해서 B도시에서 끝난다.</p>

<p>오민식이 이용할 수 있는 교통수단은 여러 가지가 있다. 오민식은 모든 교통수단의 출발 도시와 도착 도시를 알고 있고, 비용도 알고 있다. 게다가, 오민식은 각각의 도시를 방문할 때마다 벌 수 있는 돈을 알고있다. 이 값은 도시마다 다르며, 액수는 고정되어있다. 또, 도시를 방문할 때마다 그 돈을 벌게 된다.</p>

<p>오민식은 도착 도시에 도착할 때, 가지고 있는 돈의 액수를 최대로 하려고 한다. 이 최댓값을 구하는 프로그램을 작성하시오.</p>

<p>오민식이 버는 돈보다 쓰는 돈이 많다면, 도착 도시에 도착할 때 가지고 있는 돈의 액수가 음수가 될 수도 있다. 또, 같은 도시를 여러 번 방문할 수 있으며, 그 도시를 방문할 때마다 돈을 벌게 된다. 모든 교통 수단은 입력으로 주어진 방향으로만 이용할 수 있으며, 여러 번 이용할 수도 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 N과 시작 도시, 도착 도시 그리고 교통 수단의 개수 M이 주어진다. 둘째 줄부터 M개의 줄에는 교통 수단의 정보가 주어진다. 교통 수단의 정보는 “시작 끝 가격”과 같은 형식이다. 마지막 줄에는 오민식이 각 도시에서 벌 수 있는 돈의 최댓값이 0번 도시부터 차례대로 주어진다.</p>

<p>N과 M은 50보다 작거나 같고, 돈의 최댓값과 교통 수단의 가격은 1,000,000보다 작거나 같은 음이 아닌 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 도착 도시에 도착할 때, 가지고 있는 돈의 액수의 최댓값을 출력한다. 만약 오민식이 도착 도시에 도착하는 것이 불가능할 때는 "gg"를 출력한다.&nbsp;그리고, 오민식이 도착 도시에 도착했을 때 돈을 무한히 많이 가지고 있을 수 있다면 "Gee"를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','tion','-32
','SHORTEST_PATH'),
                                                                                                                (11175,'BAEKJOON','https://www.acmicpc.net/problem/1238',1238,'파티','1초','128 MB',13,'<p>N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.</p>

<p>어느 날 이 N명의 학생이 X (1 ≤&nbsp;X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 T<sub>i</sub>(1 ≤ T<sub>i</sub> ≤ 100)의 시간을 소비한다.</p>

<p>각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.</p>

<p>이 도로들은 단방향이기 때문에 아마 그들이 오고 가는 길이 다를지도 모른다. N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N(1 ≤&nbsp;N ≤ 1,000), M(1 ≤ M ≤ 10,000), X가 공백으로 구분되어 입력된다. 두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 T<sub>i</sub>가 들어온다. 시작점과 끝점이 같은 도로는 없으며, 시작점과 한 도시 A에서 다른 도시 B로 가는 도로의 개수는 최대 1개이다.</p>

<p>모든 학생들은 집에서 X에 갈수 있고, X에서 집으로 돌아올 수 있는 데이터만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3
','10
','SHORTEST_PATH'),
                                                                                                                (4474,'BAEKJOON','https://www.acmicpc.net/problem/1255',1255,'전쟁 - 선전포고','2초','128 MB',17,'<p>결국 당신과 옆 나라 왕은 서로 화가 난 나머지 전쟁을 시작할 준비를 하게 된다.</p>

<p>그리하여 옆 나라에 선전포고를 하려 했으나, 당신은 자비로운 왕이었기 때문에 옆 나라에 있는 당신의 백성들을 당신의 국가로 귀환 시킨 후 선전 포고를 하고자 했다.</p>

<p>그리하여 Y년 M월 D일. 미리 옆 나라에 있는 모든 백성들에게 귀환 명령을 내려놓았기 때문에, 그들 모두가 한꺼번에 이동을 시작했다.</p>

<p>옆 나라에는 통과할 수 없는 직선모양의 장애물이 있기 때문에 백성들이 국경을 넘는 시간이 지연될 수 있다.</p>

<p>만약 모든 백성들이 가장 빠른 경로로만 이동해서 국경을 넘는다면, 과연 얼마 후에야 모든 사람들이 국경을 넘을 수 있는지 계산하라.</p>

<p><img alt="" src="https://upload.acmicpc.net/8e92393f-4404-44ef-9c63-a1c50d497d47/-/preview/"></p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 백성의 명수인 N(1 ≤ N ≤ 50)과, 직선 장애물의 개수 M(1 ≤ M ≤ 50)이 주어진다. 2번째 줄에서 N+1번째 줄에는 백성들의 좌표(x, y)와 속도 v가 주어진다.(1 ≤ x.y ≤ 100, 1 ≤ v ≤ 10, x, y, v는 정수) N+2번째 줄에서 N+M+1번째 줄에는 직선 장애물의 좌표 (x1, y1) - (x2, y2)이 주어진다.(1 ≤ x1, y1, x2, y2 ≤ 100, x1, y1, x2, y2는 정수) 직선 장애물은 서로 교차하지 않는다. 또한, 직선 y=0은 국경이다.</p>

<p>거리 a를 가면서 속도가 v이면 시간은 a/v만큼 걸린다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>모든 백성들이 국경을 넘을 수 있는 최소 시간을 소수점 첫째자리 까지 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
(2,7) 1
(4,7) 2
(8,4) 1
(0,1) - (4,2)
(5,3) - (7,2)
(3,5) - (6,5)
','7.3
','SHORTEST_PATH'),
                                                                                                                (85,'BAEKJOON','https://www.acmicpc.net/problem/1257',1257,'엄청난 부자','2초','128 MB',20,'<p>최백준 조교는 사실 엄청난 갑부다. 그는 그 사실을 숨겼지만 어느 날 김재홍 조교에게 그 사실을 발각당한다. 결국 최백준 조교는 가지고 있는 돈을 몽땅 동전으로 바꾸어서 땅에 묻어 둘 생각을 하게 된다.</p>

<p>하지만 최백준 조교가 가진 돈이 워낙 많기 때문에 돈을 묻어두어도 그 위치가 김재홍 조교에게 발각될 위험이 있다.</p>

<p>그 때문에 그는 최소의 동전 개수로 돈을 바꾸고 싶다.</p>

<p>최백준 조교는 엄청난 구두쇠이기 때문에 돈이 단 1원도 줄거나, 심지어는 늘어나는 것도 싫어한다.</p>

<p>정확히 그가 가진 금액을 동전으로 교환하되, 그 개수를 최소화하는 방법을 찾도록 하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 엄청난 갑부인 최백준 조교가 가진 돈의 금액(10<sup>9</sup>&nbsp;≤ M ≤ 10<sup>18</sup>)이 주어진다. 두 번째 줄에는 동전의 종류 N(1&nbsp;≤ N&nbsp;≤ 1,000)이 주어진다. 세 번째 줄에는 동전의 금액 A<sub>i</sub>&nbsp;(1&nbsp;≤ A<sub>i</sub>&nbsp;≤ 10,000)가 N개 주어진다.</p>

<p>N가지의 동전 중&nbsp;1원짜리 동전은 항상 있기 때문에, 금액을 못 만드는 경우는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>동전으로 딱 맞는 금액을 만들 때, 그 최소 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1000000001
2
10000 1
','100001
','SHORTEST_PATH'),
                                                                                                                (11177,'BAEKJOON','https://www.acmicpc.net/problem/1261',1261,'알고스팟','1초(추가시간없음)','128 MB',12,'<p>알고스팟 운영진이 모두 미로에 갇혔다. 미로는 N*M 크기이며, 총 1*1크기의 방으로 이루어져 있다. 미로는 빈 방&nbsp;또는 벽으로 이루어져 있고, 빈 방은 자유롭게 다닐 수 있지만, 벽은 부수지 않으면 이동할 수 없다.</p>

<p>알고스팟 운영진은 여러명이지만, 항상 모두 같은 방에 있어야 한다. 즉, 여러 명이 다른 방에 있을 수는 없다. 어떤 방에서 이동할 수 있는 방은 상하좌우로 인접한 빈 방이다. 즉, 현재 운영진이 (x, y)에 있을 때, 이동할 수 있는 방은 (x+1, y), (x, y+1), (x-1, y), (x, y-1) 이다. 단, 미로의 밖으로 이동 할 수는 없다.</p>

<p>벽은 평소에는 이동할 수 없지만, 알고스팟의 무기 AOJ를 이용해 벽을 부수어 버릴 수 있다. 벽을 부수면, 빈 방과 동일한 방으로 변한다.</p>

<p>만약 이 문제가 <a href="https://www.algospot.com">알고스팟</a>에 있다면, 운영진들은 궁극의 무기 sudo를 이용해 벽을 한 번에 다 없애버릴 수 있지만, 안타깝게도 이 문제는 <a href="https://www.acmicpc.net">Baekjoon Online Judge</a>에 수록되어 있기 때문에, sudo를 사용할 수 없다.</p>

<p>현재 (1, 1)에 있는 알고스팟 운영진이 (N, M)으로 이동하려면 벽을 최소 몇 개 부수어야 하는지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 미로의 크기를 나타내는 가로 크기 M, 세로 크기 N (1 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 미로의 상태를 나타내는 숫자 0과 1이 주어진다. 0은 빈 방을 의미하고, 1은&nbsp;벽을 의미한다.</p>

<p>(1, 1)과 (N, M)은 항상 뚫려있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 알고스팟 운영진이 (N, M)으로 이동하기 위해 벽을 최소 몇 개 부수어야 하는지 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>이 문제는 <a href="https://algospot.com/judge/problem/read/BOJ">알고스팟</a>에서도 풀 수 있다.</p>

				</div>
				</div>','3 3
011
111
110
','3','SHORTEST_PATH'),
                                                                                                                (11174,'BAEKJOON','https://www.acmicpc.net/problem/1277',1277,'발전소 설치','2초','128 MB',12,'<p>엄청난 벼락을 맞아 많은 전선들이 끊어져 현재 전력 공급이 중단된 상태이다. 가장 심각한 문제는 1번 발전소에서 N번 발전소로 가는 중간의 전선이 끊어진 것이기에 일단 이 두 발전소를 다시 연결하는게 현재 해결해야할 첫 번째 과제이다.</p>

<p>발전소는 1번부터 N번까지 번호로 매겨져 2차원 격자 좌표 위에 있다. 그리고 몇몇 전선은 보존된 채 몇몇 발전소를 잇고 있다. 문제는 현재 전선과 발전소의 위치가 주어졌을 때 최소의 전선 길이를 추가로 사용하여 1번 발전소와 N번 발전소를 연결짓는 것이다. 물론 연결 짓는 중간에 다른 발전소를 거쳐갈 수 있다. 단, 안정성 문제로 어떠한 두 발전소 사이의 전선의 길이가 M을 초과할 수는 없다. 아래에 이에 대한 예를 그려놓았다.</p>

<pre>         연결 전                          연결 후

3  . . . 7 9 . . . . .          3  . . . 7 9 . . . . .
                                          /
2  . . 5 6 . . . . . .          2  . . 5 6 . . . . . .
                                        /
1  2-3-4 . 8 . . . . .          1  2-3-4 . 8 . . . . .
   |                               |
0  1 . . . . . . . . .          0  1 . . . . . . . . .

   0 1 2 3 4 5 6 7 8 9             0 1 2 3 4 5 6 7 8 9
</pre>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 발전소의 수 N(1 ≤ N ≤ 1,000)과 현재 남아있는 전선의 수 W(1≤ W ≤ 10,000)가 주어진다. 두 번째 줄에는 제한 길이 M(0.0 < M < 200,000.0)가 주어진다. 다음 N개의 줄에는 1번 발전소부터 N번 발전소까지 각각의 발전소의 X좌표와 Y좌표(-100,000 ≤ xi,yi&nbsp; ≤ 100,000)가 차례대로 주어진다. 다음 W개의 줄에 대해 각 줄에는 두 개의 정수가 입력되어지는데 이는 현재 남아있는 전선이 잇고 있는 두 발전소를 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 1번 발전소와 N번 발전소를 잇는데 필요한 추가 전선 길이의 최솟값을 1000배하여 출력한다. (단, 1000배하고 난 후 나머지 소수는 반올림이 아닌 버림을 한다)</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','9 3
2.0
0 0
0 1
1 1
2 1
2 2
3 2
3 3
4 1
4 3
1 2
2 3
3 4
','2828
','SHORTEST_PATH'),
                                                                                                                (11180,'BAEKJOON','https://www.acmicpc.net/problem/1299',1299,'전쟁 - 탈출편2','2초','128 MB',0,'<p>전쟁은 막바지에 치달았다.</p>

<p>당신은 적국의 수도 앞까지 왔다. 전쟁은 거의 승리했다라고 생각했고, 총공격 명령을 내릴 시기를 잡고있던 도중 충격적인 소식을 알게된다.</p>

<p>바로 이렇게 간단히 수도까지 올 수 있었던&nbsp;것은 승리하고 있던게 아니라, 적의 유인책이었던 것이다.</p>

<p>그 사실을 알고 당신은 군대를 재정비하기 위해서 잠시 군대를 돌려 자신의 국가로 돌아가기로 했다.</p>

<p>그런데 적국의 군대가 만약 군대가 돌아가는 길목에 있다 라면 매우 곤란해 질 수 있다.</p>

<p>적은 분명 지리를 매우 잘 알고 있으므로 (왜냐하면 이곳은 적국이니까.) 분명 우리가 최단거리로 우리 국가로 돌아가는 길목을 막을 것이 분명했다.</p>

<p>하지만 우리는 적의 군대를 피해서 가야만 한다.</p>

<p>도시와 도시를 잇는 도로들이 주어지면, 도로에 매복하는 적을 만나지 않으면서 적국의 수도인 1번 도시로부터 국경도시인 N번 도시까지 가는 경로들 중에 가장 짧은 경로의 길이를 출력하여라.</p>

<p>단, 적은 무조건 우리 군대가 최단경로로 올 것이라 생각하고 어떠한 최단거리로 가도 무조건 막을 수 있는 도로에만 매복할 것이다.</p>

<p>적이 막을 가능성이 있는 모든 도로를 피해서 간다고 할 때, 가장 짧은 경로의 길이를 출력하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 도시의 수 N(1<=N<=1,000)과 도시를 잇는 도로의 수 M(0<=M<=5,000) 주어진다.&nbsp;둘째 줄에서 M+1번째 줄 까지는 각각 한 줄마다 a b c가 주어지는데, 이는 a번 도시와 b번 도시를 잇는 도로가 존재하며, 걸리는 시간이 c라는 소리다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>도로에 매복하는 적을 만나지 않으면서 적국의 수도인 1번 도시로부터 국경도시인 N번 도시까지 가는 경로들 중에 가장 짧은 경로의 길이를 출력하여라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
1 2 1
2 3 1
3 4 1
4 5 1
1 5 10
','10
','SHORTEST_PATH'),
                                                                                                                (11182,'BAEKJOON','https://www.acmicpc.net/problem/1314',1314,'동굴 탐험','2초','128 MB',18,'<p>여러 명의 탐험가들이 어두운 동굴의 입구에 서있다. 이 사람들은 모두 동굴을 통과해서 출구에 다 같이 서 있으려고 한다. 불행하게도 여러 상황이 겹쳐서 다 같이 동굴을 통과하는 것이 불가능하게 되었다. 따라서, 작은 그룹으로 나눠서 동굴을 통과해야 한다. 그리고, 지도는 단 한 개 뿐인데, 동굴을 지도 없이 다닌다는 것은 불가능하다. 따라서 동굴 안에 있는 그룹은 그 그룹 내에 있는 한 명이 지도를 가지고 있어야 한다.</p>

<p>탐험가 그룹이 동굴에 들어가서, 출구를 향해 갈 때, 낡은 다리를 건너야 한다. 그룹에 있는 모든 사람은 반드시 동시에 다리를 건너야 한다. 낡은 다리는 B 킬로그램까지 지탱할 수 있다. 그걸 넘으면 붕괴할 것이다.</p>

<p>탐험가는 혼자서 동굴에 들어 갈 수 있다. 또, 두 명 또는 그 이상이 그룹으로 같이 동굴에 들어갈 수 있는데, 이때 그룹 내에 존재하는 각각의 탐험가는 그룹원 중 적어도 한 명은 믿어야 한다.</p>

<p>탐험가는 모두 다른 속도로 걷는다. 그러나 그들이 동굴에 들어갔을 때는 모두 같은 속도로 걸어야 한다. 따라서, 탐험가 그룹이 동굴에 들어갔을 때는, 그 그룹에서 가장 느린사람의 속도로 다같이 걷게 된다.</p>

<p>탐험가들이 모두 동굴을 통과하는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 탐험가의 수 N이 주어진다. N은 13보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에는 각각의 탐험가의 무게와 걷는 시간이 주어진다. 두 수는 모두 1,000보다 작거나 같은 자연수이다. 그 다음 줄부터 N개의 줄에는 탐험가들 사이의 신뢰표가 주어진다. 이 신뢰표에서 i번째 줄 j번째 열이 의미하는 것은 탐험가 i번이 탐험가 j를 신뢰하는지 안 하는지이다. 여기에서는 Y또는 N만이 들어오며, i번째 줄 i번째 행은 항상 Y이다. 꼭 대칭일 필요는 없다. 그리고 마지막 줄에는 다리가 지탱할 수 있는 무게의 한계 B가 주어진다. B는 5,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 탐험가가 모두 다리를 건너는데 걸리는 시간의 최솟값을 출력한다. 탐험가가 모두 다리를 건널 수 없을 때는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1의 경우 1번 탐험가와 3번 탐험가가 동시에 출발한다. 출구까지 간다. (4 걸림) 1번 탐험가가 입구로 혼자 돌아온다. (2 걸림) 1번 탐험가가 2번 탐험가와 함께 출구로 간다. (3)</p>

				</div>
				</div>','3
1 2
1 3
1 4
YYY
YYY
YYY
2
','9
','SHORTEST_PATH'),
                                                                                                                (6300,'BAEKJOON','https://www.acmicpc.net/problem/1370',1370,'전쟁 - 화계가 아닌 수계','2초','128 MB',22,'<p>화계라는 것은 불로써 적을 공격하는 계략을 이야기한다. 예를 들자면, 적벽대전에서 바람의 방향을 이용해서 조조군의 방심을 이용했다는 제갈량의 지혜처럼, 화계라는 것은 전쟁에 사용되면 매우 좋은 효과를 본다는 것 만은 확실하다고 알 수 있다. 물론, 그것을 사용하기에는 여러 가지 제약이 따르지만.</p>
<p>요컨데, 불로는 사람을 죽이기 쉽다는 소리다.</p>
<p>그래서 당신은 적군이 있는 곳에 불을 지르려 했다.</p>
<p>그런데 웬걸, 적군은 우리가 화계를 쓸 줄 알고 나무가 없는 곳에 진을 쳤다는 사실을 알았다!</p>
<p>그렇다면 어떻게 해야 할까? 그래. 수계를 쓰자.</p>
<p>N*N크기의 맵이 있다. 적군은 (x,y)에 있고, 우리는 1,1에서 물을 흘린다. 만약 어떤 곳에 물이 있다고 가정하자. 그런데 네 방향중에 더 낮은 (물로 채워진 높이 포함) 곳이 있다면, 그곳을 향해 물이 흐른다.</p>
<p>물은 안정화가 될 때 까지 흐르게 된다. (안정화라는 말은, 어떠한 위치의 물도 다른 방향으로 흐르지 않는다는 의미이다.)</p>
<p>당신은 적군이 있는 곳에 높이 k이상의 물을 채우기 위해서는 얼마의 물이 필요한지 계산하는 것이다.</p>

					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 문제에서 맵의 크기를 나타내는 정수 N(<=400)과 적군이 있는 곳에 채워야 되는 물의 높이 k(<=1,000,000)가 주어진다. 두 번째 줄에는 적군이 있는 위치 x y가 주어진다. 세 번째 줄에서 N+2번째 줄에는 각각 땅이 파여져 있는 깊이가 주어진다. 깊이의 양은 1,000,000을 넘지 않는다.</p>
					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>흘려야 되는 물의 양을 출력한다.</p>
					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				  7의 물을 흘리면, 1,1에 5의 물이 채워지고, 5,4에 2의 물이 채워지게 된다.

  물을 흘렸을 때 안정화 될 수 있는 상태가 여러개 있다면, 우리는 그 중에서 어떤 상태가 될지 알 수 없으므로 확실하게 적군이 k높이만큼 잠기는 최소 물의 양을 출력해야 한다.

  물이 N*N맵 밖으로 빠져나가는 경우는 없다고 봐도 무방하다.

				</div>
				</div>','5 2
5 4
5 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 5 0
','7
','SHORTEST_PATH'),
                                                                                                                (11189,'BAEKJOON','https://www.acmicpc.net/problem/1389',1389,'케빈 베이컨의 6단계 법칙','2초','128 MB',10,'<p>케빈 베이컨의 6단계 법칙에 의하면 지구에 있는 모든 사람들은 최대 6단계 이내에서 서로 아는 사람으로 연결될 수 있다. 케빈 베이컨 게임은 임의의 두 사람이 최소 몇 단계 만에 이어질 수 있는지 계산하는 게임이다.</p>

<p>예를 들면, 전혀 상관없을 것 같은 인하대학교의 이강호와 서강대학교의 민세희는 몇 단계만에 이어질 수 있을까?</p>

<p>천민호는 이강호와 같은 학교에 다니는 사이이다. 천민호와 최백준은 Baekjoon Online Judge를 통해 알게 되었다. 최백준과 김선영은 같이 Startlink를 창업했다. 김선영과 김도현은 같은 학교 동아리 소속이다. 김도현과 민세희는 같은 학교에 다니는 사이로 서로 알고 있다. 즉, 이강호-천민호-최백준-김선영-김도현-민세희 와 같이 5단계만 거치면 된다.</p>

<p>케빈 베이컨은 미국 헐리우드 영화배우들 끼리 케빈 베이컨 게임을 했을때 나오는 단계의 총 합이 가장 적은 사람이라고 한다.</p>

<p>오늘은 Baekjoon Online Judge의 유저 중에서 케빈 베이컨의 수가 가장 작은 사람을 찾으려고 한다. 케빈 베이컨 수는 모든 사람과 케빈 베이컨 게임을 했을 때, 나오는 단계의 합이다.</p>

<p>예를 들어, BOJ의 유저가 5명이고, 1과 3, 1과 4, 2와 3, 3과 4, 4와 5가 친구인 경우를 생각해보자.</p>

<p>1은 2까지 3을 통해 2단계 만에, 3까지 1단계, 4까지 1단계, 5까지 4를 통해서 2단계 만에 알 수 있다. 따라서, 케빈 베이컨의 수는 2+1+1+2 = 6이다.</p>

<p>2는 1까지 3을 통해서 2단계 만에, 3까지 1단계 만에, 4까지 3을 통해서 2단계 만에, 5까지 3과 4를 통해서 3단계 만에 알 수 있다. 따라서, 케빈 베이컨의 수는 2+1+2+3 = 8이다.</p>

<p>3은 1까지 1단계, 2까지 1단계, 4까지 1단계, 5까지 4를 통해 2단계 만에 알 수 있다. 따라서, 케빈 베이컨의 수는 1+1+1+2 = 5이다.</p>

<p>4는 1까지 1단계, 2까지 3을 통해 2단계, 3까지 1단계, 5까지 1단계 만에 알 수 있다. 4의 케빈 베이컨의 수는 1+2+1+1 = 5가 된다.</p>

<p>마지막으로 5는 1까지 4를 통해 2단계, 2까지 4와 3을 통해 3단계, 3까지 4를 통해 2단계, 4까지 1단계 만에 알 수 있다. 5의 케빈 베이컨의 수는 2+3+2+1 = 8이다.</p>

<p>5명의 유저 중에서 케빈 베이컨의 수가 가장 작은 사람은 3과 4이다.</p>

<p>BOJ 유저의 수와 친구 관계가 입력으로 주어졌을 때, 케빈 베이컨의 수가 가장 작은 사람을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 유저의 수 N (2 ≤ N ≤ 100)과 친구 관계의 수 M (1 ≤ M ≤ 5,000)이 주어진다. 둘째 줄부터 M개의 줄에는 친구 관계가 주어진다. 친구 관계는 A와 B로 이루어져 있으며, A와 B가 친구라는 뜻이다. A와 B가 친구이면, B와 A도 친구이며, A와 B가 같은 경우는 없다. 친구 관계는 중복되어 들어올 수도 있으며, 친구가 한 명도 없는 사람은 없다. 또, 모든 사람은 친구 관계로 연결되어져 있다. 사람의 번호는 1부터 N까지이며, 두 사람이 같은 번호를 갖는 경우는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 BOJ의 유저 중에서 케빈 베이컨의 수가 가장 작은 사람을 출력한다. 그런 사람이 여러 명일 경우에는 번호가 가장 작은 사람을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
1 3
1 4
4 5
4 3
3 2
','3
','SHORTEST_PATH'),
                                                                                                                (11192,'BAEKJOON','https://www.acmicpc.net/problem/1400',1400,'화물차','2초','128 MB',14,'<p>화물차가 출발지 창고에서 짐을 싣고 배송지 창고까지 짐을 운반하려고 한다. 이 도시의 도로망을 나타낸 지도의 예는 다음과 같다.</p>

<pre>#A##0##1#
.#..#..#.
.#..#..#.
.###2#.B.</pre>

<p>도로망에서 차들은 동, 서, 남, 북의 방향으로만 이동할 수 있고, 지도의 각 문자는 다음과 같은 의미를 가진다.</p>
<ul>
<li>A는 출발지 창고를 나타내고, 지도에서 유일하다.</li>
<li>B는 배송지 창고를 나타내고, 지도에서 유일하다.</li>
<li>.은 차가 들어갈 수 없는 곳을 나타낸다.</li>
<li>#은 각 도로 셀을 나타낸다. #은 기껏해야 두 개의 다른 도로 셀, 또는 교차로, 창고와 인접하다.</li>
<li>숫자 [0-9]는 신호등에 의해 제어되는 교차로를 나타낸다. 교차로는 적어도 세 개의 도로 셀과 인접하다. 교차로들은 0부터 9까지의 번호로 표시된다. 만일 번호 k를 가진 교차로가 있으면, 반드시 0부터 k까지 번호를 가진 교차로가 존재한다. 교차로의 신호등에 대한 설명은 아래에 나온다.</li>
</ul>
<p>차량의 이동은 다음과 같은 방식으로 분석된다.</p>
<ul>
<li>화물차가 인접한 도로 셀, 또는 교차로, 창고로 이동하는 데 걸리는 시간을 단위 시간이라고 가정한다. 차량이 어떤 위치에서 멈춰 서 있는 시간도 단위 시간으로 측정된다.</li>

<li>화물차가 진입하려는 방향으로 파란불이 켜져 있을 때만 교차로로 들어갈 수 있다. 그러나 교차로에 들어간 차량은 언제든지 임의의 방향으로 나갈 수 있다.</li>
<li>교차로의 신호등은 동서 방향과 남북 방향, 두 개의 신호가 주기적으로 켜진다. 교차로의 신호는 초기에 동서 방향 또는 남북 방향이 될 수 있다. 교차로의 신호 주기를 나타내는 값 "a b"는 동서 방향의 신호가 a 시간 켜지고, 남북 방향의 신호가 b 시간 켜짐을 의미한다. 예를 들어, 초기에 남북 방향의 신호가 켜지고 주기 값이 "2 3"이면, 차량이 1-3 시간에 남북 방향의 신호가 켜지고, 4-5 시간은 동서 방향, 6-8 시간은 다시 남북 방향의 신호가 켜진다.</li>

<p>출발지 창고에서 배송지 창고까지 최단 경로를 구하는 프로그램을 작성하시오.</p>
				</ul>
					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 여러 개의 테스트 케이스로 구성된다. 각 테스트 케이스의 첫째 줄에는 두 개의 정수 m과 n이 주어진다, 여기서 m은 지도를 나타내는 행렬의 행의 크기이고 n은 열의 크기이다(2 ≤ m, n ≤ 20).</p>

<p>그 다음 m개의 줄에는 각 줄마다 n개의 문자가 주어진다. 각 문자는 지도를 구성하는 문자인 #, ., A, B, [0-9]로 구성된다.</p>

<p>그 다음 줄부터는 각 교차로에 대한 정보가 주어진다. 교차로 번호가 0인 것부터 오름차순으로 한 줄에 하나씩 주어진다. 각 줄에는 교차로 번호 i와 - 또는 |, 그 다음으로 두 개의 정수 ai와 bi (1 ≤ ai, bi ≤ 20) 가 빈칸을 사이에 두고 주어진다, 여기서 -는 신호등이 초기에 동서 방향의 신호가 켜짐을 나타내고, |는 남북 방향의 신호가 켜짐을 나타낸다. ai와 bi는 각각 동서 방향 신호가 켜 있는 시간과 남북 방향 신호가 켜 있는 시간을 나타낸다.</p>

<p>각 테스트 케이스 사이에는 빈 줄 하나가 들어 있고, 두 개의 0으로 시작되는 테스트 케이스는 입력의 끝을 나타낸다. 테스트 케이스는 20개를 넘지 않는다고 가정해도 된다.<br>
&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해, 한 줄에 한 개의 정수를 출력한다. 이 정수는 출발지 창고에서 배송지 창고까지 차량으로 이동하는 데 걸리는 최소 시간이다. 만일 차량이 배송지 창고까지 도달할 수 없으면 "impossible"을 출력한다.<br>
&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 4
A##B
#..#
####

4 9
#A##0##1#
.#..#..#.
.#..#..#.
.###2#.B.
0 - 1 17
1 | 3 5
2 - 2 4

2 2
A.
.B

0 0

','3
17
impossible
','SHORTEST_PATH'),
                                                                                                                (11204,'BAEKJOON','https://www.acmicpc.net/problem/1445',1445,'일요일 아침의 데이트','2초','128 MB',14,'<p>일요일 아침에 형택이는 Maroon5의 Sunday Morning이란 노래를 들으면서 여자친구와의 로맨틱한 여행을 떠나기로 했다. 형택이는 이것저것 환상에 빠져있다가, 계획을 세우는데 실패했다. 따라서, 주위에 있는 숲을 같이 탐험하기로 했다.</p>

<p>깊은 숲속에는 정말 아름다운 꽃이 하나있다. 형택이는 여자친구의 마음을 감동시키기 위해서, 꽃을 보여주면서 자신의 마음을 전해주려고 급하게 계획했다.</p>

<p>불행하게도, 사람들이 숲에다 쓰레기를 버려서 형택이의 계획은 정말 망가지기 직전이다.</p>

<p>형택이는 그동안 여자친구와 사귀면서 2가지 깨달은 것이 있는데, 한 가지는 쓰레기를 통과해서 지나가는 것을 정말 싫어하는 것이고, 쓰레기를 따라 옆을 지나가는 것도 정말 불편하게 느낀다는 것이다.</p>

<p>형택이는 방금 쓰레기가 어디에있는지 조사를 마쳤다. 입력으로 숲의 지도가 주어진다. S는 형택이와 여자친구의 데이트 시작장소를&nbsp; 나타내고, F는 꽃이 있는 위치를 나타내고, g는 쓰레기가 있는 위치를 나타낸다. 그리고 .은 아무것도 없는 깨끗한 칸이다.</p>

<p>형택이의 목표는 S에서 F까지 가는데, 쓰레기로 차있는 칸을 되도록이면 적게 지나가는 것이다. 형택이와 여자친구는 한 번에 한 칸 움직일 수 있다. 가로 or 세로로 한 칸 움직일 수 있다. 만약 되도록 적게 지나가는 경우의 수가 여러개라면, 쓰레기 옆을 지나가는 칸의 개수를 최소로 해서 지나려고 한다. 만약 어떤 칸이 비어있는데, 인접한 칸에 쓰레기가 있으면 쓰레기 옆을 지나는 것이다. 그리고, S와 F는 세지 않는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 숲의 세로 크기 N과 가로 크기 M이 주어진다. N과 M은 3보다 크거나 같고, 50보다 작거나 같은 자연수이다. 둘째 줄부터 숲의 지도가 주어진다. 숲의 지도는 S, F, g, . 만으로 이루어져 있다. S는 반드시 모서리에 위치해 있고, F는 모서리에 위치해있지 않다. 그리고 S와 F는 반드시 하나만 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 형택이와 여자친구가 가장 최적의 방법으로 숲을 지났을 때, 지나가는 쓰레기의 최소 개수를 출력하고, 공백으로 구분 한 후에 쓰레기 옆을 지나가는 칸의 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 6
......
g..F..
......
..g...
......
...S.g
','0 0
','SHORTEST_PATH'),
                                                                                                                (11205,'BAEKJOON','https://www.acmicpc.net/problem/1446',1446,'지름길','2초','128 MB',10,'<p>매일 아침, 세준이는 학교에 가기 위해서 차를 타고 D킬로미터 길이의 고속도로를 지난다. 이 고속도로는 심각하게 커브가 많아서 정말 운전하기도 힘들다. 어느 날, 세준이는 이 고속도로에 지름길이 존재한다는 것을 알게 되었다. 모든 지름길은 일방통행이고, 고속도로를 역주행할 수는 없다.</p>

<p>세준이가 운전해야 하는 거리의 최솟값을 출력하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 지름길의 개수 N과 고속도로의 길이 D가 주어진다. N은 12 이하인 양의 정수이고, D는 10,000보다 작거나 같은 자연수이다. 다음 N개의 줄에 지름길의 시작 위치, 도착 위치, 지름길의 길이가 주어진다. 모든 위치와 길이는 10,000보다 작거나 같은 음이 아닌 정수이다. 지름길의 시작 위치는 도착 위치보다 작다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>세준이가 운전해야하는 거리의 최솟값을 출력하시오.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 150
0 50 10
0 50 20
50 100 10
100 151 10
110 140 90
','70
','SHORTEST_PATH'),
                                                                                                                (11203,'BAEKJOON','https://www.acmicpc.net/problem/1486',1486,'등산','2초','128 MB',14,'<p>세준이는 등산광이다. 세준이는 높은 곳에서 도시를 내려다 보는 것을 좋아한다. 하지만, 겁이 많은 세준이는 어두워지기 전에 호텔로 내려오려고 한다.</p>

<p>세준이가 가려고하는 산의 지도가 입력으로 주어진다. 산의 지도를 M이라고 했을 때, M[i][j]는 (i,j)의 높이가 M[i][j]라는 것을 의미한다. 그 값이 A-Z일 때는 0-25를 뜻하는 것이고, a-z일 때는, 26-51을 뜻한다.</p>

<p>세준이의 호텔은 (0,0)에 있다. 그리고, 세준이는 지금 위치에서 바로 인접한 정수 좌표 중 높이의 차이가 T보다 크지 않은 곳으로만 다닐 수 있다.</p>

<p>만약 세준이가 현재 위치에서 높이가 낮은 곳이나 같은 곳으로 이동한다면 시간은 1초가 걸린다. 하지만 높은 곳으로 이동한다면 두 위치의 높이의 차이의 제곱만큼 시간이 걸린다. 예를 들어 높이가 5에서 높이가 9인 곳으로 간다면, 시간은 (5-9)<sup>2</sup>=16초가 걸린다. 하지만, 높이가 9인 곳에서 5인 곳으로 간다면 시간은 1초가 걸린다.</p>

<p>산의 지도와, T, 그리고 어두워지는 시간 D가 주어졌을 때, 세준이가 D보다 크지 않은 시간 동안 올라갈 수 있는 최대 높이를 구하는 프로그램을 작성하시오.(세준이는 호텔에서 출발해서 호텔로 돌아와야 한다.)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 산의 세로크기 N과 가로크기 M 그리고, T와 D가 주어진다. N과 M은 25보다 작거나 같은 자연수이다. 둘째 줄부터 N개의 줄에 지도가 주어진다. T는 52보다 작거나 같은 자연수이고, D는 1,000,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 세준이가 갈 수 있는 가장 높은 곳의 높이를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 6 6 36
AABCDE
GJIHGF
MKLMNO
STSRQP
YUVWXY
edcbaZ
','30','SHORTEST_PATH'),
                                                                                                                (11206,'BAEKJOON','https://www.acmicpc.net/problem/1504',1504,'특정한 최단 경로','1초','256 MB',12,'<p>방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.</p>

<p>세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라. 1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 N과 간선의 개수 E가 주어진다. (2 ≤ N ≤ 800, 0 ≤ E ≤ 200,000) 둘째 줄부터 E개의 줄에 걸쳐서 세 개의 정수 a, b, c가 주어지는데, a번 정점에서 b번 정점까지 양방향 길이 존재하며, 그 거리가 c라는 뜻이다. (1 ≤ c ≤ 1,000) 다음 줄에는 반드시 거쳐야 하는 두 개의 서로 다른 정점 번호 v<sub>1</sub>과 v<sub>2</sub>가 주어진다. (v<sub>1</sub> ≠ v<sub>2</sub>, v<sub>1</sub> ≠ N,&nbsp;v<sub>2</sub> ≠ 1) 임의의 두 정점 u와 v사이에는 간선이 최대 1개 존재한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 두 개의 정점을 지나는 최단 경로의 길이를 출력한다. 그러한 경로가 없을 때에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 6
1 2 3
2 3 3
3 4 1
1 3 5
2 4 5
1 4 4
2 3
','7
','SHORTEST_PATH'),
                                                                                                                (11210,'BAEKJOON','https://www.acmicpc.net/problem/1507',1507,'궁금한 민호','2초','128 MB',14,'<p>강호는 N개의 도시로 이루어진 나라에 살고 있다. 각 도시는 M개의 도로로 연결되어 있으며, 각 도로를 지날 때 필요한 시간이 존재한다.&nbsp;도로는 잘 연결되어 있기 때문에, 도시 A에서 B로 이동할 수 없는 경우는 존재하지 않는다.</p>

<p>도시 A에서 도시 B로 바로 갈 수 있는 도로가 있거나, 다른 도시를 거쳐서 갈 수 있을 때, 도시 A에서 B를 갈 수 있다고 한다.</p>

<p>강호는 모든 쌍의 도시에 대해서 최소 이동 시간을 구해놓았다. 민호는 이 표를 보고 원래 도로가 몇 개 있는지를 구해보려고 한다.</p>

<p>예를 들어, 예제의 경우에 모든 도시 사이에 강호가 구한 값을 가지는 도로가 존재한다고 해도 된다. 하지만, 이 도로의 개수는 최솟값이 아니다. 예를 들어, 도시 1-2, 2-3, 1-4, 3-4, 4-5, 3-5를 연결하는 도로만 있다고 가정해도, 강호가 구한 모든 쌍의 최솟값을 구할 수 있다. 이 경우 도로의&nbsp;개수는 6개이고, 모든 도로의 시간의 합은 55이다.</p>

<p>모든 쌍의 도시 사이의 최소 이동 시간이 주어졌을 때, 이 나라에 존재할 수 있는 도로의 개수의 최솟값일 때, 모든 도로의 시간의 합을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에 각각의 도시 사이에 이동하는데 필요한 시간이&nbsp;주어진다. A에서 B로 가는 시간과 B에서 A로 가는 시간은 같다. 또, A와 B가 같은 경우에는&nbsp;0이 주어지고, 그 외의 경우에 필요한 시간은 2500보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 도로 개수가&nbsp;최소일 때, 모든 도로의 시간의 합을 출력한다. 불가능한 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
0 6 15 2 6
6 0 9 8 12
15 9 0 16 18
2 8 16 0 4
6 12 18 4 0
','55
','SHORTEST_PATH'),
                                                                                                                (11216,'BAEKJOON','https://www.acmicpc.net/problem/1537',1537,'새로운 연산자','2초','128 MB',16,'<p>양의 정수 N이 주어졌을 때, 다음과 같은 다섯 개의 함수를 정의 했다.</p>

<ul>
	<li>Sum(N)은 N의 모든 자리수를 더한 값이다.</li>
	<li>Prod(N)은 N의 모든 자리수를 곱한 값이다.</li>
	<li>Prod3(N)은 N의 자리수중 가장 큰 3개를 곱한 값이다. 만약 N이 3자리보다 작다면 Prod3(N) = Prod(N)이다.</li>
	<li>Smallest(N)은 N의 가장 작은 자리수이다.</li>
	<li>First(N)은 N의 가장 맨 앞 자리수이다.</li>
</ul>

<p>세준이는 @라는 연산자를 정의 했다.</p>

<p>X@Y = 5*Prod3(X) + First(X) * Sum(Y) + Smallest(Y)이다.</p>

<ul>
	<li>Sum(47) = 4+7 = 11</li>
	<li>Prod(2322) = 2*3*2*2 = 24</li>
	<li>Prod3(2322) = 3*2*2 = 12</li>
	<li>Prod3(47) = Prod(47) = 4*7 = 28</li>
	<li>Smallest(427) = 2</li>
	<li>First(427) = 4</li>
	<li>12034@217 = 5 * (4*3*2) + 1 * (2+1+7) + 1&nbsp;= 131</li>
</ul>

<p>올바른 식은 다음과 같이 재귀적으로 정의 된다.</p>

<ol>
	<li>X는 올바른 식이다.</li>
	<li>만약, A가 올바른 식이고, B가 올바른 식이라면, A@B도 올바른 식이다.</li>
	<li>위의 규칙에 의해서 생성되지 않은 식은 모두 올바르지 않은 식이다.</li>
</ol>

<p>X와 G가 주어졌을 때, X를 G로 만드는 올바른 식을 구하는 프로그램을 작성하시오. 만약 불가능하다면 -1을 출력한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 X와 G가 주어진다. X는 1,000,000보다 작거나 같은 자연수이고, G는 2,000,000,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 올바른 식에 들어가는 @의 최소 값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','374 659
','2
','SHORTEST_PATH'),
                                                                                                                (11225,'BAEKJOON','https://www.acmicpc.net/problem/1584',1584,'게임','2초','128 MB',11,'<p>세준이는 위험한 지역에서 탈출하는 게임을 하고 있다. 이 게임에는 세준이가 들어갈 수 없는 죽음의 구역이 있고, 들어가서 한 번 움직일 때 마다 생명이 1씩 소모되는 위험한 구역이 있다. 그리고, 자유롭게 생명의 위협없이 움직일 수 있는 안전한 구역이 있다. (안전한 구역은 죽음의 구역과 위험한 구역을 제외한 나머지 이다.)</p>

<p>세준이는 (0, 0)에서 출발해서 (500, 500)으로 가야 한다. 세준이는 위, 아래, 오른쪽, 왼쪽으로만 이동할 수 있다. 현재 세준이는 (0, 0)에 있다. 그리고, 게임 판을 벗어날 수는 없다.</p>

<p>세준이가 (0, 0)에서 (500, 500)으로 갈 때 잃는 생명의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 위험한 구역의 수 N이 주어진다. 다음 줄부터 N개의 줄에는 X1 Y1 X2 Y2와 같은 형식으로 위험한 구역의 정보가 주어진다. (X1, Y1)은 위험한 구역의 한 모서리이고, (X2, Y2)는 위험한 구역의 반대 모서리이다. 그 다음 줄에는 죽음의 구역의 수 M이 주어진다. 다음 줄부터 M개의 줄에는 죽음의 구역의 정보가 위험한 구역의 정보와 같이 주어진다. 주어지는 구역은 모두 겹칠 수 있으며, 서로 다른 구역이 겹칠 때는, 더 심한 구역이 해당된다. 예를 들어, 죽음+위험 = 죽음, 위험+안전 = 위험, 위험+위험 = 위험, 죽음+안전 = 죽음이다. 위험한 구역이 아무리 겹쳐도 생명은 1씩 감소된다. 생명의 감소는 구역에 들어갈 때만, 영향을 미친다. 예를 들어, (500, 500)이 위험한 구역일 때는, (500, 500)에 들어갈 때, 생명이 1 감소되지만, (0, 0)이 위험한 구역이더라도 생명은 감소되지 않는다. 마찬가지로, (0, 0)이 죽음의 구역이더라도 세준이는 이미 그 곳에 있으므로 세준이에게 영향을 미치지 않는다. N과 M은 50보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 정답을 출력한다. 만약 (500, 500)으로 갈 수 없을 때는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1
500 0 0 500
1
0 0 0 0
','1000
','SHORTEST_PATH'),
                                                                                                                (11191,'BAEKJOON','https://www.acmicpc.net/problem/1602',1602,'도망자 원숭이','2초','128 MB',18,'<p>동물원에서 막 탈출한 원숭이 한 마리가 세상구경을 하고 있다. 그러나 그는 곧 동물원 직원에게 쫓기는 신세가 되었다. 원숭이와 동물원 직원사이에 쫓고 쫓기는 추격전을 살펴보자.</p>

<p>원숭이가 사는 나라는 여러 개의 도시와 도시들을 연결하는 길들로 구성되어 있다. 각 길들은 두 개의 도시를 양방향으로 연결한다. 또한, 각 길은 지나갈 때마다 일정한 시간이 걸린다. 원숭이는 시작도시에서 탈출하여 도착도시까지 최대한 빠른 시간에 가야한다.</p>

<p>그런데 원숭이의 오랜 숙적 멍멍이가 이를 갈며 원숭이를 기다리고 있었다. 멍멍이는 원숭이가 도망가는 경로 중 시작점과 도착점을 포함한 도시 중 한 군데에서 원숭이를 괴롭히기로 계획했다. 각 도시마다 구조가 다르기 때문에 멍멍이가 원숭이를 괴롭힐 수 있는 시간이 정해져있다.</p>

<p>그래서 멍멍이는 원숭이가 도망가는 경로 상에 있는 모든 도시들 중에서 가장 오랜 시간동안 괴롭힐 수 있는 도시에서 괴롭히기로 계획했다. 원숭이는 멍멍이를 피할 수 없다. 피할 수 없다면 즐겨라! 시작도시와 도착도시가 주어졌을 때, 원숭이가 최대한 빨리 도망갈 수 있는 시간을 구하는 프로그램을 작성하시오.</p>

<p>예를 들어, A, B, C, D 4개의 도시가 있고 원숭이는 A에서 도망쳐서 D로 가려고 한다고 하자. 이때, A-B와 B-D 간의 도로의 통행시간은 각각 50 이고 A-C 와 C-D 간의 도로의 통행시간은 각각 70 이면 A-B-D 의 경로가 더 이익이다. (각각 100 과 140 의 시간이 걸린다.)</p>

<p>그러나, 네 도시에서 멍멍이가 원숭이를 괴롭힐 수 있는 시간이 10, 80, 20, 10 이라면 A-C-D 를 통해 가는 것이 시간을 더 줄일 수 있는 방법이다. (A-B-D 의 경우 100+80 = 180 의 시간이 걸리고, A-C-D 의 경우 140+20 = 160 의 시간이 걸린다.)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 도시의 개수 N (2 ? N ? 500) 과 도로의 개수 M (0 ? M ? 10,000), 그리고 질문의 개수 Q (0 ? Q ? 40,000) 가 주어진다.</p>

<p>그 다음 줄에, N개의 정수로 각 도시에서 멍멍이가 원숭이를 괴롭힐 수 있는 시간이 주어진다. 각 시간은 1이상 10,000이하의 정수이다. 그 후 M줄에 각각 3개의 정수로, 해당 도로가 잇는 두 도시의 번호 a, b (1 <= a, b <= N) 와 해당 도로의 통행시간 d 가 주어진다. 통행시간은 1이상 10,000이하의 정수이다.</p>

<p>그 후 Q줄에 각각 2개의 정수로, 원숭이의 출발도시와 도착도시 S, T 가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 원숭이가 S 번 도시로부터 T 번 도시까지 도망가는 데 드는 최소시간을 출력한다. 만약 두 도시 간에 경로가 없을 경우, -1 을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','7 8 5
2 3 5 15 4 4 6
1 2 20
1 4 20
1 5 50
2 3 10
3 4 10
3 5 10
4 5 15
6 7 10
1 5
1 6
5 1
3 1
6 7
','45
-1
45
35
16
','SHORTEST_PATH'),
                                                                                                                (11195,'BAEKJOON','https://www.acmicpc.net/problem/1613',1613,'역사','1초','128 MB',13,'<p>역사, 그 중에서도 한국사에 해박한 세준이는 많은 역사적 사건들의 전후 관계를 잘 알고 있다. 즉, 임진왜란이 병자호란보다 먼저 일어났으며, 무오사화가 기묘사화보다 먼저 일어났다는 등의 지식을 알고 있는 것이다.</p>

<p>세준이가 알고 있는 일부 사건들의 전후 관계들이 주어질 때, 주어진 사건들의 전후 관계도 알 수 있을까? 이를 해결하는 프로그램을 작성해 보도록 하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 첫 줄에 사건의 개수 n(400 이하의 자연수)과 알고 있는 사건의 전후 관계의 개수 k(50,000 이하의 자연수)가 주어진다. 다음 k줄에는 전후 관계를 알고 있는 두 사건의 번호가 주어진다. 이는 앞에 있는 번호의 사건이 뒤에 있는 번호의 사건보다 먼저 일어났음을 의미한다. 물론 사건의 전후 관계가 모순인 경우는 없다. 다음에는 사건의 전후 관계를 알고 싶은 사건 쌍의 수 s(50,000 이하의 자연수)이 주어진다. 다음 s줄에는 각각 서로 다른 두 사건의 번호가 주어진다. 사건의 번호는 1보다 크거나 같고, N보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>s줄에 걸쳐 물음에 답한다. 각 줄에 만일 앞에 있는 번호의 사건이 먼저 일어났으면 -1, 뒤에 있는 번호의 사건이 먼저 일어났으면 1, 어떤지 모르면(유추할 수 없으면) 0을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
1 2
1 3
2 3
3 4
2 4
3
1 5
2 4
3 1
','0
-1
1
','SHORTEST_PATH'),
                                                                                                                (6319,'BAEKJOON','https://www.acmicpc.net/problem/1667',1667,'지민이의 테러 Season IV','2초','128 MB',17,'<p>지민이는 지뢰 사건에 의해 정문이에게 도망 다니고 있다. 그러던 중 N개의 펜스로 설치된 장애물을 만나게 되었다. 이 펜스들은 x축과 평행하고 i번째 펜스의 y좌표는 i이다. 펜스는 너무 높기 때문에 넘을 수 없고 돌아가는 방법만이 가능하다. 또한 현재 위치에서 x축의 양의 방향 또는 음의 방향으로 진행하던 중 펜스의 끝에 도달하면 y축과 평행하게 다음 펜스를 만날 때까지 내려가는 일을 반복한다.</p>

<pre>   +-+-S-+             4번째 펜스
 +-+-+-+               3번째 펜스
     +-+-+-+           2번째 펜스
   +-+-+-+             1번째 펜스
 |=|=|=*=|=|=|
-3-2-1 0 1 2 3
</pre>

<p>위의 그림에서 S는 현재 지민이가 있는 위치이다. 그리고 지민이는 펜스를 잘 피하여 *로 표시된 탈출구까지 도달해야한다. 가능한 경로 중 하나는 일단 현재 위치에서 x축과 평행하게 양의 방향으로 1만큼 이동하면 펜스의 끝에 도달한다. 그리고 y축과 평행하게 아래로 내려가면 2번째 펜스에 도달하게 되고 또 다시 1만큼 x좌표가 양인 방향으로 이동하면 펜스의 끝에 도달하게 된다. 그리고 1만큼 내려간 뒤 x좌표가 음인 방향으로 2만큼 이동하면 탈출구에 도달하여 탈출할 수 있다.&nbsp; y축을 따라 내려가는 길이는 어떤 식으로 내려가든 일정하기 때문에 고려하지 않는다고 하면 위의&nbsp; 경로로 이동한 것은 x축과 평행하게 총 4만큼 이동한 게 된다. 그리고 위의 경로가 이 예에서 최단 경로이다. 문제는 펜스의 위치가 주어졌을 때 최단경로의 길이를 구하는 것이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 펜스의 개수 N(1 ≤ N ≤ 50,000)과 지민이가 있는 x좌표 S(-100,000 ≤ S ≤ 100,000)가 공백으로 구분되어 주어진다.</p>

<p>두 번째 줄부터 N+1번째 줄까지 펜스의 시작 좌표 x와 끝 좌표 x가 공백으로 구분되어 주어진다. 좌표의 범위는 -100,000 이상 100,000 이하이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>탈출구로 도달하는 최단경로를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 0
-2 1
-3 0
-1 2
-2 1
','4
','SHORTEST_PATH'),
                                                                                                                (11218,'BAEKJOON','https://www.acmicpc.net/problem/1702',1702,'고속도로','2초','128 MB',16,'<p>서울 내의 고속도로 도로망의 이용 요금이 빠르게 증가하고 있다. 때문에 최적의 경로를 찾는 것이 실제 문제로 제기되고 있다. 고속도로 도로망은 두 도시간의 양방향 도로들로 구성되어 있다. 각각의 도로에 대해 도로 이용요금과 도로를 지나가는데 걸리는 시간이 알려져 있다.</p>

<p>경로는 여행하는데 이용하는 도로들을 나열한 것을 의미한다. 경로상의 총 이동시간은 경로상의 도로들을 지나가는데 걸리는 시간의 합을 의미한다. 또한 경로상의 총 요금은 이동하는 도로들의 이용요금의 총합을 말한다. 그리고 경로상의 총 이용시간이 적을수록, 이용요금이 적을수록 더 좋은 경로가 된다. 즉, 어떤 경로가 다른 경로보다 좋다는 말은 이 경로가 다른 경로보다 빠르고 이용요금이 적다는 것을 의미한다. 우리는 어떠한 경로가 다른 어떤 경로보다도 좋은 경로일 때 이를 최적의 경로라 부른다. 하지만 항상 이러한 최적의 경로가 존재하는 것은 아니다.</p>

<p>예를 들어, 아래의 그림과 같은 고속도로 도로망이 있다고 하자. 각각의 도로는 요금과 이동하는데 걸리는 시간을 나타내는 한 쌍의 숫자로 구성되어진다,</p>

<p><img alt="" src="/JudgeOnline/upload/201005/gragra.PNG" style="height:143px; width:276px"></p>

<p>그리고 도시 1에서 도시 4로 가는데는 총 4가지 경로가 존재한다. 4가지 경로에 대해 총 이동시간과 요금을 계산하여 보면 1-2-4(요금 4, 시간 5), 1-3-4(요금 4, 시간 5), 1-2-3-4(요금 6, 시간 4), 1-3-2-4(요금 4, 시간 10)이 된다.</p>

<p>그리고 여기서 경로 1-3-4와 1-2-4가 경로 1-3-2-4보다 좋은 것을 알 수 있다. 이 도로망에서는 효율적인 요금-시간 쌍이 두 가지 존재한다. 요금 4, 시간 5(경로 1-2-4, 1-3-4), 요금 6, 시간 4(경로 1-2-3-4). 만약 요금을 많이 내더라도 빠른 길을 원한다면 경로 1-2-3-4를 선택하면 되고 반대로 시간은 조금 더 걸리더라도 요금을 적게 내고 싶으면 경로 1-3-4 또는 1-2-4를 선택하면 된다.</p>

<p>문제는 고속도로 도로망에 대한 정보가 주어지면 시작 도시에서 끝 도시까지 연결하는 효율적인 경로를 계산하는 것이다. 우리는 단지 서로 다른 효율적인 비용-시간 쌍의 개수만 출력하면 된다.</p>

<p>문제는 지역들이 노드로 구성된 그래프가 주어졌을 때 원샘이 원하는 지역 간의 거리를 신속히 알려주는 것이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 n(1≤n≤100), 도로의 개수 m(1≤m≤300), 시작 도시 s, 도착 도시 e가 주어진다. (1≤s,e≤n, s≠e) 그 다음부터 m개의 줄에 도로에 대한 정보가 주어지는데 한 줄에 한 도로의 양 끝점 p, r(1≤p,r≤n, p≠r)과 요금 c(0≤c≤100), 그리고 시간 t(0≤t≤100)이 주어진다. 두 개 도시 사이에는 한 개 이상의 도로가 존재할 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 서로 다른 효율적인 비용-시간 쌍의 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 5 1 4
2 1 2 1
3 4 3 1
2 3 1 2
3 1 1 4
2 4 2 4
','2','SHORTEST_PATH'),
                                                                                                                (11219,'BAEKJOON','https://www.acmicpc.net/problem/1719',1719,'택배','2초','128 MB',13,'<p>명우기업은 2008년부터 택배 사업을 새로이 시작하기로 하였다. 우선 택배 화물을 모아서 처리하는 집하장을 몇 개 마련했지만, 택배 화물이 각 집하장들 사이를 오갈 때 어떤 경로를 거쳐야 하는지 결정하지 못했다. 어떤 경로를 거칠지 정해서, 이를 경로표로 정리하는 것이 여러분이 할 일이다.</p>

<p><img alt="" src="/JudgeOnline/upload/201005/taekbae.PNG" style="height:180px; width:275px"></p>

<p>예시된 그래프에서 굵게 표시된 1, 2, 3, 4, 5, 6은 집하장을 나타낸다. 정점간의 간선은 두 집하장간에 화물 이동이 가능함을 나타내며, 가중치는 이동에 걸리는 시간이다. 이로부터 얻어내야 하는 경로표는 다음과 같다.</p>

<p><img alt="" src="/JudgeOnline/upload/201005/tktk.PNG" style="height:218px; width:334px"></p>

<p>경로표는 한 집하장에서 다른 집하장으로 최단경로로 화물을 이동시키기 위해 가장 먼저 거쳐야 하는 집하장을 나타낸 것이다. 예를 들어 4행 5열의 6은 4번 집하장에서 5번 집하장으로 최단 경로를 통해 가기 위해서는 제일 먼저 6번 집하장으로 이동해야 한다는 의미이다.</p>

<p>이와 같은 경로표를 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 수 n과 m이 빈 칸을 사이에 두고 순서대로 주어진다. n은 집하장의 개수로 200이하의 자연수, m은 집하장간 경로의 개수로 10000이하의 자연수이다. 이어서 한 줄에 하나씩 집하장간 경로가 주어지는데, 두 집하장의 번호와 그 사이를 오가는데 필요한 시간이 순서대로 주어진다. 집하장의 번호들과 경로의 소요시간은 모두 1000이하의 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>예시된 것과 같은 형식의 경로표를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 10
1 2 2
1 3 1
2 4 5
2 5 3
2 6 7
3 4 4
3 5 6
3 6 7
4 6 4
5 6 2
','- 2 3 3 2 2
1 - 1 4 5 5
1 1 - 4 5 6
3 2 3 - 6 6
2 2 3 6 - 6
5 5 3 4 5 -
','SHORTEST_PATH'),
                                                                                                                (11228,'BAEKJOON','https://www.acmicpc.net/problem/1738',1738,'골목길','2초','128 MB',15,'<p>민승이는 놀러가기 위해 집을 나섰다. 민승이네 집에서 코레스코 콘도까지 가기 위해서는 복잡하게 얽혀있는 골목길들을 통과해야 한다.</p>

<p>그런데, 어떤 길에는 깡패가 서식하고 있어, 그 길을 지나게 되면 깡패에게 일정한 양의 금품을 갈취당하게 된다. 그런가하면, 어떤 길에는 지나가던 행인들이 흘리고 간 금품들이 떨어져 있어, 그 길을 지나게 되면 일정한 양의 금품을 획득하게 된다. 한 번 지나간 길을 다시 방문하더라도 금품을 갈취당하거나 획득한다.</p>

<p>골목길의 연결 상태와, 각 골목길을 지날 때 갈취당하거나 획득하게 되는 금품의 양이 주어졌을 때, 민승이가 최대한 유리한 경로를 따라 집에서 코레스코 콘도까지 가기 위해서는 어떻게 해야 하는지 출력하는 프로그램을 작성하시오. </p>

<p>보유 중인 금품의 양이 음수가 될 수 있다. 최대한 유리한 경로 또는 최적의 경로는 민승이네 집에서 출발하여 코레스코 콘도에 도착하는 경로 중 금품의 양이 최대가 되는 경로이다. </p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 골목길들이 교차하는 지점의 개수 n (2 ≤ n ≤ 100)과 골목길의 개수 m (1 ≤ m ≤ 20,000) 이 차례로 주어진다. 이어지는 m개의 행에 각각의 골목길을 나타내는 세 정수 u, v, w가 차례로 주어진다. 이는 u번 교차점에서 v번 교차점으로 이동할 수 있는 골목길이 나있다는 의미이다. 즉, 주어지는 골목길들은 기본적으로 모두 일방통행로이다. w (0 ≤ |w| ≤ 1,000)는 이 길을 지날 때 갈취당하거나 획득하게 되는 금품의 양이다. 음수는 갈취, 양수는 획득을 뜻한다.</p>

<p>골목길의 교차점 번호는 1이상 n이하의 정수이다. 민승이네 집은 1번 교차점에 있고, 이곳 코레스코 콘도는 n번 교차점에 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>최적의 경로를 구할 수 있다면 민승이네 집부터 코레스코 콘도까지 가는 동안 거치게 되는 교차점들의 번호를 공백 하나를 사이에 두고 차례로 출력하면 된다. 그런데, 경우에 따라서는 최적의 경로라는 것이 존재하지 않는 상황이 발생한다. 어떠한 경우에 그런 상황이 발생하는지 생각해 보자. 그러한 경우에는 -1을 출력하도록 한다.</p>

<p>최적의 경로가 여러 개 존재할 때는 아무거나 출력해도 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 7
1 2 3
1 3 4
3 1 -7
2 3 2
3 4 1
4 2 -5
4 5 1
','1 2 3 4 5
','SHORTEST_PATH'),
                                                                                                                (11224,'BAEKJOON','https://www.acmicpc.net/problem/1745',1745,'숨기','2초','128 MB',20,'<p>학생들은 선생님들과 조교들이 스타를 하러 간 사이에 여러 방에 들어가 신나게 놀고 있었다. 그리고 시간이 되어 놀던 방에서 자려고 했지만 각 방에서 잘 수 있는 사람의 수가 정해져 있어서 불가피하게 몇몇 학생들은 방을 옮겨 자야한다. 하지만 학생들이 옮기는 시간 중에 스타를 끝내고 오신 원장선생님과 마주치게 되면 안되기 때문에 고민에 빠져있다. 결국 최대한 빠른 시간에  모든 학생들이 방에 잘 수 있는 제한 수를 넘지 않으면서 적당한 방에 숨어 자려고 한다.  </p>

<p>F개의 방에 학생들이 현재 숨어 있고, 이 방들을 연결하는 P개의 통로가 있다. 통로의 폭은 넓기 때문에 동시에 한 통로에 지나가는 학생 수의 제한은 없고 양방으로 통행 가능하다.</p>

<p>모든 방의 제한이 넘지 않도록 학생들이 이동해야 하는 최소 시간을 출력하는 것이 문제이다. 물론 몇몇 학생들은 현재 방에 있을 수 있다. (근데, 아마 이 시간보다 스타가 빨리 끝날듯..)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 F(1≤F≤200), P(1≤P≤1,500)가 주어진다. 2번째 줄부터 F개의 줄까지 i번째 줄에는 i-1번째 방에 현재 있는 학생 수와 그 방에 잘 수 있는 학생 수가 빈칸으로 구분되어 주어진다. 두 수 모두 0 이상 1000 이하의 수이다. 다음 P개의 줄에는 한 통로가 연결되는 두 방과 그 통로를 통과하는데 걸리는 시간(≤1,000,000,000)이 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>학생들이 이동해야 하는 최소 시간을 출력한다. 불가능할 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>1번 방에 있는 학생 중 2명은 이 방에 남고 4명은 2번 방에 이동하며, 남은 1명은 3번 방으로 가면 총 110의 시간이 소요된다.</p>

				</div>
				</div>','3 4
7 2
0 4
2 6
1 2 40
3 2 70
2 3 90
1 3 120
','110
','SHORTEST_PATH'),
                                                                                                                (11234,'BAEKJOON','https://www.acmicpc.net/problem/1753',1753,'최단경로','1초','256 MB',12,'<p>방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 V와 간선의 개수 E가 주어진다. (1 ≤ V ≤ 20,000, 1 ≤ E ≤ 300,000) 모든 정점에는 1부터 V까지 번호가 매겨져 있다고 가정한다. 둘째 줄에는 시작 정점의 번호 K(1 ≤ K ≤ V)가 주어진다. 셋째 줄부터 E개의 줄에 걸쳐 각 간선을 나타내는 세 개의 정수 (u, v, w)가 순서대로 주어진다. 이는 u에서 v로 가는 가중치 w인 간선이 존재한다는 뜻이다. u와 v는 서로 다르며 w는 10 이하의 자연수이다. 서로 다른 두 정점 사이에 여러 개의 간선이 존재할 수도 있음에 유의한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄부터 V개의 줄에 걸쳐, i번째 줄에 i번&nbsp;정점으로의 최단 경로의 경로값을 출력한다. 시작점 자신은 0으로 출력하고, 경로가 존재하지 않는 경우에는 INF를 출력하면 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 6
1
5 1 1
1 2 2
1 3 3
2 3 4
2 4 5
3 4 6
','0
2
3
7
INF
','SHORTEST_PATH'),
                                                                                                                (11236,'BAEKJOON','https://www.acmicpc.net/problem/1800',1800,'인터넷 설치','2초','128 MB',15,'<p>오늘 팀전을 다들 열심히 하시는 것을 보고 원장선생님은 세미나 실에 인터넷을 설치해 주기로 마음을 먹으셨다. 하지만 비 협조적인 코레스코 콘도는 원장님께서 학생들에게 인터넷 선을 연결하는 것에 대해서 일부에 대해 돈을 요구하였다.</p>

<p>각각의 학생들의 번호가 1부터 N까지 붙여져 있다고 하면 아무나 서로 인터넷 선이 연결되어 있지 않다. P(P<=10,000)개의 쌍만이 서로 이어 질수 있으며 서로 선을 연결하는데 가격이 다르다.</p>

<p>1번은 다행히&nbsp;인터넷 서버와 바로 연결되어 있어 인터넷이 가능하다. 우리의 목표는 N번 컴퓨터가 인터넷에 연결하는 것이다. 나머지 컴퓨터는 연결 되어 있거나 연결 안되어 있어도 무방하다.</p>

<p>하지만 코레스코에서는 K개의 인터넷 선에 대해서는 공짜로 연결해주기로 하였다. 그리고 나머지 인터넷 선에 대해서는 남은 것 중 제일 가격이 비싼 것에 대해서만 가격을 받기로 하였다. 이때 원장선생님이 내게 되는 최소의 값을 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 N(1 ≤ N ≤ 1,000), 케이블선의 개수 P(1 ≤ P ≤ 10,000), 공짜로 제공하는 케이블선의 개수 K(0 ≤ K < N)이 주어진다. 다음 P개의 줄에는 케이블이 연결하는 두 컴퓨터 번호와 그 가격이 차례로 들어온다. 가격은 1 이상 1,000,000 이하다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 원장선생님이 내게 되는 최소의 돈을 출력한다. 만약 1번과 N번 컴퓨터를 잇는 것이 불가능 하다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>1-3 3-2 2-5을 이용하여 인터넷을 연결한다면 그 가격들은 4 3 9원이 나오게 된다.</p>

<p>하지만 코레스코에서 1개의 케이블은 무상으로 주니까 9원짜리를 뺀 것 중 가장 큰 가격은 4가 된다.</p>

				</div>
				</div>','5 7 1
1 2 5
3 1 4
2 4 8
3 2 3
5 2 9
3 4 7
4 5 6','4','SHORTEST_PATH'),
                                                                                                                (6358,'BAEKJOON','https://www.acmicpc.net/problem/1810',1810,'징검다리 달리기 2','2초','128 MB',13,'<p>원래 징검다리는 단순히 개울을 건너기 위해 만든 것이다. 그러나 놀이를 좋아하는 사람들은 이 징검다리 위를 달리는 경기를 하기로 하였다.</p>

<p>징검다리가 놓여 있는 위치는 (x, y) 순서쌍으로 표현된다. 시작점은 언제나 (0,0) 원점이다. 경기가 진행되는 동안 여러분들은 현재 위치한 징검다리와 x좌표 차이가 2 이하이고, y좌표 차이도 2 이하인 징검다리로만 점프할 수 있다. 결승선은 x축에 평행한 직선인데, 여러분이 결승선과 y좌표가 동일한 징검다리에 도달하면, 결승선을 통과한 것이므로 경기가 끝난다.</p>

<p>징검다리들의 위치가 주어지면, 경기에서 승리하기 위해, 가장 빠른 경로를 찾아내는 프로그램을 작성하시오. 가장 빠른 경로란, 경로를 구성하고 있는 점프들의 길이 합이 최소인 경로이다. (x1, y1)에 위치한 징검다리에서 (x2, y2)에 위치한 징검다리로의 점프는 루트((x1-x2)^2+(y1-y2)^2)의 길이를 갖는다고 정의한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 징검다리의 개수 N과, 결승선의 y좌표 F가 주어진다. 둘째 줄부터는 N개의 징검다리들의 좌표가 한 줄에 하나씩 주어진다. N은 50,000 이하의 자연수이다. F나 각 좌표들은 0 이상 100만 이하의 정수이다. y좌표가 F를 초과하는 징검다리는 입력되지 않는다. (0,0)은 N개의 징검다리 중 하나로 입력되지 않지만, 여러분의 시작점임을 명심한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에, 가장 빠른 경로의 길이를 소수 첫째 자리에서 반올림하여, 정수로 출력하도록 한다. 불가능한 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>(0,0) - (1,2) - (3,2) - (4,1) - (6,3)의 경로를 따라 가면 8.4787...의 길이를 갖는 경로가 되며, 이것이 최단 경로이다.</p>

				</div>
				</div>','5 3
1 2
6 3
4 1
3 2
0 2
','8
','SHORTEST_PATH'),
                                                                                                                (11238,'BAEKJOON','https://www.acmicpc.net/problem/1841',1841,'군사 배치','2초','128 MB',23,'<p>두 개의 도시와 N(0≤N≤150)개의 마을로 이루어진 나라가 있다. 몇 개의 마을과 도시 사이에는 양방향으로 이동 가능한 길이 있기도 하다. 각각의 길을 이용하여 이동하는데 걸리는 시간은 서로 다를 수 있지만, 하나의 길을 이동할 때에는 어느 방향으로 이동해도 같은 시간이 걸린다.</p>

<p>이 나라에서는 치안에 신경을 쓰기 위해 군대를 배치하기로 하였다. 군대를 마을에 배치할 경우에는 마을 사람들에게 불편을 끼칠 우려가 있기 때문에, 군대를 배치할 때에는 반드시 길 위에 배치해야 한다. 길 위에 배치할 때에는 그 길이 연결하는 두 개의 마을(혹은 도시) 중 어느 한쪽에 원하는 만큼 가까이 배치할 수 있다.</p>

<p>이 나라의 군대는 G(0≤G≤353535)명의 군인으로 구성되어 있는데, 한 곳에 모든 군인을 배치할 수도 있고, 서로 다른 길에 군인들을 배치할 수도 있으며, 한 길 위에도 여러 명의 군인을 (서로 다른 위치에) 배치할 수도 있다. 단, 이와 같이 군대를 배치했을 때, 두 도시 사이를 이동하기 위해서는 적어도 한 명의 군인과 반드시 마주치도록 배치해야 한다.</p>

<p>또한 때로는 각 도시로 군대를 소집해야 할 필요가 있을 수도 있다. 군대를 소집하는 것은 두 도시 중 어느 한 쪽에서도 할 수 있으며, 군대를 소집하는데 걸리는 시간은 제일 마지막 군인이 마을에 도착하는 시간이 된다. 나라에서는 군대를 효율적으로 배치하기 위해서, 두 도시에서 군대를 소집하는데 걸리는 시간 중 더 큰 값이 작아지도록 하려 한다.</p>

<p>도시와 마을에 대한 정보가 주어졌을 때, 군대를 소집하는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 세 정수 N, G, E(0≤E≤5,000)가 주어진다. 다음 E개의 줄에는 각 길에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 이는 A번 마을(혹은 도시)와 B번 마을(혹은 도시) 사이에 C만큼 시간이 걸리는 길이 있음을 의미한다. 마을의 번호는 0부터 N-1까지의 정수로 표현되며, 두 도시는 각각 95050과 104729로 표현된다. C는 1,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 답을 출력한다. 답을 출력할 때에는 소수점 아래 첫째 자리까지(둘째 자리에서 반올림) 출력한다. 위의 조건을 만족하도록 군대를 배치하는 것이 불가능한 경우에는 Impossible을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 2 6
95050 0 1
0 1 2
1 104729 1
95050 2 1
2 3 3
3 104729 1
','2.5
','SHORTEST_PATH'),
                                                                                                                (11242,'BAEKJOON','https://www.acmicpc.net/problem/1848',1848,'동굴 탐험','1초','256 MB',21,'<p>월드산의 하부에는 동굴로 들어가는 입구가 있는데, 동굴은 터널을 통해 서로 연결되어 있는 여러 개의 작은 방들로 구성되어 있다. 동굴 입구는 탐험의 시작점이 되는 방 (이하 시작방)으로 곧장 연결되어 있다. 각 방을 연결하는 터널은 서로 교차하지 않으며, 두 개의 방을 연결하는 터널은 많아 봐야 하나이다.</p>

<p>"원쌤배 동굴 탐험 대회"가 개최될 예정이다. 대회의 목표는 시작방에서 출발하여 동굴 내부를 달려, 다시 시작방으로 되돌아 와 빠져 나오는 것인데, 그 경로는 참가자가 마음대로 정할 수 있지만 두 가지 조건을 지켜야 한다. 첫째 조건은, 시작방 이외의 방을 최소한 하나는 거쳐야 한다는 것이며, 둘째 조건은, 어떤 방과 터널도 최대 한 번밖에 방문할 수 없다는 것이다. (시작방은 물론 두 번 방문하게 되므로 예외이다.)</p>

<p>유명한 동굴 탐험가 김진영은 대회에 참가하기 위해 오랜 준비를 했고, 동굴을 여러 번 사전 답사하여 동굴 내부 구조를 알아내는 데 성공했다. 각각의 터널에 대해, 그는 그 터널을 가로지르는 데 필요한 시간을 계산했는데, 터널을 어느 방향으로 가로지르느냐에 따라 걸리는 시간이 서로 다른 경우도 있을 수 있다고 한다. 동굴 입구와 시작방 사이에서 소요되는 시간이나, 방 내부에서 이동하는데 필요한 시간은 무시할 수 있을 만했다. 이제 그는 경기의 규칙을 만족시키면서도, 가장 짧은 시간 내에 완주할 수 있는 경로를 찾아내려고 한다. 그를 돕기 위한 프로그램을 작성하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 n과 m이 주어진다. (3 ≤ n ≤ 5000, 3 ≤ m ≤ 10000) 이는 각각 동굴 내부의 방의 개수와, 터널의 개수를 나타낸다.</p>

<p>이어지는 m개의 줄에는 각각 터널의 정보를 제공하는 네 개의 숫자 a, b, c, d가 포함되어 있다. 이것은 a번 방에서 b번 방으로 갈 때는 c의 시간이 걸리고, 반대로 b번 방에서 a번 방으로 갈 때는 d의 시간이 걸린다는 의미이다. (1 ≤a, b ≤ n. a ≠ b. 1 ≤ c, d ≤ 10000)</p>

<p>방의 번호는 1번부터 n번까지 연속하여 붙어 있으며, 1번 방이 시작방이다. 언제나 조건을 만족하는 경로가 하나는 있다고 가정해도 좋다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>동굴 탐험에 소요되는 최소시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
1 2 4 3
2 3 4 2
1 3 1 1','6','SHORTEST_PATH'),
                                                                                                                (6370,'BAEKJOON','https://www.acmicpc.net/problem/1854',1854,'K번째 최단경로 찾기','2초','256 MB',17,'<p>봄캠프를 마친 김진영 조교는 여러 도시를 돌며 여행을 다닐 계획이다. 그런데 김 조교는, 느림의 미학을 중요시하는 사람이라 항상 최단경로로만 이동하는 것은 별로 좋아하지 않는다. 하지만 너무 시간이 오래 걸리는 경로도 그리 매력적인 것만은 아니어서, 적당한 타협안인 $k$번째 최단경로를 구하길 원한다. 그를 돕기 위한 프로그램을 작성해 보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 $n$, $m$, $k$가 주어진다. ($1 ≤ n ≤ 1\,000$, $0 ≤ m ≤ 2\,000\,000$, $1 ≤ k ≤ 100$) $n$과 $m$은 각각 김 조교가 여행을 고려하고 있는 도시들의 개수와, 도시 간에 존재하는 도로의 수이다.</p>

<p>이어지는 $m$개의 줄에는 각각 도로의 정보를 제공하는 세 개의 정수 $a$, $b$, $c$가 포함되어 있다. 이것은 $a$번 도시에서 $b$번 도시로 갈 때는 $c$의 시간이 걸린다는 의미이다. ($1 ≤ a, b ≤ n$, $1 ≤ c ≤ 1\,000$)</p>

<p>도시의 번호는 $1$번부터 $n$번까지 연속하여 붙어 있으며, $1$번 도시는 시작도시이다. 두 도로의 시작점과 도착점이 모두 같은 경우는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>$n$개의 줄을 출력한다. $i$번째 줄에 $1$번 도시에서 $i$번 도시로 가는 $k$번째 최단경로의 소요시간을 출력한다.</p>

<p>경로의 소요시간은 경로 위에 있는 도로들을 따라 이동하는데 필요한 시간들의 합이다. $i$번 도시에서 $i$번 도시로 가는 최단경로는 $0$이지만, 일반적인 $k$번째 최단경로는 $0$이 아닐 수 있음에 유의한다. 또, $k$번째 최단경로가 존재하지 않으면 $-1$을 출력한다. 최단경로에 같은 정점이 여러 번 포함되어도 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><img alt="" src="/JudgeOnline/upload/201006/Screen shot 2010-06-11 at 8_51_11 PM.png" style="height:212px; width:303px"></p>

				</div>
				</div>','5 10 2
1 2 2
1 3 7
1 4 5
1 5 6
2 4 2
2 3 4
3 4 6
3 5 8
5 2 4
5 4 1
','-1
10
7
5
14
','SHORTEST_PATH'),
                                                                                                                (11246,'BAEKJOON','https://www.acmicpc.net/problem/1857',1857,'발레리노','2초','128 MB',20,'<p>김주성은 사실 뛰어난 발레 실력을 숨기고 있다. 그는 매일 밤 열심히 발레 연습을 한다.</p>

<p>그는 항상 연습하는 곳의 바닥을 m행 n열의 정사각형 칸들로 나누어 놓고 춤을 춘다. 그가 춤을 추는 방식은 이 직사각형 격자판 위를 점프하여 돌아다니는 것인데, 현재 위치하고 있는 칸에서 점프할 수 있는 위치는 체스판 위의 나이트 (knight)가 이동할 수 있는 곳과 같다. (나이트의 이동 규칙을 모르는 경우 검색해 볼 것. ㅜ.ㅜ) 김주성은 특정한 위치에서 춤을 시작하여, 특정한 위치에서 춤을 마치고 싶다.</p>

<p>밤중에 쿵쿵거리면 실례이므로, 바닥에 방석을 깔아 놓고 춤을 추려고 한다. 방석은 격자칸 한 칸에 꼭 맞는 크기이고, 몇 개의 칸에는 방석이 이미 놓여 있다. 특히, 김 조교가 현재 서 있는 위치와, 최종적으로 도달하려고 하는 위치에는 이미 방석이 놓여 있다.</p>

<p>여러분이 할 일은 최소한의 방석을 더 놓아서 김주성의 춤이 가능하도록 만들고, 그렇게 할 수 있는 방법이 모두 몇 가지인지 계산하는 것이다. 다만, 돌멩이가 놓여 있는 칸도 있는데, 그 부분에는 방석을 놓지 않는다. 부상의 위험이 있기 때문이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 m과 n이 주어진다. (1 ≤ m, n ≤ 30)</p>

<p>이어지는 m개의 줄에는 각 행의 정보를 제공하는 n개의 숫자가 주어진다. 0은 맨땅, 1은 방석이 깔린 곳 중 김주성이 춤을 시작하거나 마치지 않는 위치, 2는 돌멩이가 있는 위치, 3은 김주성이 춤을 시작하는 위치 (방석이 깔려 있음), 4는 김주성이 춤을 마치는 위치 (방석이 깔려 있음)이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 필요한 최소의 방석 수를 출력한다. 만약 아무리 방석을 많이 놓아도 김주성의 춤이 불가능할 경우엔, -1을 출력한다. 둘째 줄엔 방석을 놓는 방법의 수를 출력한다. (이 수는 64-bit signed integer 범위 내에 있음을 보장한다.) 만약 첫 줄에 -1을 출력한 경우에는, 둘째 줄은 출력하지 않는다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<pre>4 5
1 0 0 0 0
3 0 0 0 0
0 0 2 0 0
0 0 0 4 0</pre>

<p>입출력 예시의 세 가지 경우는 다음과 같다. X표 친 곳에 방석을 놓으면 된다.</p>

<pre>1 0 0 0 0     1 0 X 0 0     1 0 X 0 0
3 0 X 0 0     3 0 0 0 0     3 0 0 0 X
0 0 2 0 0     0 X 2 0 0     0 0 2 0 0
0 X 0 4 0     0 0 0 4 0     0 0 0 4 0</pre>

				</div>
				</div>','4 5
1 0 0 0 0
3 0 0 0 0
0 0 2 0 0
0 0 0 4 0','2
3','SHORTEST_PATH'),
                                                                                                                (11247,'BAEKJOON','https://www.acmicpc.net/problem/1865',1865,'웜홀','2초','128 MB',13,'<p>때는 2020년, 백준이는 월드나라의 한 국민이다. 월드나라에는 N개의 지점이 있고 N개의 지점 사이에는 M개의 도로와 W개의 웜홀이 있다. (단 도로는 방향이 없으며 웜홀은 방향이 있다.) 웜홀은 시작 위치에서 도착 위치로 가는 하나의 경로인데, 특이하게도 도착을 하게 되면 시작을 하였을 때보다 시간이 뒤로 가게 된다. 웜홀 내에서는 시계가 거꾸로 간다고 생각하여도 좋다.</p>

<p>시간 여행을 매우 좋아하는 백준이는 한 가지 궁금증에 빠졌다.&nbsp;한&nbsp;지점에서 출발을 하여서 시간여행을 하기 시작하여 다시 출발을 하였던 위치로 돌아왔을 때, 출발을 하였을 때보다 시간이 되돌아가 있는 경우가 있는지 없는지 궁금해졌다. 여러분은 백준이를 도와 이런 일이 가능한지 불가능한지 구하는 프로그램을 작성하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 테스트케이스의 개수 TC(1 ≤ TC ≤ 5)가 주어진다. 그리고 두 번째 줄부터 TC개의 테스트케이스가 차례로 주어지는데 각 테스트케이스의 첫 번째 줄에는 지점의 수 N(1 ≤ N ≤ 500), 도로의 개수 M(1 ≤ M ≤ 2500), 웜홀의 개수 W(1 ≤ W ≤ 200)이 주어진다. 그리고 두 번째 줄부터 M+1번째 줄에 도로의 정보가 주어지는데 각 도로의 정보는 S, E, T 세 정수로 주어진다. S와 E는 연결된 지점의 번호, T는 이 도로를 통해 이동하는데 걸리는 시간을 의미한다. 그리고 M+2번째 줄부터 M+W+1번째 줄까지 웜홀의 정보가 S, E, T 세 정수로 주어지는데 S는 시작 지점, E는 도착 지점, T는 줄어드는 시간을 의미한다. T는 10,000보다 작거나 같은 자연수 또는 0이다.</p>

<p>두 지점을 연결하는 도로가 한 개보다 많을 수도 있다. 지점의 번호는 1부터 N까지 자연수로 중복 없이 매겨져 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>TC개의 줄에 걸쳐서 만약에 시간이 줄어들면서 출발 위치로 돌아오는 것이 가능하면 YES, 불가능하면 NO를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
3 3 1
1 2 2
1 3 4
2 3 1
3 1 3
3 2 1
1 2 3
2 3 4
3 1 8
','NO
YES
','SHORTEST_PATH'),
                                                                                                                (11248,'BAEKJOON','https://www.acmicpc.net/problem/1884',1884,'고속도로','2초','128 MB',15,'<p>봄캠프 기간 동안 고속도로의 통행료가 급격하게 올라, 참가자들이 자칫 집으로 돌아가지 못할 수도 있는 위기에 봉착했다! 통행료가 인하되기 전까지는 여기 속초에서 원쌤과 함께 계속 프로그래밍 공부를 해야 할 수도 있는 상황인 것이다! 이 모든 것은 귀가시에 사용할 교통비를, 고속도로 통행료가 오르기 전에 계산해서 들고 왔기 때문이다.</p>

<p>다급해진 여러분은 정해진 예산을 가지고 집으로 돌아갈 수 있을지 알아보고, 갈 수 있다면 그에 필요한 최단 이동거리를 계산하려고 한다. 이를 해결하기 위한 프로그램을 작성하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 여러분이 준비해 둔 교통비 K가 주어진다. (0≤K≤10,000) 둘째 줄과 셋째 줄에는 각각 도시의 숫자 N과 도로의 숫자 R이 주어진다. (2≤N≤100, 1≤R≤10,000) 이후 R개의 줄에 각 도로의 정보가 주어지는데, 각 줄은 네 개의 숫자 s, d, l, t로 이루어져 있다. s는 도로의 출발 도시 번호이고, d는 도로의 도착 도시 번호이다. l은 도로의 길이이고, t는 도로의 통행료이다. (1≤s≤N, 1≤d≤N, 1≤l≤100, 0≤t≤100)</p>

<p>도시의 번호는 1번부터 N번까지 빠짐없이 붙어 있다. 이곳 속초는 1번 도시이고, 여러분의 집은 N번 도시에 있다. 각 도로는 일방통행로이다. 서로 다른 두 도로가 서로 같은 시작 도시와 서로 같은 도착 도시를 가질 수 있음에 유의하라.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 정해진 예산 내에서 이용할 수 있는 경로 중 제일 짧은 것의 길이를 출력한다. 만약 가능한 경로가 없을 때에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
6
7
1 2 2 3
2 4 3 3
3 4 2 4
1 3 4 1
4 6 2 1
3 5 2 0
5 4 3 2
','11
','SHORTEST_PATH'),
                                                                                                                (11251,'BAEKJOON','https://www.acmicpc.net/problem/1916',1916,'최소비용 구하기','0.5초','128 MB',11,'<p>N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 M개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. A번째 도시에서 B번째 도시까지 가는데 드는 최소비용을 출력하여라. 도시의 번호는 1부터 N까지이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N(1 ≤ N ≤ 1,000)이 주어지고 둘째 줄에는 버스의 개수 M(1 ≤ M ≤ 100,000)이 주어진다. 그리고 셋째 줄부터 M+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.</p>

<p>그리고 M+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다. 출발점에서 도착점을 갈 수 있는 경우만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
','4
','SHORTEST_PATH'),
                                                                                                                (11259,'BAEKJOON','https://www.acmicpc.net/problem/1956',1956,'운동','2초','192 MB',12,'<p>V개의 마을와 E개의 도로로 구성되어 있는 도시가 있다. 도로는 마을과 마을 사이에 놓여 있으며, 일방 통행 도로이다. 마을에는 편의상 1번부터 V번까지 번호가 매겨져 있다고 하자.</p>

<p>당신은 도로를 따라 운동을 하기 위한 경로를 찾으려고 한다. 운동을 한 후에는 다시 시작점으로 돌아오는 것이 좋기 때문에, 우리는 사이클을 찾기를 원한다. 단, 당신은 운동을 매우 귀찮아하므로, 사이클을 이루는 도로의 길이의 합이 최소가 되도록 찾으려고 한다.</p>

<p>도로의 정보가 주어졌을 때, 도로의 길이의 합이 가장 작은 사이클을 찾는 프로그램을 작성하시오. 두 마을을 왕복하는 경우도 사이클에 포함됨에 주의한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 V와 E가 빈칸을 사이에 두고 주어진다. (2 ≤ V ≤ 400, 0 ≤ E ≤ V(V-1)) 다음 E개의 줄에는 각각 세 개의 정수 a, b, c가 주어진다. a번 마을에서 b번 마을로 가는 거리가 c인 도로가 있다는 의미이다. (a → b임에 주의) 거리는 10,000 이하의 자연수이다. (a, b) 쌍이 같은 도로가 여러 번 주어지지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 최소 사이클의 도로 길이의 합을 출력한다. 운동 경로를 찾는 것이 불가능한 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 4
1 2 1
3 2 1
1 3 5
2 3 2
','3
','SHORTEST_PATH'),
                                                                                                                (11270,'BAEKJOON','https://www.acmicpc.net/problem/2081',2081,'저울추','2초','128 MB',20,'<p>질량을 모르는 N개의 저울추가 있고, 각각 1부터 N까지 순서대로 번호가 매겨져 있다. 질량을 모르는 저울추는 쓸모가 없으므로, 모든 저울추의 질량을 알아내려고 한다.</p>

<p>정확한 질량을 알아내는 것은 불가능하지만, 저울추의 크기를 가늠하여 대략적인 비교를 해 볼 수 있다. 1번 추가 2번 추보다 크기가 꽤 크다면, 1번 추의 질량은 2번 추의 질량보다 클 것이라고 비교를 할 수 있다. 만약 1번 추가 2번 추보다 크기가 상당히 크다면, 1번 추의 질량은 2번 추의 질량에 5를 더한 것보다도 클 것이라고 비교를 할 수도 있다. 이처럼 추의 질량 비교는 다음의 두 형태로 정리할 수 있다. a와 b는 1 이상 N 이하의 서로 다른 자연수이며, x는 임의의 정수이다. 물론 x는 음수일 수도 있다.</p>

<ul>
	<li>(a번 추의 질량) ≤ (b번 추의 질량) + x</li>
	<li>(a번 추의 질량) ≥ (b번 추의 질량) + x</li>
</ul>

<p>이러한 정보가 M개 주어졌을 때, 모든 저울추의 질량을 알아내는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 질량을 모르는 저울추의 개수 N과 질량을 비교한 정보의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ M ≤ 10,000) 이어서 M개의 줄에 정보가 a, 0 또는 1, b, x의 순서로 각각 빈칸을 사이에 두고 주어진다. a와 b는 추의 번호로 1 이상 N 이하의 서로 다른 자연수이며, x는 절댓값이 10,000을 넘지 않는 정수이다. 0은 ≤를, 1은 ≥를 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>N개의 줄에 걸쳐 조건을 만족시키는 추의 질량을 출력한다. i번째 줄에 i번 추의 질량을 출력하도록 하며, 질량은 1,000,000 이하의 자연수여야 한다. 추의 질량을 정할 수 없는 경우에는 첫째 줄에 -1만을 출력하며, 조건을 만족시키는 해가 여러 개일 때는 그 중에 하나만 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
2 0 1 0
2 1 3 0
3 1 1 -5
','7
3
3
','SHORTEST_PATH'),
                                                                                                                (11274,'BAEKJOON','https://www.acmicpc.net/problem/2125',2125,'좀','2초','128 MB',23,'<p>좀은 옷(천으로 된)을 좀먹고 사는 벌레이다. 한 마리의 좀이 천으로 된 옷감 위에 놓여있다. 좀은 매우 작기 때문에, 천의 크기는 무한한 것으로 가정한다. 또, 천의 곳곳에는 다른 재질의 옷감으로 기워져 있는 부분이 N군데 있다. 기워져 있는 부분은 항상 볼록다각형 모양을 이루고 있는데, 이러한 볼록다각형들이 서로 닿아 있거나 겹쳐져 있을 수도 있다.</p>

<p>이 좀은 어떤 특정한 위치(옷감 위의)로 이동하려 하는데, 옷감을 좀먹으며 이동해야 하기 때문에 천으로 된 부분만을 지나며 이동해야 한다. 다른 재질의 옷감으로 기울 때에는 천으로 된 실을 사용했기 때문에, 기워져 있는 부분의 테두리(볼록다각형의 각 변들)는 지날 수 있다고 가정하자. 만약 두 볼록다각형의 변이 맞닿아 있는 부분이 있다면, 이러한 부분 역시 지날 수 있다고 하자. 하지만 실제로 기워진 부분 위(볼록다각형의 내부)는 절대로 지날 수 없다.</p>

<p>좀이 목적지까지 이동할 때의 최소 거리를 구해내는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 다섯 정수 N, X, Y, U, V가 주어진다. 이는 좀의 현재 위치가 (X, Y)이고, 이동하려는 곳이 (U, V)라는 의미이다. 다음 N개의 줄에는 기워진 부분들을 의미하는 볼록다각형이 주어진다. 각 줄에 처음에는 볼록다각형의 꼭짓점의 개수 M이 주어지고, 그 다음 M개의 점들의 x, y좌표가 차례로 주어진다. 모든 볼록다각형의 꼭짓점의 합은 300을 넘지 않으며, 모든 좌표는 -10,000이상 10,000이하의 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 답을 출력한다. 절대/상대 오차는 10<sup>-3</sup>까지 허용한다. 만약 이동할 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2 0 0 5 5
4 1 0 4 0 4 1 1 2
3 3 3 4 4 5 2
','7.236
','SHORTEST_PATH'),
                                                                                                                (11275,'BAEKJOON','https://www.acmicpc.net/problem/2129',2129,'드라이브 파이널','2초','128 MB',15,'<p>N(1≤N≤100)개의 도시들로 이루어진 나라가 있다. 이들 중 몇 개의 도시들은 서로 도로로 연결되어 있다. 당신은 당신의 취미 생활인 자동차 드라이브를 즐기려고 한다. 각각의 도시는 0, 1, 2, …, N-1의 번호가 붙어 있고, 현재 당신은 S번 도시에 위치하고 있으며, 당신은 T번 도시로 이동하려 한다.</p>
<p>각각의 도로는 그 도로의 길이와, 그 도로를 이용할 때 생기는 피로도가 있다. 피로도 값은 때로는 음수일 수도 있는데, 이는 그 도로를 드라이브 할 때 만족감을 얻는 경우이다. 또한 같은 도시들을 연결하는 도로라 하더라도, 어느 방향으로 운전하느냐에 따라 마주치는 경치가 다르기 때문에 피로도 역시 달라질 수 있다.</p>
<p>당신은 가능하면 피로도 값의 총 합을 최소로 하는 경로로 이동하려 한다. 그런 경우가 여러 가지 있다면 길이의 총 합이 최소인 경로를 찾으려고 한다. 단, 당신은 이동을 할 때, 각각의 도시에 연결된 도로들 중 피로도가 최소인 도로만을 이용할 수 있다.</p>
<p><img width="491" height="180" alt="" src="/JudgeOnline/upload/201008/drive.PNG" style="width: 340.833px; height: 125px;"></p>
<p>예를 들어 위와 같은 경우를 보자. 각 도로 위에 []로 둘러싸인 값이 그 도로의 길이이고, 좌우의 값은 각 방향으로 그 도로를 이용할 때의 피로도이다. 위의 예에서의&nbsp; 최적해는 0-2-4-3-5가 된다. 이때의 피로도 합은 2(=-1+3+0+0)이고, 길이는 50(5+10+5+30)이다. 0-1-4-3-5 역시 피로도 합이 2이지만, 이는 길이가 51이기 때문에 최적해는 아니다. 0-3-5와 같은 경로는 피로도 합이 0이지만, 각 도시에 연결된 도로들 중 피로도가 최소인 도로만 이용한다는 조건에 어긋나므로 답이 될 수 없다.</p>
<p>각 도로들에 대한 정보를 입력받아 최적해를 구하는 프로그램을 작성하시오.</p>

					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 네 정수 N, M(0≤M≤5,000), S, T가 주어진다. 다음 M개의 줄에는 각 도로에 대한 정보를 나타내는 다섯 정수 u, v, a, c, b 가 주어진다. 이는 u번 도시와 v번 도시를 연결하는 길이 c의 도로가 있고, u->v 방향으로는 피로도가 a, v->u 방향으로는 피로도가 b라는 의미이다. 길이는 1이상 100이하의 정수이고, 피로도는 -100이상 100이하의 정수이다. 두 도시 사이에 여러 개의 도로가 있을 수도 있다.</p>
					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 피로도 총 합과 길이 총 합을 출력한다. 만약 최적해가 없다면 VOID를 출력한다. 만약 답이 무한히 작아질 수 있다면 UNBOUND를 출력한다.</p>
					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','7 11 0 5
0 1 -1 6 4
0 2 -1 5 4
0 3 0 1 0
1 4 3 10 1
2 4 3 10 1
3 4 0 5 0
3 5 0 30 0
3 5 1 20 0
4 6 0 3 1
6 5 1 8 0
6 6 0 2 -1
','2 50
','SHORTEST_PATH'),
                                                                                                                (290,'BAEKJOON','https://www.acmicpc.net/problem/2144',2144,'울타리 넘기','2초','128 MB',15,'<p>평면상에 N(1≤N≤100)개의 점들이 있다. 당신은 이 점들 중 K(1≤K≤500)개의 점들을 방문하려고 한다. 같은 점을 여러 번 반복할 수 있지만, 한 점을 연속으로 두 번 방문할 수는 없다. 즉, 어느 한 점으로 이동했으면 그 점에서 다른 점으로 이동해야 한다는 것이다. 각각의 점들은 x, y좌표를 가지며, 0≤x, y≤1,000,000을 만족한다.</p>
<p>또한 이 평면에는 F개의 울타리도 있다. 각각의 울타리는 두 점을 잇는 선분으로 표현된다. 이 울타리들끼리는 서로 교차하지 않으며, 각 울타리에는 높이 h(1≤h≤1,000)가 있다. 높이가 h인 울타리를 넘을 때 성공할 확률은 1/h이다.</p>
<p>한 점에서 한 점으로 이동할 때에는 직선으로만 이동한다. 직선으로 이동하는 도중에 울타리를 만나게 된다면 그 울타리를 넘어야 한다. 만약 여러 울타리를 넘게 된다면 이 울타리들을 모두 성공적으로 넘을 확률은, 각각을 성공적으로 넘을 확률들의 곱이 된다. 만약 울타리가 직선 이동 경로 위에 평행하게 존재한다면, 이를 성공적으로 넘을 확률은 1이다. 또, 울타리의 끝 점만을 살짝 스쳐 지나갈 경우는 울타리를 넘을 필요가 없다.</p>
<p>N개의 점들 외에는 별도로 시작점이 하나 있다. 이동할 때에는 이 시작점에서 시작하여 이 시작점에서 끝나야 한다. K개의 점들을 계산할 때에는 이 시작점과 끝점을 제외하고 생각한다. 이 점에서 이동을 시작하여 K개의 점들을 지나고 이 점에서 이동을 끝낼 때, 울타리들을 성공적으로 넘을 확률을 최대로 하여라.</p>

					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 다섯 정수 N, K, F, x, y가 주어진다. x, y는 시작점의 좌표이다. 다음 N개의 줄에는 각 점의 좌표가 주어진다. 다음 F개의 줄에는 다섯 개의 정수로 울타리에 대한 정보가 주어진다. 앞의 두 정수는 울타리의 한 끝점이고, 그 다음 두 정수는 다른 한 끝점이고, 마지막 정수는 높이 h이다.</p>
					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 최대인 확률을 출력한다. 출력은 %.4e로 하면 된다.</p>
					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 6 4 1 3
8 2
15 2
8 7
4 1 4 8 4
7 4 9 4 3
10 1 10 3 2
11 4 16 4 6
','1.3021e-03
','SHORTEST_PATH'),
                                                                                                                (11277,'BAEKJOON','https://www.acmicpc.net/problem/2151',2151,'거울 설치','2초','128 MB',13,'<p>채영이는 거울을 들여다보는 것을 참 좋아한다. 그래서 집 곳곳에 거울을 설치해두고 집 안을 돌아다닐 때마다 거울을 보곤 한다.</p>

<p>채영이는 새 해를 맞이하여 이사를 하게 되었는데, 거울을 좋아하는 그녀의 성격 때문에 새 집에도 거울을 매달만한 위치가 여러 곳 있다. 또한 채영이네 새 집에는 문이 두 개 있는데, 채영이는 거울을 잘 설치하여 장난을 치고 싶어졌다. 즉, 한 쪽 문에서 다른 쪽 문을 볼 수 있도록 거울을 설치하고 싶어졌다.</p>

<p>채영이네 집에 대한 정보가 주어졌을 때, 한 쪽 문에서 다른 쪽 문을 볼 수 있도록 하기 위해 설치해야 하는 거울의 최소 개수를 구하는 프로그램을 작성하시오.</p>

<p>거울을 설치할 때에는 45도 기울어진 대각선 방향으로 설치해야 한다. 또한 모든 거울은 양면 거울이기 때문에 양 쪽 모두에서 반사가 일어날 수 있다. 채영이는 거울을 매우 많이 가지고 있어서 거울이 부족한 경우는 없다고 하자.</p>

<p>거울을 어떻게 설치해도 한 쪽 문에서 다른 쪽 문을 볼 수 없는 경우는 주어지지 않는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 집의 크기 N (2 ≤ N ≤ 50)이 주어진다. 다음 N개의 줄에는 N개의 문자로 집에 대한 정보가 주어진다. ‘#’는 문이 설치된 곳으로 항상 두 곳이며, ‘.’은 아무 것도 없는 것으로 빛은 이 곳을 통과한다. ‘!’은 거울을 설치할 수 있는 위치를 나타내고, ‘*’은 빛이 통과할 수 없는 벽을 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 설치해야 할 거울의 최소 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
***#*
*.!.*
*!.!*
*.!.*
*#***
','2','SHORTEST_PATH'),
                                                                                                                (11281,'BAEKJOON','https://www.acmicpc.net/problem/2158',2158,'산악자전거','2초','128 MB',13,'<p>다해는 평소 산악자전거 타기를 즐긴다. 다해는 오랜 시간동안 운동을 하는 것도 좋아하지만, 때로는 되도록 짧은 시간동안 산악자전거 타기를 마치기를 원하기도 한다.</p>

<p>산의 모습은 R(1 ≤ R ≤ 100)행 C(1 ≤ C ≤ 100)열의 행렬로 표현된다. 행렬의 각 수는 그 위치의 높이(고도)를 나타낸다. 다해는 현재 행렬의 (1, 1) 위치에 있고, (R, C) 위치로 이동하려 한다. 다해의 (1, 1)위치에서의 초기 속도는 V(1 ≤ V ≤ 1,000,000)이다. 행렬에서의 움직임은 위, 아래, 왼쪽, 오른쪽의 네 방향으로만 가능하다고 하자. 속도가 V라는 의미는 단위시간동안 V칸을 움직일 수 있다는 의미이다.</p>

<p>자전거를 타고 이동하다보면 높이 차이에 의해 속도가 가속되기도 하고 감속되기도 한다. 현재 위치의 높이가 A이고, 이동하려는 위치의 높이가 B일 때, 속도는 배가 된다(2<sup>A-B</sup>&nbsp;배). 실제로는 이동하는 도중에 속도가 변하게 되지만, 문제의 편의를 위해서 이동을 완전히 마친 후에 속도가 변하는 것으로 생각하자. 즉, 이동을 할 때에는 처음의 속도를 가지고 이동하는 것으로 한다.</p>

<p>산의 높이에 대한 정보와 초기 속도가 주어졌을 때, (1, 1)의 위치에서 (R, C)의 위치로 이동할 때 필요한 최소 시간을 구해내는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 세 정수 V, R, C가 주어진다. 다음 R개의 줄에는 C개의 정수로 행렬이 주어진다. 행렬의 각 수는 -25 이상 25 이하의 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 이동에 필요한 최소 시간을 출력한다. 절대/상대 오차는 10<sup>-2</sup>까지 허용한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1 2 3
2 1 2
9 9 1
','2.50
','SHORTEST_PATH'),
                                                                                                                (10532,'BAEKJOON','https://www.acmicpc.net/problem/2176',2176,'합리적인 이동경로','2초','128 MB',14,'<p>그래프의 한 정점 S에서 다른 한 정점 T로 이동하려 한다. 이동할 때 T에 가까워지며 이동하는 경우, 이를 합리적인 이동경로라 한다. 물론 이러한 경로는 최단경로가 아닐 수도 있다.</p>

<p>그래프가 주어졌을 때 가능한 합리적인 이동경로의 개수를 구하는 프로그램을 작성하시오. S = 1, T = 2 인 경우로 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 N(1 < N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 100,000이 주어진다. 다음 M개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 이는 A번 정점과 B번 정점이 길이 C(0 < C ≤ 10,000)인 간선으로 연결되어 있다는 의미이다. 두 정점은 최대 한 개의 간선으로만 연결될 수 있다. 간선은 방향성이 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 답을 출력한다. 답은 2147483647을 넘지 않는다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 4
1 3 1
3 2 2
1 4 2
2 4 1
','2
','SHORTEST_PATH'),
                                                                                                                (11289,'BAEKJOON','https://www.acmicpc.net/problem/2211',2211,'네트워크 복구','2초','192 MB',14,'<p>N(1 ≤ N ≤ 1,000)개의 컴퓨터로 구성된 네트워크가 있다. 이들 중 몇 개의 컴퓨터들은 서로 네트워크 연결이 되어 있어 서로 다른 두 컴퓨터 간 통신이 가능하도록 되어 있다. 통신을 할 때에는 서로 직접 연결되어 있는 회선을 이용할 수도 있으며, 회선과 다른 컴퓨터를 거쳐서 통신을 할 수도 있다.</p>

<p>각 컴퓨터들과 회선은 그 성능이 차이가 날 수 있다. 따라서 각각의 직접 연결되어 있는 회선을 이용해서 통신을 하는데 걸리는 시간이 서로 다를 수 있다. 심지어는 직접 연결되어 있는 회선이 오히려 더 느려서, 다른 컴퓨터를 통해서 통신을 하는 것이 더 유리할 수도 있다. 직접 연결되어 있는 회선을 사용할 경우에는 그 회선을 이용해서 통신을 하는 데 드는 시간만큼이 들게 된다. 여러 개의 회선을 거치는 경우에는 각 회선을 이용해서 통신을 하는 데 드는 시간의 합만큼의 시간이 걸리게 된다.</p>

<p>어느 날, 해커가 네트워크에 침입하였다. 네트워크의 관리자는 우선 모든 회선과 컴퓨터를 차단한 후, 해커의 공격을 막을 수 있었다. 관리자는 컴퓨터에 보안 시스템을 설치하려 하였는데, 버전 문제로 보안 시스템을 한 대의 슈퍼컴퓨터에만 설치할 수 있었다. 한 컴퓨터가 공격을 받게 되면, 네트워크를 통해 슈퍼컴퓨터에 이 사실이 전달이 되고, 그러면 슈퍼컴퓨터에서는 네트워크를 이용해서 보안 패킷을 전송하는 방식을 사용하기로 하였다. 준비를 마친 뒤, 관리자는 다시 네트워크를 복구하기로 하였다. 이때, 다음의 조건들이 만족되어야 한다.</p>

<ol>
	<li>해커가 다시 공격을 할 우려가 있기 때문에, 최소 개수의 회선만을 복구해야 한다. 물론, 그렇다면 아무 회선도 복구하지 않으면 되겠지만, 이럴 경우 네트워크의 사용에 지장이 생기게 된다. 따라서 네트워크를 복구한 후에 서로 다른 두 컴퓨터 간에 통신이 가능하도록 복구해야 한다.</li>
	<li>네트워크를 복구해서 통신이 가능하도록 만드는 것도 중요하지만, 해커에게 공격을 받았을 때 보안 패킷을 전송하는 데 걸리는 시간도 중요한 문제가 된다. 따라서 슈퍼컴퓨터가 다른 컴퓨터들과 통신하는데 걸리는 최소 시간이, 원래의 네트워크에서 통신하는데 걸리는 최소 시간보다 커져서는 안 된다.</li>
</ol>

<p>원래의 네트워크에 대한 정보가 주어졌을 때, 위의 조건을 만족하면서 네트워크를 복구하는 방법을 알아내는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 정수 N, M이 주어진다. 다음 M개의 줄에는 회선의 정보를 나타내는 세 정수 A, B, C가 주어진다. 이는 A번 컴퓨터와 B번 컴퓨터가 통신 시간이 C (1 ≤ C ≤ 10)인 회선으로 연결되어 있다는 의미이다. 컴퓨터들의 번호는 1부터 N까지의 정수이며, 1번 컴퓨터는 보안 시스템을 설치할 슈퍼컴퓨터이다. 모든 통신은 완전쌍방향 방식으로 이루어지기 때문에, 한 회선으로 연결된 두 컴퓨터는 어느 방향으로도 통신할 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 복구할 회선의 개수 K를 출력한다. 다음 K개의 줄에는 복구한 회선을 나타내는 두 정수 A, B를 출력한다. 이는 A번 컴퓨터와 B번 컴퓨터를 연결하던 회선을 복구한다는 의미이다. 출력은 임의의 순서대로 하며, 답이 여러 개 존재하는 경우에는 아무 것이나 하나만 출력하면 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 5
1 2 1
1 4 4
1 3 2
4 2 2
4 3 3
','3
1 2
3 1
4 2
','SHORTEST_PATH'),
                                                                                                                (11290,'BAEKJOON','https://www.acmicpc.net/problem/2219',2219,'보안 시스템 설치','2초','128 MB',12,'<p>N개의 컴퓨터로 구성된 네트워크가 있다. 이들 중 몇 개의 컴퓨터들은 서로 네트워크 연결이 되어 있어 서로 다른 두 컴퓨터 간 통신이 가능하도록 되어 있다. 통신을 할 때에는 서로 직접 연결되어 있는 회선을 이용할 수도 있으며, 회선과 다른 컴퓨터를 거쳐서 통신을 할 수도 있다.</p>

<p>각 컴퓨터들과 회선은 그 성능이 차이가 날 수 있다. 따라서 각각의 직접 연결되어 있는 회선을 이용해서 통신을 하는데 걸리는 시간이 서로 다를 수 있다. 심지어는 직접 연결되어 있는 회선이 오히려 더 느려서, 다른 컴퓨터를 통해서 통신을 하는 것이 더 유리할 수도 있다. 직접 연결되어 있는 회선을 사용할 경우에는 그 회선을 이용해서 통신을 하는 데 드는 시간만큼이 들게 된다. 여러 개의 회선을 거치는 경우에는 각 회선을 이용해서 통신을 하는 데 드는 시간의 합만큼의 시간이 걸리게 된다.</p>

<p>어느 날, 해커가 네트워크에 침입하였다. 네트워크의 관리자는 우선 모든 회선과 컴퓨터를 차단한 후, 해커의 공격을 막을 수 있었다. 관리자는 컴퓨터에 보안 시스템을 설치하려 하였는데, 버전 문제로 보안 시스템을 한 대의 컴퓨터에만 설치할 수 있었다. 한 컴퓨터가 공격을 받게 되면, 네트워크를 통해 컴퓨터에 이 사실이 전달이 되고, 그러면 컴퓨터에서는 네트워크를 이용해서 보안 패킷을 전송하는 방식을 사용하기로 하였다. 준비를 마친 뒤, 관리자는 다시 네트워크를 복구하기로 하였다. 이때, 다음의 조건들이 만족되어야 한다.</p>

<ol>
	<li>해커가 다시 공격을 할 우려가 있기 때문에, 최소 개수의 회선만을 복구해야 한다. 물론, 그렇다면 아무 회선도 복구하지 않으면 되겠지만, 이럴 경우 네트워크의 사용에 지장이 생기게 된다. 따라서 네트워크를 복구한 후에 서로 다른 두 컴퓨터 간에 통신이 가능하도록 복구해야 한다.</li>
	<li>네트워크를 복구해서 통신이 가능하도록 만드는 것도 중요하지만, 해커에게 공격을 받았을 때 빠른 시간에 보안 패킷을 전송하는데 걸리는 시간도 중요한 문제가 된다. 따라서 보안 시스템을 설치할 컴퓨터를 잘 정하는 것이 중요해진다. 해커가 침입할 컴퓨터가 어느 컴퓨터일지 정확히 알 수 없기 때문에, 다른 컴퓨터들과의 통신에 필요한 평균 시간이 최소가 되도록 하는 컴퓨터에 보안 시스템을 설치하기로 하였다.</li>
</ol>

<p>원래의 네트워크에 대한 정보가 주어졌을 때, 위의 조건을 만족하며 보안 시스템을 설치하는 방법을&nbsp;알아내는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 정수 N(1 ≤ N ≤ 200), M(1 ≤ M ≤ 10,000)이 주어진다. 다음 M개의 줄에는 회선의 정보를 나타내는 세 정수 A, B, C가 주어진다. 이는 A번 컴퓨터와 B번 컴퓨터가 통신 시간이 C인 회선으로 연결되어 있다는 의미이다. 컴퓨터들의 번호는 1부터 N까지의 정수이며, 1번 컴퓨터는 보안 시스템을 설치할 컴퓨터이다. C값은 10,000 이하의&nbsp;양의 정수이다. 또한 모든 통신은 완전쌍방향 방식으로 이루어지기 때문에, 한 회선으로 연결된 두 컴퓨터는 어느 방향으로도 통신할 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 보안 시스템을 설치할 컴퓨터의 번호를 출력한다. 답이 여러 개인 경우에는 가장 번호가 작은 경우를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
1 2 1
1 3 3
2 3 2
','2
','SHORTEST_PATH'),
                                                                                                                (11287,'BAEKJOON','https://www.acmicpc.net/problem/2224',2224,'명제 증명','2초','128 MB',12,'<p>수학, 혹은 논리학에서 만약 무엇 이라면 뭣 일 것이다 하는 식의 명제가 널리 쓰인다. 예를 들어 "P이면 Q일 것이다." 라는 명제는 “P => Q” 라는 기호로 표현된다. 이때의 P를 전건, Q를 후건이라고 한다.</p>

<p>논리학에서 어떤 명제를 증명할 때 가장 널리 쓰이는 방법 중 한 가지가 바로 삼단 논법이다. 만약 두 명제 “P => Q", "Q => R" 가 모두 참이면, 명제 "P => R"이 역시 참이 된다. 이러한 방법을 사용했을 때 명제 ”P => R"이 증명되었다고 한다.</p>

<p>어떤 참인 명제가 주어졌을 때, 이 명제가 참이므로 이 명제 자체도 증명될 수 있다고 할 수 있다. 하지만 “P => P”와 같은 명제는 항상 참이 되는데, 이런 식으로 전건과 후건이 같은 경우는 출력하지 않기로 한다.</p>

<p>N개의 참인 명제들이 주어졌을 때, 증명될 수 있는 명제를 모두 구해내는 프로그램을 작성하시오. 명제를 증명하는 방법은 여러 가지가 있을 수 있지만, 위에서 언급한 방법만을 사용하기로 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정수 N(1 ≤ N ≤ 10,000)이 주어진다. 다음 N개의 줄에는 참인 명제들이 주어진다. 명제는 "P => Q"의 꼴로 주어지는데, “=>”는 앞뒤가 공백으로 구분되어 있다. P나 Q는 명제를 나타내는 문자인데, 알파벳 대소문자 한 글자를 사용한다. 같은 명제가 여러 번 주어질 수도 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 출력할 명제의 개수 X개를 출력한다. 다음 X개의 줄에 증명될 수 있는 명제를 한 줄에 하나씩 출력한다. 명제를 출력할 때에는 전건 순으로 정렬하고, 전건이 같은 경우에는 후건 순으로 정렬한다. 알파벳은 대문자가 소문자에 우선한다. 즉, 정렬했을 때 A, B, …, Z, a, b, …, z 순서로 나와야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
A => b
b => C
','3
A => C
A => b
b => C
','SHORTEST_PATH'),
                                                                                                                (11296,'BAEKJOON','https://www.acmicpc.net/problem/2260',2260,'핵폭탄','2초','128 MB',18,'<p>평화로운 어느 도시에 핵폭탄이 투하되어 도시 전체가 폐허가 되었다. 오랜 시간이 흘러 이 도시에 다시 사람들이 모이게 되었는데, 핵폭탄이 떨어진 위치에 아직 핵폐기물이 남아있었다. 평화로운 도시에 살던 사람들은 핵폐기물의 위험에 대해 잘 몰랐기 때문에, 단순히 이를 둘러싸는 벽을 만들기로 하였다.</p>

<p>핵폭탄의 주변에는 원래 N(3 ≤ N ≤ 100)개의 벽이 있었는데, 핵폭탄으로 인해 각 벽들이 무너지게 되었다. 도시에서는 이러한 벽들을 수리하기로 하였는데, 각 지역의 높이 차이와 파괴된 정도, 그리고 벽의 재질 등으로 각각의 벽들을 수리하는데 필요한 비용이 다를 수도 있다. 도시에서는 이러한 벽들 중 일부(혹은 전부)를 이용하여 최소의 비용으로 벽을 만들기로 하였다.</p>

<p>핵폐기물을 둘러싸는 벽을 만들 때에는, 그 벽들이 완전히 연결되는 볼록 다각형의 형태가 되어야 한다. 각각의 벽들을 하나의 선분이라고 생각했을 때, 그 선분 위에 핵폐기물이 위치하는 경우는 없다고 가정한다. 하지만 도시에서 이전에 있던 벽들에 대한 정보를 판단할 때 착오가 있을 수도 있기 때문에, 서로 다른 두 벽들이 이루는 선분이 서로 교차하는 경우는 있을 수도 있다.</p>

<p>핵폐기물의 위치와 벽들에 대한 정보가 주어졌을 때, 핵폐기물을 둘러싸는 볼록 다각형 형태의 벽을 만들이 위해 필요한 최소 비용을 계산하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 세 정수 N, X, Y가 주어진다. (X, Y)는 핵폐기물의 위치를 나타낸다. 다음 N개의 줄에는 각각의 벽에 대한 정보를 나타내는 다섯 정수 x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>, C(1 ≤ C ≤ 10,000)가 주어진다. 이는 두 점 (x<sub>1</sub>, y<sub>1</sub>), (x<sub>2</sub>, y<sub>2</sub>)를 연결하는 벽을 재건하기 위해 필요한 비용이 C임을 의미한다. 모든 좌표들은 절댓값이 10,000을 넘지 않는 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 답을 출력한다. 불가능한 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 0 0
1 1 2 2 10000
3 3 4 4 10000
5 5 6 6 10000
','-1
','SHORTEST_PATH'),
                                                                                                                (11299,'BAEKJOON','https://www.acmicpc.net/problem/2273',2273,'줄 서기','2초','128 MB',13,'<p>N명의 학생들이 키 순서대로 줄을 서려고 한다. 각 학생의 키를 직접 재서 정렬하면 간단하겠지만, 마땅한 방법이 없어서 두 학생의 키를 비교하는 방법을 사용하기로 하였다. 그나마도 모든 학생들을 다 비교해 본 것이 아니고, 일부 학생들의 키만을 비교해 보았다.</p>

<p>일부 학생들의 키를 비교한 결과가 주어졌을 때, 각 학생이 설 수 있는 위치의 범위를 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N(1 ≤ N ≤ 256), M(1 ≤ M ≤ 100,000)이 주어진다. M은 키를 비교한 회수이다. 다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다. 이는 학생 A가 학생 B의 앞에 서야 한다는 의미이다. 같은 학생들을 여러 번 비교했을 수도 있다. A와 B가 같은 경우는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>N개의 줄에 각 학생이 설 수 있는 위치의 범위를 출력한다. 불가능한 경우에는 첫째 줄에 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>1 2 3, 2 1 3의 방법이 가능하기 때문에 답이 위와 같이 된다.</p>

				</div>
				</div>','3 2
1 3
2 3
','1 2
1 2
3 3
','SHORTEST_PATH'),
                                                                                                                (11298,'BAEKJOON','https://www.acmicpc.net/problem/2278',2278,'그래프 복원','2초','128 MB',15,'<p>N(1 ≤ N ≤ 100)개의 정점과 M(1 ≤ M ≤ 1,000)개의 간선을 갖는 연결된 무향 그래프가 있다. 이 그래프의 간선에 대한 정보는 전혀 알 수 없지만, 이 그래프의 임의의 서로 다른 두 정점 사이의 최단거리가 모두 알려져 있다. 이를 토대로 원래의 그래프를 복원하라. 정점의 번호는 1부터 N까지 하나씩 매겨져 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 자연수 N, M이 주어진다. 다음 N-1개의 줄에&nbsp;두 정점 사이의 최단거리가 주어지며, 여기서 i번째 줄의 정보는 정점 i와&nbsp;다른 정점과의 최단 거리이고, 정점 i+1, i+2, ..., N 까지의 최단 거리가 공백을 사이에 두고 주어진다. 두 정점 사이의 최단 거리는 500보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 그래프를 복원할 수 있으면 1을, 없으면 0을 출력한다. 복원할 수 있을 때, 다음 m개의 줄에 각 간선을 a, b, c의 형태로 출력한다. 이는 정점 a, b를 연결하는 가중치 c인 간선이 있다는 의미이다. a와 b는 같지 않아야 하고, c는 500보다 작거나 같은 자연수가 되어야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
1 2
2
','1
1 2 1
1 3 2
2 3 2
','SHORTEST_PATH'),
                                                                                                                (11301,'BAEKJOON','https://www.acmicpc.net/problem/2307',2307,'도로검문','1초','128 MB',15,'<p>그림 1은 어떤 도시의 주요 지점과 그 지점들 간의 이동시간을 나타낸 그래프이다. 그래프의 노드는 주요 지점을 나타내고 두 지점을 연결한 도로(에지)에 표시된 수는 그 도로로 이동할 때 걸리는 분 단위의 시간을 나타낸다. 두 지점 a와 b를 연결하는 도로는 도로(a,b)로 표시한다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/9f97f43f-357d-4818-8f7e-47b6a34cc52b/-/preview/" style="width: 280px; height: 156px;"></p>

<p style="text-align: center;">그림 1</p>

<p>예를 들어 도로(1,2)와 도로(2,3)를 통하여 지점1에서 지점3으로 갈 때 걸리는 시간은 3분이다. 도로는 모두 양방향이라고 가정하므로 도로(a,b)와 도로(b,a)를 지날 때 걸리는 시간은 항상 같다고 한다.</p>

<p>어떤 범죄용의자가 입력 데이터에 표시된 도시로 진입하여 이 도시를 가장 빠른 시간 내에 빠져나가고자 한다. 그런데 이 사실을 알고 있는 경찰이 어떤 하나의 도로(에지)를 선택하여 이 도로에서 검문을 하려고 한다. 따라서 용의자는 이 도로를 피해서 가장 빠르게 도시를 탈출하고자 한다. 이 경우 경찰이 검문을 위하여 선택하는 도로에 따라서 용의자의 가장 빠른 탈출시간은 검문이 없을 때에 비하여 더 늘어날 수 있다.</p>

<p>문제는 도로검문을 통하여 얻을 수 있는 탈출의 최대 지연시간을 계산하는 것이다. 추가설명은 다음과 같다.</p>

<ol>
	<li>두 개의 지점을 직접 연결하는 도로가 있는 경우, 그 도로는 유일하다.</li>
	<li>도시의 지점(노드)은 1에서 N번까지 N개의 연속된 정수로 표시된다.</li>
	<li>용의자가 도시에 진입하는 지점은 항상 1번이고 도시를 빠져 나가기 위하여 최종적으로 도달해야하는 지점은 항상 N번 지점이다.</li>
	<li>용의자는 검문을 피해서 가장 빨리 도시를 빠져나가고자 하고, 경찰은 적절한 도로를 선택하여 이 용이자들의 탈출시간을 최대한 지연시키고자 한다.</li>
	<li>각 도시 지점 간을 이동하는 시간은 항상 양의 정수이다.</li>
</ol>

<p>입력 도시의 도로망에 따라서 경찰이 어떤 도로를 막으면 용의자는 도시를 탈출하지 못할 수도 있다. 이 경우 검문으로 인하여 지연시킬 수 있는 탈출시간은 무한대이다. 이 경우에는 -1을 출력해야 한다.</p>

<p>그림 1에서 볼 때 검문이 없을 경우 용의자가 도시를 탈출하는데 걸리는 시간은 4분이다. 만일 경찰이 도로(4,3)을 막으면 그 탈출시간을 지연시킬 수 없으므로 지연시간은 0이다. 만일 도로(2,3)을 막으면, 용의자들이 가장 빠르게 탈출할 수 있는 시간은 5분이므로 탈출지연시간은 1분이고, 도로(3,6)을 막으면 탈출지연시간은 2분이다.</p>

<p>여러분은 입력 데이터에 표시된 도로망을 읽고, 경찰이 한 도로를 막고 검문함으로써 지연시킬 수 있는 최대시간을 정수로 출력하여야한다. 만일 지연효과가 없으면 0을 출력해야하고, 도시를 빠져나가지 못하게 만들 수 있으면(지연시간이 무한대) -1을 출력해야 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 지점의 수를 나타내는 정수 N(6 ≤ N ≤ 1000)과 도로의 수 M(6 ≤ M ≤ 5000)이 주어진다. 그 다음 이어 나오는 M개의 각 줄에는 도로(a, b)와 그 통과시간 t가 a b t 로 표시된다. 단 이 경우 a < b 이고 1 ≤ t ≤ 10000이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>경찰이 하나의 도로를 막음으로써 지연시킬 수 있는 최대 시간을 정수로 출력한다. (단, 그 지연시간이 무한대이면 -1을 출력해야 한다.)</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 7
1 2 1
1 4 3
3 6 1
4 5 1
2 3 2
3 4 1
5 6 2
','2
','SHORTEST_PATH'),
                                                                                                                (11305,'BAEKJOON','https://www.acmicpc.net/problem/2325',2325,'개코전쟁','2초','256 MB',16,'<p>“앙두레 강”이 개미와 코끼리 결혼식에서 기차를 아름답게 만드는 것을 실패했기 때문에 식장이 아수라장이 되고 결혼이 물거품이 되어버렸다. 급기야는 왕국 간에 분쟁으로 이어져 개미왕국은 코끼리왕국을 공격하기로 결정하였다. 동물나라 지도에서 개미왕국은 1번 정점에 위치해 있고 코끼리왕국은 N번 정점에 위치해 있다. 따라서 개미왕국이 1번 정점에서 N번 정점으로 공격을 하러 가는 상황이다. (개미왕국은 최단거리로 이동을 하게 되고, 코끼리왕국은 움직이지 않는다)</p>

<p>“개미”와 “코끼리”의 앞 글자를 따서 이 전쟁은 “개코전쟁”으로 역사에 기억된다.</p>

<p>“앙두레 강”은 자신 때문에 발생한 이 전쟁을 어떻게든 막으려고 한다. 협상을 할 시간을 벌기 위해 개미왕국이 코끼리왕국에 도착하는 시간을 최대한 늦추려고 한다. 그래서 “앙두레 강”은 사자왕국의 도움을 빌어 도로 중 딱 하나를 파괴하려고 하는데 어느 도로를 파괴해야 개미왕국이 최단거리로 가더라도 그 거리를 최대로 할 수 있을까?</p>

<p>“앙두레 강”를 도와 1번 정점에서 N번 정점으로의 최단거리가 최대가 되도록 도로 하나를 파괴하도록 하자. (어떤 하나의 도로를 파괴하더라도 1번 정점에서 N번 정점으로 도달 가능하다)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 N과 M이 입력된다. N은 정점의 개수이고 M은 도로의 수이다. (1 ≤ N ≤ 1000, 1 ≤ M ≤ N×(N-1)/2)</p>

<p>다음 줄부터 M개의 줄에 도로의 정보가 입력된다.</p>

<p>i+1번째 줄에는 i번째 도로의 정보 x<sub>i</sub> y<sub>i</sub> z<sub>i</sub>가 입력되고 이 도로는 정점 x<sub>i</sub>와 정점 y<sub>i</sub>를 잇는 도로이며 지나는데 z<sub>i</sub>만큼의 시간이 걸린다는 것을 의미한다. 두 정점사이에는 두 개 이상의 길이 존재하지 않고 모든 도로는 양방향이며 한 도로를 파괴하는 것은 양방향의 길 모두를 파괴하는 것이다. (1 ≤ x<sub>i</sub>, y<sub>i</sub> ≤ N, 1 ≤ z<sub>i</sub> ≤ 1000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>적당한 도로하나를 파괴했을 때 1번 정점에서 N번 정점으로의 최단거리의 최댓값을&nbsp;출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 6
1 2 4
1 3 3
2 3 1
2 4 4
2 5 7
4 5 1
','11
','SHORTEST_PATH'),
                                                                                                                (11310,'BAEKJOON','https://www.acmicpc.net/problem/2398',2398,'3인통화','2초','128 MB',15,'<p>코리아 통신회사에서는 3인통화 서비스를 제공한다. 이 서비스에서는 두 사람이 아니라 세 사람이 통화할 수 있도록 해준다. 전화망은 스위치들을 연결하여 구성되어 있으며, 각 통화자들은 스위치에 연결하여 전화망에 접속한다. 두 스위치들은 양방향으로 신호를 보낼 수 있는 링크에 의하여 연결되어 있다. 모든 스위치들은 전화망에 의하여 연결되어 있어서 스위치에 접속한 사람들은 다른 스위치에 연결한 사람과 항상 통화할 수 있다. 전화망에서 두 개의 스위치를 연결하는 링크를 사용하는 비용은 주어져 있다.</p>

<p>통신회사에서는 이들 세 사람을 전화망을 통하여 연결해주는데, 가장 비용이 적게 되도록 연결하고자한다. 세 사람이 연결한 스위치가 주어졌을 때, 이 스위치들을 비용이 가장 적게 되도록 연결하는 프로그램을 작성하시오.</p>

<p><img alt="" src="/JudgeOnline/upload/201103/BIN0001.gif" style="height:272px; width:385px"></p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 두 개의 정수가 있다. 첫 번째 정수 n(1 ≤ n ≤ 1000) 는 전화망에 있는 스위치의 개수를 나타내며, 두 번째 정수 m은 스위치와 스위치를 연결하는 링크의 개수를 나타낸다. 단, 같은 스위치들을 연결하는 링크는 1 개 이상 존재하지 않는다. 각 스위치들은 1번부터 차례로 n 번 까지 번호가 부여된다. 다음 m개의 줄에는, 각 줄에 세 개의 정수가 주어진다. 처음의 두 개의 정수는 하나의 링크에 의하여 연결되는 두 스위치의 번호를 나타내며, 세 번째 정수는 그 링크를 사용하는 비용을 나타내는 양의 정수이다. 이 정수는 100 보다 작다. 입력의 마지막 줄에는 세 개의 정수가 주어 진다. 이 정수는 세 명의 통화자가 연결되어 있는 스위치 번호이며, 세 정수는 모두 다르다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에는 3자 통화를 하는데 있어서 가장 적은 비용으로 통화할 때 드는 비용을 나타내는 정수와 세명의 통화자를 연결하는 네트워크 상에서의 링크의 수를 출력한다. 그 다음 줄부터 각 줄에는 하나의 링크에 연결되는 두 개의 스위치 번호를 출력한다.&nbsp;비용이 최소가 되도록 연결하는 방법이 여러 가지인 경우에는 아무거나 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 12
1 2 20
2 3 8
2 4 3
2 5 3
2 6 6
3 5 2
3 6 9
4 7 5
5 6 1
5 7 7
6 8 4
7 8 6
1 4 6
','27 4
1 2
2 4
2 5
5 6
','SHORTEST_PATH'),
                                                                                                                (11314,'BAEKJOON','https://www.acmicpc.net/problem/2423',2423,'전구를 켜라','1초','128 MB',15,'<p>선영이는 N × M 직사각형 크기의 전자 회로를 디자인 하고 있다. 회로에는 N × M개의 정사각형 타일이 있고, 모두 직사각형의 변과 평행하다. 모든 타일은 두 개의 마주보는 꼭짓점이 전선으로 연결되어 있다. (그림 참조)</p>

<p>전원은 왼쪽 위 모서리에 연결되어 있고, 전구는 오른쪽 아래 모서리에 연결되어 있다. 전구는 &nbsp;전원에서 전구로 가는 경로가 있을 때만 불이 켜진다. 전구에 불을 켜기 위해서, 선영이는 몇개의 타일을 90도 회전 시킬 수 있다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/46c9ed9e-27e3-4e32-a144-0962b813347e/-/preview/" style="width: 289px; height: 195px;"></p>

<p>위의 그림에서 전구는 꺼져있다. 만약 오른쪽에서 2번째 열 중 아무 칸이나 90도 회전시킨다면, 전원과 전구는 연결되어 전구가 켜지게 된다. 전구에 불을 켜기 위해 돌려야 하는 칸의 개수의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 M이 주어진다. 둘째 줄부터 N개의 줄에는 전자 회로의 상태가 주어진다. 상태는 <code>/</code> 또는 <code>\</code>이다. (1 ≤ N, M ≤ 500)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 문제의 정답을 출력한다. 전구에 불을 켜는 것이 가능하면, 몇 개의 칸을 돌려야 하는지를 출력하고, 불가능할때는 "NO SOLUTION"을 따옴표 없이 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 5
\\/\\
\\///
/\\\\
','1
','SHORTEST_PATH'),
                                                                                                                (11318,'BAEKJOON','https://www.acmicpc.net/problem/2458',2458,'키 순서','1초','128 MB',12,'<p>1번부터 N번까지 번호가 붙여져 있는 학생들에 대하여 두 학생끼리 키를 비교한 결과의 일부가 주어져 있다. 단, N명의 학생들의 키는 모두 다르다고 가정한다. 예를 들어, 6명의 학생들에 대하여 6번만 키를 비교하였고, 그 결과가 다음과 같다고 하자.</p>

<ul>
	<li>1번 학생의 키 < 5번 학생의 키</li>
	<li>3번 학생의 키 < 4번 학생의 키</li>
	<li>5번 학생의 키 < 4번 학생의 키</li>
	<li>4번 학생의 키 < 2번 학생의 키</li>
	<li>4번 학생의 키 < 6번 학생의 키</li>
	<li>5번 학생의 키 < 2번 학생의 키</li>
</ul>

<p>이 비교 결과로부터 모든 학생 중에서 키가 가장 작은 학생부터 자신이 몇 번째인지 알 수 있는 학생들도 있고 그렇지 못한 학생들도 있다는 사실을 아래처럼 그림을 그려 쉽게 확인할 수 있다. a번 학생의 키가 b번 학생의 키보다 작다면, a에서 b로 화살표를 그려서 표현하였다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/8f9e2484-a3aa-4b97-b1fa-387df4ae58d0/-/preview/" style="width: 100px; height: 142px;"></p>

<p>1번은 5번보다 키가 작고, 5번은 4번보다 작기 때문에, 1번은 4번보다 작게 된다. 그러면 1번, 3번, 5번은 모두 4번보다 작게 된다. 또한 4번은 2번과 6번보다 작기 때문에, 4번 학생은 자기보다 작은 학생이 3명이 있고, 자기보다 큰 학생이 2명이 있게 되어 자신의 키가 몇 번째인지 정확히 알 수 있다. 그러나 4번을 제외한 학생들은 자신의 키가 몇 번째인지 알 수 없다.</p>

<p>학생들의 키를 비교한 결과가 주어질 때, 자신의 키가 몇 번째인지 알 수 있는 학생들이 모두 몇 명인지 계산하여 출력하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 학생들의 수 N (2 ≤ N ≤ 500)과 두 학생 키를 비교한 횟수 M (0 ≤ M ≤ N(N-1)/2)이 주어진다.</p>

<p>다음 M개의 각 줄에는 두 학생의 키를 비교한 결과를 나타내는 N보다 작거나 같은 서로 다른 양의 정수 a와 b가 주어진다. 이는 번호가 a인 학생이 번호가 b인 학생보다 키가 작은 것을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>자신이 키가 몇 번째인지 알 수 있는 학생이 모두 몇 명인지를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 6
1 5
3 4
5 4
4 2
4 6
5 2
','1
','SHORTEST_PATH'),
                                                                                                                (6360,'BAEKJOON','https://www.acmicpc.net/problem/2472',2472,'체인점','1초','256 MB',20,'<p>홍길동은 요즘 한창 인기가 많은 KOI 치킨 체인점을 차리려고 계획하고 있다. 홍길동이 사는 지역의 도로 지도는 아래 그림과 같다. 그림에서 원으로 표시된 부분은 체인점의 매장 설치 후보지이고, 선은 도로를 나타내며 선 옆에 표시된 값은 도로의 길이이다. 이 지역에는 대규모 아파트 단지가 세 군데 있다. 아파트의 위치는 그림에서 A, B, C로 표시된 원이다. 이 지역의 모든 교차로는 연결된 도로의 개수가 5개 이하이고, 도로를 통해 어떤 장소라도 찾아갈 수 있다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/64e663f6-f89d-4689-9b53-4e69b5b44354/-/preview/" style="width: 225px; height: 178px;"></p>

<p>위 그림에서 매장 후보지 1에 매장을 설치한다고 하자. 후보지 1에서 아파트 단지 A, B, C까지의 최단 경로 길이는 각각 8, 16, 9이다. 이 값들은 매장 후보지 4에서 아파트 단지 A, B, C까지 최단 경로의 길이인 6, 7, 3보다 각각 더 크다. 사람들은 더 가까운 매장을 이용하는 경향이 있기 때문에, 아파트 단지까지의 거리를 비교할 때 후보지 1은 모든 면(각 아파트까지의 거리)에서 후보지 4보다 불리한 위치이다. 후보지 6의 경우는 아파트 단지 A, B, C까지의 거리가 각각 5, 3, 5이므로, 후보지 1과 비교하면 모든 면에서 유리하지만, 후보지 4와 비교하면 아파트 단지 A, B에는 유리하고 C에는 불리하다.&nbsp;</p>

<p>이런 이유 때문에 홍길동은 매장 위치를 결정하는데 있어 다음의 기준을 정해 놓았다.&nbsp;</p>

<blockquote>
<p><strong>매장 후보지 p에서 아파트 단지 A, B, C까지의 최단 경로 길이를 각각 a, b, c라고 하고 다른 매장 후보지 q가 존재해서 q에서 아파트 단지 A, B, C까지의 최단 경로 길이를 각각 x, y, z라고 할 때, a > x 이고 b > y 이고 c > z이면 p에는 매장을 설치하지 않는다.</strong></p>
</blockquote>

<p>홍길동은 자신이 원하는 어떤 장소에 매장을 차릴 수 있는지를 알려고 한다. 질의로서 매장 후보지가 하나 주어질 때 그 곳에 매장을 차릴 수 있는지 여부를 판별하는 프로그램을 작성하시오. 질의는 여러 개가 들어올 수 있다. 아파트 단지가 위치한 장소에도 매장을 설치할 수 있다는 점과 각 교차로는 기껏해야 오거리임에 유의하라.&nbsp;</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 매장 후보지의 개수를 나타내는 정수 N이 입력된다(1 ≤ N ≤ 100,000). 매장 후보지들은 1부터 N까지의 번호로 구분된다. 둘째 줄에는 아파트 단지의 위치를 나타내는 세 개의 정수 A, B, C가 빈칸을 사이에 두고 주어진다. A, B, C는 모두 다른 값이며 매장 후보지 중의 하나로 주어진다. 세 번째 줄에는 도로의 개수를 나타내는 정수 M이 주어진다. 그 다음 M개의 줄에는 각 줄마다 세 개의 정수 X, Y, Z가 주어진다. 여기서 X, Y는 도로의 양 끝 매장 후보지 번호를 나타내고, Z는 도로의 길이이다(1 ≤ Z ≤ 10,000). 입력에서 같은 도로가 중복해서 들어오는 경우는 없다. 그 다음 줄에는 질의의 개수를 나타내는 정수 T가 주어진다(1 ≤ T ≤ 10,000). 그 다음 T개의 줄에는 각 줄마다 질의를 나타내는 한 개의 정수 Q가 주어진다(1 ≤ Q ≤ N).</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 질의 Q에 대해 매장 후보지 Q에 매장을 설치할 수 있으면 대문자로 YES, 아니면 NO를 출력한다.&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','9
2 5 9
15
1 2 8
1 3 5
2 4 6
2 5 8
2 6 5
3 4 6
3 9 4
4 6 4
4 9 3
5 6 3
5 7 4
6 7 2
6 9 5
7 8 7
8 9 6
2
1
2
','NO
YES
','SHORTEST_PATH'),
                                                                                                                (6378,'BAEKJOON','https://www.acmicpc.net/problem/2610',2610,'회의준비','1초','128 MB',14,'<p>KOI 준비를 위해 회의를 개최하려 한다. 주최측에서는 회의에 참석하는 사람의 수와 참석자들 사이의 관계를 따져 하나 이상의 위원회를 구성하려고 한다. 위원회를 구성하는 방식은 다음과 같다.</p>

<ol>
	<li>서로 알고 있는 사람은 반드시 같은 위원회에 속해야 한다.</li>
	<li>효율적인 회의 진행을 위해 위원회의 수는 최대가 되어야 한다.</li>
</ol>

<p>이런 방식으로 위원회를 구성한 후에 각 위원회의 대표를 한 명씩 뽑아야 한다. 각 위원회의 대표만이 회의 시간 중 발언권을 가지며, 따라서 회의 참석자들이 자신의 의견을 말하기 위해서는 자신이 속한 위원회의 대표에게 자신의 의견을 전달해야 한다. 그런데 각 참석자는 자신이 알고 있는 사람에게만 의견을 전달할 수 있어 대표에게 의견을 전달하기 위해서는 때로 여러 사람을 거쳐야 한다. 대표에게 의견을 전달하는 경로가 여러 개 있을 경우에는 가장 적은 사람을 거치는 경로로 의견을 전달하며 이때 거치는 사람의 수를 참석자의 의사전달시간이라고 한다.</p>

<p>위원회에서 모든 참석자들의 의사전달시간 중 최댓값이 최소가 되도록 대표를 정하는 프로그램을 작성하시오.</p>

<p>예를 들어 1번, 2번, 3번 세 사람으로 구성되어 있는 위원회에서 1번과 2번, 2번과 3번이 서로 알고 있다고 하자. 1번이 대표가 되면 3번이 대표인 1번에게 의견을 전달하기 위해서 2번을 거쳐야만 한다. 반대로 3번이 대표가 되어도 1번이 대표인 3번에게 의견을 전달하려면 2번을 거쳐야만 한다. 하지만 2번이 대표가 되면 1번과 3번 둘 다 아무도 거치지 않고 대표에게 직접 의견을 전달 할 수 있다. 따라서 이와 같은 경우 2번이 대표가 되어야 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 회의에 참석하는 사람의 수 N이 주어진다. 참석자들은 1부터 N까지의 자연수로 표현되며 회의에 참석하는 인원은 100 이하이다. 둘째 줄에는 서로 알고 있는 관계의 수 M이 주어진다. 이어 M개의 각 줄에는 서로 아는 사이인 참석자를 나타내는 두개의 자연수가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에는 구성되는 위원회의 수 K를 출력한다. 다음 K줄에는 각 위원회의 대표 번호를 작은 수부터 차례로 한 줄에 하나씩 출력한다. 한 위원회의 대표가 될 수 있는 사람이 둘 이상일 경우 그중 한 명만 출력하면 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8
7
1 2
2 3
4 5
5 6
4 6
6 7
7 4','3
2
4
8','SHORTEST_PATH'),
                                                                                                                (11330,'BAEKJOON','https://www.acmicpc.net/problem/2617',2617,'구슬 찾기','1초','128 MB',12,'<p>모양은 같으나, 무게가 모두 다른 N개의 구슬이 있다. N은 홀수이며, 구슬에는 번호가 1,2,...,N으로 붙어 있다. 이 구슬 중에서 무게가 전체의 중간인 (무게 순서로 (N+1)/2번째) 구슬을 찾기 위해서 아래와 같은 일을 하려 한다.</p>

<p>우리에게 주어진 것은 양팔 저울이다. 한 쌍의 구슬을 골라서 양팔 저울의 양쪽에 하나씩 올려 보면 어느 쪽이 무거운가를 알 수 있다. 이렇게 M개의 쌍을 골라서 각각 양팔 저울에 올려서 어느 것이 무거운가를 모두 알아냈다. 이 결과를 이용하여 무게가 중간이 될 가능성이 전혀 없는 구슬들은 먼저 제외한다.</p>

<p>예를 들어, N=5이고, M=4 쌍의 구슬에 대해서 어느 쪽이 무거운가를 알아낸 결과가 아래에 있다.</p>

<ol>
	<li>구슬 2번이 구슬 1번보다 무겁다.</li>
	<li>구슬 4번이 구슬 3번보다 무겁다.</li>
	<li>구슬 5번이 구슬 1번보다 무겁다.</li>
	<li>구슬 4번이 구슬 2번보다 무겁다.</li>
</ol>

<p>위와 같이 네 개의 결과만을 알고 있으면, 무게가 중간인 구슬을 정확하게 찾을 수는 없지만, 1번 구슬과 4번 구슬은 무게가 중간인 구슬이 절대 될 수 없다는 것은 확실히 알 수 있다. 1번 구슬보다 무거운 것이 2, 4, 5번 구슬이고, 4번 보다 가벼운 것이 1, 2, 3번이다. 따라서 답은 2개이다.</p>

<p>M 개의 쌍에 대한 결과를 보고 무게가 중간인 구슬이 될 수 없는 구슬의 개수를 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄은 구슬의 개수를 나타내는 정수 N(1 ≤ N ≤ 99)과 저울에 올려 본 쌍의 개수 M(1 ≤ M ≤ N(N-1)/2)이 주어진다. 그 다음 M 개의 줄은 각 줄마다 두 개의 구슬 번호가 주어지는데, 앞 번호의 구슬이 뒤 번호의 구슬보다 무겁다는 것을 뜻한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 무게가 중간이 절대로 될 수 없는 구슬의 수를 출력 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 4
2 1
4 3
5 1
4 2
','2
','SHORTEST_PATH'),
                                                                                                                (11342,'BAEKJOON','https://www.acmicpc.net/problem/2645',2645,'회로배치','1초','128 MB',17,'<p>회로를 n×n의 격자 판에 배치하려고 한다. 여기서 각 격자(정사각형 칸)는 범위 밖에 있는 격자를 제외하고 상, 하, 좌, 우 4개의 이웃 격자를 갖는다. 회로는 시작과 끝이 있는 연속된 이웃 격자들의 길(path)이다. 아래 그림에서는 X와 Y, P와 Q를 연결한 두 개의 회로가 있다. 이미 회로들이 배치되어 있는 격자 판에 새로 배치할 회로의 양 끝 격자가 주어져 있을 때, 이들 두 격자를 잇는 새로운 회로를 배치하려고 한다.</p>

<p>새로 배치될 회로는 이미 회로가 배치된 격자위에 배치될 수도 있다. 이 회로의 배치 비용은 이 회로가 지나는 격자에 따라 다음과 같이 결정된다. 회로가 배치되지 않은 빈 격자를 지나는 비용은 1이고, 이미 회로가 놓여있는 격자를 지날 때는 비용이 k이다. 주어진 문제는 최소의 비용이 소요되는 새로운 회로를 찾는 것이다.</p>

<p>예를 들어 아래의 그림에서 k가 4로 주어진다면, 점선을 따라 격자 A와 B를 잇는 회로의 비용은 19이지만, 비용이 16인 최소비용 회로가 존재한다. (이 비용에는 A, B의 비용도 포함된다.)</p>

<p style="text-align: center;"><img alt="" src=https://www.acmicpc.net/upload/images/haWdW9HSdociyElykQh3ChwRIMANuVhH.gif" style="width: 289px; height: 299px; "></p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 격자 판의 크기를 나타내는 정수 n(1 ≤ n ≤ 50)이 주어진다.</p>

<p>둘째 줄에는 새로 배치할 회로의 시작 격자, 마지막 격자의 위치를 나타내는 4개의 정수가 주어진다. 한 격자의 위치는 위 그림에서 주어진 행과 열의 번호 순서로 주어진다. 시작 격자와 마지막 격자의 위치는 같을 수 없다.</p>

<p>셋째 줄에는 회로가 배치된 격자를 지나는데 드는 비용인 정수 k(2 ≤ k ≤ 60)가 주어진다.</p>

<p>넷째 줄에는 이미 배치된 회로의 개수 m(1 ≤ m ≤ 7)이 주어진다.</p>

<p>다섯째 줄부터는 한줄에 한 회로의 배치 정보가 다음과 같이 주어진다. 첫째 정수는 회로의 시작 격자, 90°로 꺾이는 방향 전환 격자들, 그리고 마지막 격자의 개수이다. 이 값은 2보다 크거나 같고, 15보다 작거나 같은 자연수이다. 그 다음 부터는 이들 격자의 위치가 시작 격자부터 마지막 격자까지 행과 열의 순서대로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에는 회로의 최소 비용을 출력한다. 둘째 줄에는 최소비용 회로의 정보를 다음과 같이 출력한다. (입력 형식과 동일함) 처음에 회로의 시작 격자, 90°로 꺾이는 방향 전환 격자들, 그리고 마지막 격자의 총 개수를 출력한다. 그 다음부터는 이들 격자의 위치를 시작 격자부터 마지막 격자까지 행과 열의 순서대로 한 개씩 공백을 두고 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','11
2 3 9 8
4
2
3 3 9 3 4 10 4
4 9 2 7 2 7 7 5 7
','16
3 2 3 2 8 9 8
','SHORTEST_PATH'),
                                                                                                                (11341,'BAEKJOON','https://www.acmicpc.net/problem/2660',2660,'회장뽑기','1초','128 MB',11,'<p>월드컵 축구의 응원을 위한 모임에서 회장을 선출하려고 한다. 이 모임은 만들어진지 얼마 되지 않았기 때문에 회원 사이에 서로 모르는 사람도 있지만, 몇 사람을 통하면 모두가 서로 알 수 있다. 각 회원은 다른 회원들과 가까운 정도에 따라 점수를 받게 된다.</p>

<p>예를 들어 어느 회원이 다른 모든 회원과 친구이면, 이 회원의 점수는 1점이다. 어느 회원의 점수가 2점이면, 다른 모든 회원이 친구이거나 친구의 친구임을 말한다. 또한 어느 회원의 점수가 3점이면, 다른 모든 회원이 친구이거나, 친구의 친구이거나, 친구의 친구의 친구임을 말한다.</p>

<p>4점, 5점 등은 같은 방법으로 정해진다. 각 회원의 점수를 정할 때 주의할 점은 어떤 두 회원이 친구사이이면서 동시에 친구의 친구사이이면, 이 두사람은 친구사이라고 본다.</p>

<p>회장은 회원들 중에서 점수가 가장 작은 사람이 된다. 회장의 점수와 회장이 될 수 있는 모든 사람을 찾는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫째 줄에는 회원의 수가 있다. 단, 회원의 수는 50명을 넘지 않는다. 둘째 줄 이후로는 한 줄에 두 개의 회원번호가 있는데, 이것은 두 회원이 서로 친구임을 나타낸다. 회원번호는 1부터 회원의 수만큼 붙어 있다. 마지막 줄에는 -1이 두 개 들어있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에는 회장 후보의 점수와 후보의 수를 출력하고, 두 번째 줄에는 회장 후보를 오름차순으로 모두 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
1 2
2 3
3 4
4 5
2 4
5 3
-1 -1
','2 3
2 3 4','SHORTEST_PATH'),
                                                                                                                (11345,'BAEKJOON','https://www.acmicpc.net/problem/2665',2665,'미로만들기','1초','128 MB',12,'<p>n×n 바둑판 모양으로 총 n<sup>2</sup>개의 방이 있다. 일부분은 검은 방이고 나머지는 모두 흰 방이다. 검은 방은 사면이 벽으로 싸여 있어 들어갈&nbsp;수 없다. 서로 붙어 있는 두 개의 흰 방 사이에는 문이 있어서 지나다닐 수 있다. 윗줄 맨 왼쪽 방은 시작방으로서 항상 흰 방이고, 아랫줄 맨 오른쪽 방은 끝방으로서 역시 흰 방이다.</p>

<p>시작방에서 출발하여 길을 찾아서 끝방으로 가는 것이 목적인데, 아래 그림의 경우에는 시작방에서 끝 방으로 갈 수가 없다. 부득이 검은 방 몇 개를 흰 방으로 바꾸어야 하는데 되도록 적은 수의 방의 색을 바꾸고 싶다.</p>

<p>아래 그림은 n=8인 경우의 한 예이다.</p>

<p style="text-align: center;"><img alt="" src=https://www.acmicpc.net/upload/images/MW747ysuRPRpii4KaUvptRDAx46g.png" style="width: 263px; height: 207px; "></p>

<p>위 그림에서는 두 개의 검은 방(예를 들어 (4,4)의 방과 (7,8)의 방)을 흰 방으로 바꾸면, 시작방에서 끝방으로 갈 수 있지만, 어느 검은 방 하나만을 흰 방으로 바꾸어서는 불가능하다. 검은 방에서 흰 방으로 바꾸어야 할 최소의 수를 구하는 프로그램을 작성하시오.</p>

<p>단, 검은 방을 하나도 흰방으로 바꾸지 않아도 되는 경우는 0이 답이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 한 줄에 들어가는 방의 수 n(1 ≤ n ≤ 50)이 주어지고, 다음 n개의 줄의 각 줄마다 0과 1이 이루어진 길이가 n인 수열이 주어진다. 0은 검은 방, 1은 흰 방을 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 흰 방으로 바꾸어야 할 최소의 검은 방의 수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8
11100110
11010010
10011010
11101100
01000111
00110001
11011000
11000111
','2
','SHORTEST_PATH'),
                                                                                                                (11349,'BAEKJOON','https://www.acmicpc.net/problem/2679',2679,'맨체스터의 도로','1초','128 MB',18,'<p>맨체스터에 있는 도로는 모두 일방 통행이다. 또한 이 도로는 모두 1시간에 지나갈 수 있는 차의 개수 제한이 있다. 길(경로)에도 차의 개수 제한이 있는데, 이것은 이 길에 있는 도로의 제한 중 최솟값이다.</p>

<p>A에서 B로 가는 중복 비율은 A에서 B로 가는 모든 길을 동시에 이용했을 때 1시간 동안 B에 도착할 수 있는 차의 최대 개수와 길 1개를 이용했을 때 도착할 수 있는 최대 개수의 비율이다.</p>

<p>최소 중복 비율은 길 1개를 이용했을 때 도착할 수 있는 최대 개수가 가장 큰 값이 된다.</p>

<p>맨체스터의 도로 정보와 A, B가 주어졌을 때, 최소 중복 비율을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 개수 T (1 ≤ T ≤ 1,000)가 주어진다. 각 테스트 케이스는 다음과 같이 구성되어 있다.</p>

<p>첫째 줄에 정수 4개가 주어진다. 차례대로 N, E, A, B이다. N (2 ≤ N ≤ 1,000)은 그래프의 정점의 개수, E (E ≥ 1)는 간선의 개수이다. A (0 ≤ A < N)와 B (0 ≤ B < N, A ≠ B)는 문제 설명에 나와있는 A와 B이다.</p>

<p>그 다음 E개 줄은 각 간선에 대한 정보이다. 이 정보는 U V W로 구성되어 있는데, U (0 ≤ U < N)와 V (0 ≤ V < N, V ≠ U)는 그래프의 정점이고, W (1 ≤ W ≤ 1000)는 U에서 V로 향하는 도로의 1시간에 지나갈 수 있는 차의 개수 제한이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해 최소 중복 비율을 소수점 셋째자리까지 출력한다.&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1
7 11 0 6
0 1 3
0 3 3
1 2 4
2 0 3
2 3 1
2 4 2
3 4 2
3 5 6
4 1 1
4 6 1
5 6 9
','1.667
','SHORTEST_PATH'),
                                                                                                                (415,'BAEKJOON','https://www.acmicpc.net/problem/2781',2781,'놀이 동산','2초','128 MB',15,'<p>새로 생긴 놀이 동산에 놀러간 해인이는 잠시 한눈을 판 사이에 친구들을 놓쳤다. 준비성이 철저한 해인이는 미리 자신이 길을 잃을 것을 대비해서 약속 장소를 친구들에게 알려주었기 때문에 그 장소로 가능한 한 빨리 가려고 한다. 놀이동산은 &nbsp;N*M의 격자로 이루어져 있고 각각의 격자를 모두 독특한 행사를 하고 있기 때문에 지나가는데 드는 비용이 다르다. 맨 왼쪽 위의 격자는 (1,1)이고 가장 오른쪽 아래 격자는 (N,M)이다. 그리고 각 격자를 지나가는데 걸리는 비용을 나타난 행렬을 C라고 하면 C<sub>ij</sub>는 (i,j)번 격자를 지나가려면 1/C<sub>ij</sub>의 비용이 든다는 것을 의미한다.&nbsp;</p>

<p>해인이는 격자위의 특정 지점에 있을때 그 지점의 위, 아래, 왼쪽, 오른쪽으로 순식간에 이동할 수 있다.(즉, 시간이 들지 않는다)&nbsp;</p>

<p>그리고 시간은 0분~1분, 1분~2분, 2분~3분, … 같은 구간으로 나누어 볼 수 있으며 이때 격자를 이동하는데에 한가지 조건이 생긴다. 각 시간 구간에서 거쳤던 격자의 총 비용이 1이하여야 한다.</p>

<p>해인이가 현재 있는 위치 (Sx, Sy)와 약속장소 (Dx, Dy)가 주어지고 행렬 C가 주어진다고 할때 해인이의 현재 위치에서 약속 장소까지 가는데 걸리는 최소의 시간을 구하라.</p>

<p>다음의 예제를 생각해보자. N=1, M=5이고 C = {22334}, Sx = 1, Sy = 1, Dx = 1, Dy = 5라면 놀이동산은 다음과 같은 그림이라고 할 수 있다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/f1.png" style="height:45px; width:200px"></p>

<p>이때 첫 번째 시간 구간 (0분~1분)&nbsp;에서 위치를 (1,2)까지 갈 수 있다. 왜냐하면 이 구간에 있었던 격자의 총 비용이 ½ + ½ <= 1이기 때문이다. 하지만, (1,3)까지는 ½ + ½ + ⅓ > 1이기 때문에 가지 못한다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/f2.png" style="height:44px; width:200px"></p>

<p>(1분~2분)에서는 (1,3)까지 갈 수 있다. 하지만, (1,4)까지는 갈 수 없다. ½ + ⅓ + ⅓ >&nbsp;1.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/f3.png" style="height:47px; width:200px"></p>

<p>(2분~3분)에서는 (1,5)까지 갈 수 있다. ⅓ +&nbsp;⅓ + ¼ <= 1</p>

<p>결국 필요한 최소의 시간은 3분이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 Test case의 수 T가 주어진다. 그리고 각각의 케이스마다 입력으로 첫 번째 줄에 놀이동산의 크기 정수 N, M이 주어진다. ( 1<= N , M <= 50 인 ). 두 번째 줄에는 N개의 줄에 걸쳐서 행렬 C가 주어진다. N+2 번째 줄에는 정수 Sx, Sy, Dx, Dy가 주어진다. ( 1 <= Sx, Dx <= N, &nbsp;1 <=Sy, Dy <= M ).</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 Test case에 대해서 해인이의 현재 위치에서 목표 위치까지 가는데 필요한 최소 시간을 출력하라. 목표 위치까지 갈 수 없는 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
1 5
22334
1 1 1 5
3 2
55
52
55
1 2 3 2
','3
1
','SHORTEST_PATH'),
                                                                                                                (11353,'BAEKJOON','https://www.acmicpc.net/problem/2795',2795,'사업 확장','1초','128 MB',24,'<p>성공한 벤쳐회사 "봉씨"의 사장 연종이는 사업을 미국으로 확장하기로 결정했다.</p>

<p>봉씨는 LA에 있는 투자자들을 만나기 위해 미국으로 출발했다. 하지만, 비행기를 내리고 보니 그곳은 LA가 아니었다. 연종이의 비서는 아는 미국 도시가 뉴욕밖에 없었기 때문에, 당연히 사장의 항공편을 뉴욕행으로 예약한 것이다.</p>

<p>연종이는 LA까지 가는 비용을 최대한 줄이려고 한다. 따라서, 그는 비행기를 타는 대신에 차를 빌려서 이동할 것이다.</p>

<p>미국에는 N개의 도시가 있고, 각 도시는 1번부터 N번까지 번호가 매겨져 있다. 또, M개의 도로가 있다. 도로는 두 도시를 연결하며, 한 방향으로만 움직일 수 있다.</p>

<p>뉴욕의 도시 번호는 1번이고, LA의 번호는 2번이다.&nbsp;</p>

<p>연종이의 회사는 구글을 넘는 가치를 지니고 있기 때문에, 연종이가 방문하는 도시에 경호원을 고용하려고 한다. 이때, 고용해야하는 경호원의 수를 최소화하는 프로그램을 작성하시오. 어떤 도시에서 경호원을 고용하면, 몇 번을 방문하더라도 재고용하지 않아도 된다. 연종이는 뉴욕에서 출발해서 LA를 방문했다가 다시 뉴욕으로 돌아온다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 N과 M이 주어진다. (2 ≤ N ≤ 100, 2 ≤ M ≤ 200)</p>

<p>다음 M개의 줄에는 서로 다른 정수 A와 B가 주어진다. (1 ≤ A, B ≤ N) 이 두 숫자는 도로에 대한 정보이고, A에서 B로 가는 도로라는 뜻이다. 같은 도로가 두 번이상 주어지는 경우는 없지만, 반대 방향 도로(B -> A)가 주어질 수는 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 뉴욕에서 LA로 갔다가, 다시 뉴욕으로 돌아오는 경로 중 고용해야하는 경호원의 수의 최솟값을 출력한다. 항상 답이 존재하는 경우만 입력으로 주어진다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>첫 번째 예제의 경우 1 → 3 → 4 → 2 → 6 → 3 → 4 → 5 → 1와 같이 이동하면 된다.</p>

				</div>
				</div>','6 7
1 3
3 4
4 5
5 1
4 2
2 6
6 3
','6
','SHORTEST_PATH'),
                                                                                                                (11360,'BAEKJOON','https://www.acmicpc.net/problem/2917',2917,'늑대 사냥꾼','1초','128 MB',14,'<p>늑대 현우는 피에 굶주린 사냥꾼들에게 벗어나려고 도망치고 있다. 사냥꾼은 매우 똑똑해서 나무 뒤에 숨어있다. 현우도 이 사실을 알고있다. 하지만, 어떤 나무 뒤에 사냥꾼들이 숨어있는지 알지 못한다. 현우는 사냥꾼에게 잡히지 않기 위해서 숲의 한 오두막으로 대피하려고 한다. 현우는 나무와 거리가 최대한 떨어지는 경로로 대피하려고 한다.</p>

<p>숲은 N×M 크기의 그리드로 나타낼 수 있다. 각 칸이 빈 목초지라면 ., 나무가 있다면 +, 현재 현우의 위치는 V, 오두막의 위치는 J로 나타나있다. 현우는 현재 있는 위치에서 동서남북으로 인접한 칸으로 이동할 수 있고, 나무가 있는 칸으로도 이동할 수 있다.</p>

<p>만약 현우가 지금 R행 C열에 있고, 나무가 A행 B열에 있다면, 현우와 나무의 거리는 |R-A| + |C-B|이다.</p>

<p>현우는 오두막으로 도망치는 가장 안전한 길로 이동하려고 한다. 가장 안전한 길이란 현우가 이동하는 모든 칸에서 나무와 거리의 최솟값이 가장 큰 경로이다. 또, 오두막이 있는 칸도 경로의 일부이기 때문에 나무와 거리를 계산해야 한다.</p>

<p>숲의 지도가 주어졌을 때, 가장 안전한 길을 찾는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 M (1 ≤ N, M ≤ 500)이 주어진다. 둘째 줄부터 N개 줄에는 숲의 지도가 주어진다. 지도에 V와 J는 딱 하나만 있고, 적어도 하나의 +가 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 가장 안전한 경로에서 나무와 현우와 거리의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 4
+...
....
....
V..J
','3
','SHORTEST_PATH'),
                                                                                                                (11359,'BAEKJOON','https://www.acmicpc.net/problem/2958',2958,'도로 네트워크','1초','128 MB',19,'<p>도시 N개와 일방통행 도로 M개로 이루어진 도로 네트워크가 있다. 도시는 1번부터 N번까지 번호가 매겨져 있다. 또, 각 도로의 출발 도시와 도착 도시, 그리고 길이를 알고 있다.</p>

<p>도로 E의 도착 도시와 도로 F의 시작 도시가 같다면, 도로 F를 도로 E의 연장선이라고 한다. A에서 B로 가는 경로란 첫 도로의 시작 도시가 A이고 마지막 도로의 도착 도시가 B이면서 각 도로가 이전 도로의 연장선인 도로의 연속이다. 경로의 길이는 경로에 포함된 도로의 길이의 합이다.</p>

<p>A에서 B로 가는 최단 경로는 A에서 B로 가는 경로 중에서 길이가 가장 짧은 것을 말한다.</p>

<p>각각의 도로에 대해서, 그 도로를 포함하는 최단 경로가 몇 개 있는지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 N과 도로의 수 M이 주어진다. (2&nbsp;≤ N ≤ 1500, 1 ≤ M ≤ 5000)</p>

<p>다음 M개 줄에는 도로의 정보를 나타내는 세 정수 O, D, L이 주어진다. 도로의 시작 도시가 O이고, 도착 도시가 D이면서 길이가 L인 도로라는 의미이다. O와 D는 다르고, L은&nbsp; 10,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>총 M개 도로에 대해서 그 도로를 포함하는 최단 경로의 개수를 1,000,000,007로 나눈 나머지를 한 줄에 하나씩 출력한다. 출력은 입력으로 주어진 도로 순서대로 해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 3
1 2 5
2 3 5
3 4 5
','3
4
3
','SHORTEST_PATH'),
                                                                                                                (11362,'BAEKJOON','https://www.acmicpc.net/problem/2982',2982,'국왕의 방문','1초','128 MB',14,'<p>지난주에 상그니 아라비아의 국왕 고둘라 창지즈 영사우드가 한국에 도착했다. 고둘라는 매우 중요한 사람이다. 따라서, 경찰은 그가 타고 있는 차량이 길에 진입했을 때, 그가 길에 있는 동안에 다른 차량이 들어올 수 없게 통제할 것이다. 하지만, 그가 진입하기 전부터 길에 있던 차량은 계속 있을 수 있다.</p>

<p>상근이는 오토바이 소년 승환이의 뒤를 이어 근처에서 피자를 트럭으로 배달하는 사람이다. 상근이는 교통 통제 때문에 배달을 정시에 하지 못해서 짤릴뻔했다.</p>

<p>이미 고둘라 창지즈 영사우드는 상그니 아라비아로 돌아갔다. 하지만 상근이는 고둘라가 한국에 왔었을 때, 어떤 길로 이동을 했어야 배달을 빠르게 할 수 있었는지 알아보려고 한다. 상근이는 고둘라가 이동한 경로를 알고 있다.</p>

<p>도시는 여러 개의 교차로와 교차로를 서로 연결하는 양방향 도로로 모델링할 수 있다. 상근이는 각 도로를 이동하는데 걸리는 시간을 알고 있다. 고둘라가 그 도로를 이동하는데 걸리는 시간도 같다.</p>

<p>예를 들어, 고둘라가 10분이 되던 때에 어떤 도로에 도착했고, 그 도로를 통과하는데 걸리는 시간이 5라고 하자. 그럼 이 도로는 10, 11, 12, 13, 14분에는 진입할 수 없다. 상근이는 9분 이전, 15분 이후에 이 도로에 진입할 수 있다.</p>

<p>상근이가 배달을 하는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오. 상근이는 고둘라가 출발하고 K분이 지난 후에 배달을 시작한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 교차로의 수 N과 도로의 수 M이 주어진다. 교차로는 1번부터 N번까지 번호가 매겨져 있다. (2 ≤ N ≤ 1000, 2 ≤ M ≤ 10,000)</p>

<p>둘째 줄에는 네 정수 A, B, K, G가 주어진다. (1 ≤ A, B ≤ N, 0 ≤ K ≤ 1000, 0 ≤ G ≤ 1000) A는 상근이가 배달을 시작하는 교차로, B는 상근이가 배달을 마치는 교차로이다. K는 고둘라가 출발한 시간과 상근이가 출발한 시간의 차이, G는 고둘라가 방문하는 교차로의 개수이다.</p>

<p>셋째 줄에는 G개의 정수가 주어진다.이 정수는 고둘라가 방문하는 교차로이다. 인접한 교차로 사이의 거리를 고둘라가 이동하는 것이다. 항상 도로는 존재하며, 각 도로를 최대 한 번만 이동한다.</p>

<p>넷째 줄부터 M개 줄에는 도로의 정보를 나타내는 세 정수 U, V, L이 주어진다. 교차로 U와 V를 연결하는 도로를 이동하는데 L분이 걸린다는 뜻이다. L은 1보다 크거나 같고, 1000보다 작거나 같은 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 상근이가 배달을 마치는데 필요한 가장 빠른 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 5
1 6 20 4
5 3 2 4
1 2 2
2 3 8
2 4 3
3 6 10
3 5 15
','21
','SHORTEST_PATH'),
                                                                                                                (11410,'BAEKJOON','https://www.acmicpc.net/problem/3598',3598,'엘리베이터','1초','128 MB',18,'<p>동혁이는 엘리베이터를 만드는 회사에 취직했다. 이 회사는 세상에서 오직 하나뿐인 엘리베이터를 만든다.</p>

<p>동혁이는 입사하자마자 h층 건물에 들어갈 새로운 엘리베이터를 만드는 프로젝트에 투입되었다. 다가오는 회의에서 동혁이는 기존에 없던 새로운 엘리베이터를 생각해서 제안서를 제출해야 한다.</p>

<p>며칠동안 밤샘 끝에 동혁이는 버튼 4개만 가지고 있는 엘리베이터를 생각해냈다. 버튼은 다음과 같은 기능을 갖는다.</p>

<ol>
	<li>a층 올라가는 버튼</li>
	<li>b층 올라가는 버튼</li>
	<li>c층 올라가는 버튼</li>
	<li>1층으로 되돌아오는 버튼</li>
</ol>

<p>처음에 엘리베이터는 1층에 있다. 탑승객은 이 세 버튼을 이용해서 자기가 올라가야하는 층까지 올라가야 한다. 만약, a, b, c층 위에 해당하는 층이 없을 때는(h층 위) 엘리베이터는 움직이지 않는다.</p>

<p>동혁이는 자신의 제안이 가치가 있다는 것을 증명하기 위해서, 이 엘리베이터로 올라갈 수 있는 층의 개수를 세려고 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 빌딩의 높이 h가 주어진다. (1 ≤ h ≤ 10<sup>18</sup>)</p>

<p>둘째 줄에 a, b, c가 주어진다. (1 ≤ a, b, c ≤ 100,000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>동혁이가 제안한 엘리베이터를 가지고 이동할 수있는 층의 수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','15
4 7 9
','9
','SHORTEST_PATH'),
                                                                                                                (11415,'BAEKJOON','https://www.acmicpc.net/problem/3657',3657,'총격전','1초','128 MB',14,'<p>선영: "상근이가 총을 먼저 쐈어요!"</p>

<p>상덕: "아니에요. 희원이가 있는 쪽에서 총소리가 먼저 났어요!"</p>

<p>논쟁은 얼마 전에 있었던 큰 총격전에 대한 재판내내 계속 되었다. 다행히도 총격전에 참가한 모든 사람은 죽지 않았다. 하지만, 총이 발사된 순서는 모두가 동의하지 않았다. 모든 사람은 최대 한 발을 발사했다. 하지만, 모든 일이 너무나 빠르게 일어났다. 총이 발사된 순서를 알아내야 유죄와 무죄를 판결할 수 있기 때문에, 순서를 알아내는 것은 매우 중요하다.</p>

<p>갑자기 경찰관 현우가 논쟁에 끼어들었다.</p>

<p>현우: "난 총격전이 일어난 그 시점의 위성 사진을 가지고 있다. 너희들이 어디에 있는 지를 정확하게 알 수 있지. 상덕이는 상근이보다 희원이에게 매우 가깝게 있었고, 선영이는 상근이보다 희원이에게 조금 가깝게 있었군. 소리는 1초에 340m를 움직이지. 상덕이는 상근이가 총을 먼저 쐈다고 하더라도, 희원이의 총소리를 먼저 들었을 거야. 그런데, 선영이는 희원이에게 조금 가깝게 있었는데도&nbsp;상근이의 총소리를 먼저 들었네? 상근이가 제일 처음으로 총을 발사한 사람이네!"</p>

<p>위와 같은 상황이 주어졌을 때, 총을 발사한 순서를 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스의 개수는 최대 100개이다.</p>

<p>테스트 케이스의 첫째 줄에는 총격전에 연루된 사람의 수 n (2 ≤ n ≤ 100)과 진술의 수 m (1 ≤ m ≤ 1000) 이 주어진다.</p>

<p>다음 n개 줄에는 사람의 이름 S와 그 사람의 위치 x와 y가 주어진다. 이름은 길이가 최대 20이며, 알파벳 소문자와 대문자로만 이루어져 있다. 좌표는 원점으로부터 떨어진 거리이며 단위는 미터이다.</p>

<p>다음 m개 줄에는 각 사람의 진술 "S1 heard S2 firing before S3"가 주어진다. S1, S2, S3은 사람의 이름이며, S2 ≠ S3이다.</p>

<p>만약, 어떤 사람이 S2, S3로 언급된 적이 없으면, 그 사람은 총을 쏘지 않았다고 가정한다. 두 사람이 같은 장소에 있는 경우는 없다.</p>

<p>테스트 케이스는 정답에 영향을 주지 않기 위해 거리의 오차가 10<sup>-7</sup>보다 작게 만들어져 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스 마다 총을 쏜 순서를 출력한다. 만약, 가능한 순서가 여러 가지라면 "UNKNOWN"을 출력하고, 가능한 순서가 없는 경우에는 "IMPOSSIBLE"을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
4 2
BillyTheKid 0 0
Andy 10 0
John 19 0
Larry 20 0
Andy heard BillyTheKid firing before John
Larry heard John firing before BillyTheKid
2 2
Andy 0 0
Beate 0 1
Andy heard Beate firing before Andy
Beate heard Andy firing before Beate
3 1
Andy 0 0
Beate 0 1
Charles 1 3
Beate heard Andy firing before Charles
','BillyTheKid John
IMPOSSIBLE
UNKNOWN
','SHORTEST_PATH'),
                                                                                                                (11418,'BAEKJOON','https://www.acmicpc.net/problem/3660',3660,'열차 지연','5초','128 MB',20,'<p>작년에 알고스팟 운영진들은 ACM-ICPC 대전 대회에 가기 위해 기차를 타고 이동했다. 하지만, 이것은 곧 엄청난 재앙으로 이어졌다. 대전으로 갈 때는 대전역에 발생한 불로 인해 열차가 지연되었고, 서울로 돌아올 때는 서울에 대한 테러 위협때문에 기차가 엄청나게 지연되었다. 이러한 엄청난 열차의 지연은 다른 열차도 지연되게 만든다. 느린 열차를 타는 것과 급행 열차를 기다리는 것 중 어떤 것이 열차가 지연될 확률이 적을까?</p>

<p>올해 알고스팟 운영진들은 열차 스케줄을 분석하고 계획을 세우기로 했다. 그들은 기차가 얼마나 지연되고, 얼마나 자주 지연되는지를 조사했다. 이제 이 정보를 가지고 이동 시간의 기댓값이 가장 작은 열차를 타려고 한다.</p>

<p>각각의 열차에 대해서 알고스팟 운영진은 출발 시간과 소요 시간을 정확하게 알고 있다. 또, 그 열차가 지연될 확률도 알고 있다. 열차가 지연될 확률은 독립이고, 가는 도중에 지연되는 열차가 발생하면, 그 지연을 반영해서 여행 계획을 바꿀 수 있다.</p>

<p>열차는 항상 정시에 출발한다. 하지만, 도착 시간은 지연될 수 있다. 알고스팟 운영진은 열차가 지연될지 말지를 열차가 출발하기 전까지 알 수 없다. 알고스팟 운영진이 열차를 환승하는데 드는 시간은 0이다. 따라서, 열차가 도착한 시간과 동시에 출발하는 시간의 열차를 탈 수 있다.</p>

<p>알고스팟 운영진은 첫 기차를 타는 시간을 마음대로 정할 수 있다. 기차를 타고 이동하는데 드는 시간의 기댓값의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스의 개수는 100개를 넘지 않는다.</p>

<p>각 테스트 케이스의 첫째 줄에는 출발 도시의 이름과 도착 도시의 이름이 주어진다. 출발 도시와 도착 도시의 이름이 같은 경우는 없다. 그 다음 줄에는 열차의 수 n (1 ≤ n ≤ 1000)이 주어진다. 다음 n개의 줄에는 한 줄에 하나씩 열차의 정보가 주어진다.</p>

<p>열차의 정보는 다음과 같이 구성되어져 있다.</p>

<ul>
	<li>출발 도시와 도착 도시. 두 도시의 이름이 같은 경우는 없다.</li>
	<li>열차의 출발 시간 m (0 ≤ m ≤ 59). 열차는 항상 1시간에 한 편씩 있으며, m분에 출발한다.</li>
	<li>열차의 소요 시간 t ( 1 ≤ t ≤ 300). 열차가 지연되지 않았을 때 걸리는 시간이다.</li>
	<li>열차가 지연될 퍼센트 확률 p (0 ≤ p ≤ 100).</li>
	<li>열차의 최대 지연 시간 d (1 ≤ d ≤ 120). d의 단위는 분이다.</li>
</ul>

<p>모든 도시의 이름은 알파벳 대문자와 소문자로만 이루어져 있으며, 길이는 20을 넘지 않는다. 열차는 항상 정수 분 만큼 지연되며, 확률은 구간 [1, d]에 균일하게 분포되어 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해서 여행을 하는데 걸리는 시간의 기댓값의 최솟값을 출력한다.</p>

<p>만약, 도착 도시에 갈 수 없는 경우에는 "IMPOSSIBLE"을 출력하며, 소수점 오차는 10<sup>-6</sup>까지 허용한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>첫 번째 예제에서 서울에서 대전으로 이동할 때, 느린 열차를 타는 것이 더 좋다. 빠른 열차의 소요 시간의 기댓값은 70.25분이다.</p>

				</div>
				</div>','3
Seoul Daejeon
3
Seoul Daejeon 15 68 10 5
Seoul Daejeon 46 55 50 60
Daejeon Busan 14 226 10 120
Seoul Daejeon
1
Seoul Busan 10 22 5 10
Seoul Daejeon
9
Seoul Gwangmyeong 15 10 0 1
Seoul Gwangmyeong 45 10 0 1
Seoul Cheonan 23 140 10 15
Gwangmyeong Busan 44 51 60 70
Busan Incheon 55 147 38 40
Incheon Daejeon 24 15 30 15
Incheon Daejeon 54 15 10 35
Cheonan Anyang 45 140 5 10
Anyang Incheon 46 96 10 20','68.3
IMPOSSIBLE
305.0532857
','SHORTEST_PATH'),
                                                                                                                (11435,'BAEKJOON','https://www.acmicpc.net/problem/3860',3860,'할로윈 묘지','1초','128 MB',16,'<p>오늘은 할로윈이다. 상근이와 친구들은 할로윈을 기념하기 위해 묘지를 방문했다. 상근이와 친구들은 한 명씩 묘지로 들어가고, 혼자서 묘지의 출구를 찾아야 한다. 이제, 상근이의 차례가 돌아왔다.</p>

<p>상근이가 어렸을 적에 할머니는 상근이에게 할로윈 밤에 묘지에는 귀신 구멍이 나타난다고 말해주었다. 귀신 구멍으로 들어가면, 묘지의 다른 장소로 다시 나오게 된다. 이 구멍은 시간을 이동할 수 있는 구멍이다. 귀신 구멍에 떨어지면, 특정 시간이 지난 후(또는 이전)에 평행 우주의 다른 구멍에서 나오게 된다.&nbsp;</p>

<p>묘지는 W × H 크기의 그리드로 나타낼 수 있다. 묘지의 입구는 (0, 0)이고, 출구는 (W-1, H-1)이다. 상근이는 겁이 많기 때문에, 최대한 빨리 묘지를 나가려고 한다. 그리고 상근이는 이동하던 도중 출구에 도달하면 뒤도 돌아보지 않고 그 즉시 묘지를 빠져나갈 생각이다. 상근이는 현재 있는 칸과 동, 서, 남, 북으로 인접한 칸으로 이동할 수 있다. 각 칸은 잔디, 묘비, 또는 귀신 구멍이다.</p>

<ul>
	<li>묘비는 매우 높기 때문에, 묘비가 있는 칸으로는 이동할 수 없다.</li>
	<li>귀신 구멍이 있는 칸으로 이동하면, 특정 시간이 지난 후에 묘지의 다른 곳에서 상근이가 나타나게 된다. 시간은 귀신 구멍마다 다르며, 양수, 음수, 0 중 하나이다.</li>
	<li>잔디가 있는 칸으로는 자유롭게 이동할 수 있다.</li>
</ul>

<p>상근이는 묘지를 빨리 나가기 위해 귀신 구멍도 이용할 것이다. 묘지를 나갈 수 없는 경우나, 계속해서 과거로 이동하는 경우가 존재할 수도 있다.</p>

<p style="text-align: center;"><img alt="" src=https://www.acmicpc.net/upload/images/grave.png" style="height:271px; width:342px"></p>

<p>묘지가 위와 같이 생긴 경우(문제의 두 번째 예제)를 살펴보자. 묘비는 (2,1)와 (3,1)에 있고, 귀신 구멍은 0초만에 (3,0)로 들어가서 (2,2)에서 나오는 구멍 하나가 있다. 묘지를 빠져나오는데 걸리는 가장 빠른 시간은 4초이며, 다음과 같다.</p>

<p>(0,0) -> 동(1초) (1,0) -> 동(1초) (2,0) -> 동(1초) (3,0) -> 귀신구멍(0초) (2,2) -> 동(1초) (3,2)</p>

<p>귀신 구멍을 이용하지 않는다면 가장 빠른 시간은 5초이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 여러 개의 테스트 케이스로 이루어져 있다.</p>

<p>각 테스트 케이스의 첫째 줄에는 묘지의 너비 W와 높이 H가 주어진다. (1 ≤ W, H ≤ 30) 다음 줄에는 묘비의 개수 G (G ≥ 0)가 주어진다. 다음 G개 줄에는 묘비의 위치를 나타내는 두 정수 X와 Y가 주어진다. (0 ≤ X < W, 0 ≤ Y < H)</p>

<p>다음 줄에는 귀신 구멍의 수 E (E ≥ 0)가 주어진다. 다음 E개 줄에는 귀신 구멍의 정보를 나타내는 X1, Y1, X2, Y2, T 가 주어진다. (X1, Y1)은 귀신 구멍의 위치이고, (X2, Y2)는 그 귀신 구멍으로 들어갔을 때, 나오는 곳의 위치이다. (0 ≤ X1, X2 < W, 0 ≤ Y1, Y2 < H) (X1,Y1)과 (X2,Y2)가 같을 수도 있다. T는 귀신 구멍에서 나오는데 걸리는 시간이다. (-10,000 ≤ T ≤ 10,000) T가 양수인 경우에는 귀신 구멍을 들어간 이후에 나온다는 의미이다. 두 귀신 구멍이 같은 장소에 있거나, 구멍에서 나오는 지점이 묘비인 경우는 없다. 묘비와 귀신 구멍이 (0, 0)이나 (W-1, H-1)에 있는 경우는 없다.</p>

<p>입력의 마지막 줄에는 0 0이 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스 마다 상근이가 과거로 계속해서 돌아간다면 "Never"를 출력하고, 출구를 빠져나올 수 없으면 "Impossible"을 출력한다. 그 외의 경우에는 묘지를 빠져나오는데 가장 빠른 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
2
2 1
1 2
0
4 3
2
2 1
3 1
1
3 0 2 2 0
4 2
0
1
2 0 1 0 -3
0 0
','Impossible
4
Never
','SHORTEST_PATH'),
                                                                                                                (11442,'BAEKJOON','https://www.acmicpc.net/problem/4006',4006,'경로 찾기','2초','256 MB',20,'<p>TooDee는 직교좌표 시스템인 2차원 그리드-형태의 지역 이름이다. 이 지역에는 귀여운 Dee들이 살고 있다. Dee들은 벌처럼 생긴 작은 2-차원 모양의 생동물로서 아주 영리하다. TooDee에는 벌집들이 있는데, 이 벌집은 보통의 벌집과는 달리 직사각형 형태로 벌집의 각 변이 TooDee의 직교좌표의 축에 평행하다.</p>

<p>Dee들은 매우 특별히 진화된 동물이므로 일정한 경로로 날아간다. 이 경로는 직교좌표 축과 평행한 (수평 혹은 수직의) 선분들로 구성되며, 이 선분들의 양 끝 점의 좌표값은 모두 정수라 가정한다. 직교좌표 시스템 표기를 사용할 때, TooDee 지역에서 모든 Dee들이 날아가는 규칙은 다음과 같다. (TooDee 지역에서 언급되는 모든 점의 위치 값은 정수이다.)</p>

<p>현재 점 (X<sub>S</sub>,Y<sub>S</sub>)에 있다면, 인접한 4점 (즉, (X<sub>S</sub>+1,Y<sub>S</sub>), (X<sub>S</sub>-1,Y<sub>S</sub>), (X<sub>S</sub>,Y<sub>S</sub>+1), (X<sub>S</sub>,Y<sub>S</sub>-1))중 하나로 날아갈 수 있다.</p>

<p>벌집에는 들어갈 수 없다.</p>

<p>벌집의 변이나 꼭짓점 위에 있을 때만 날아가는 방향을 바꿀 수 있다.</p>

<p>처음에는 상하좌우 네 방향 중 임의의 하나의 방향을 선택하여 출발할 수 있다.</p>

<p>오늘 밤은 Deeficer(TooDee의 복지부 관리)의 딸 생일이므로 Deeficer는 사무실로부터 가능한 빨리 집으로 가고자 한다. Deeficer는 1초에 길이 1의 속도로 날아간다고 가정한다. 위의 규칙을 만족하면서 사무실로부터 가장 빨리 집으로 도착하는데 걸리는 시간(초)를 구하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 번째 줄에 테스트 시나리오의 수 T ( 1 ≤ T ≤ 20 ) 가 주어진다. 다음에 T개의 시나리오가 주어진다. 각 시나리오 앞에는 공백 줄이 있다.</p>

<p>각 시나리오의 첫 번째 줄에는 Deeficer의 사무실 위치와 집의 위치를 포함한다. 이들 각 위치는 X 좌표 값과 Y 좌표 값의 두 정수로 주어진다. 각 시나리오의 두 번째 줄에 벌집의 수 N이 주어진다. 다음의 N개의 각 줄에 벌집 하나의 정보가 주어진다. 이 정보는 벌집 직사각형의 대각선으로 마주보는 두 꼭짓점의 좌표들로 주어진다. 모든 두 벌집은 서로 겹치지 않으며, 두 벌집의 변이 붙어 있지도 않고, 두 벌집의 꼭짓점들이 만나지도 않는다. 사무실과 집의 위치는 서로 다르고, 벌집의 면적은 1 이상이다.</p>

<p>모든 좌표 값은 10<sup>-9</sup>보다 크거나 같고, 10<sup>9</sup>보다 작거나 같으며, 0 ≤ N ≤ 1000이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 시나리오에 대하여, Deeficer가 사무실로부터 집까지 가장 빨리 가는 경로에 의하여 걸리는 시간(초)를 한 줄에 출력한다. 날아가는 규칙을 지키면서 집으로 도달할 수 없으면 "No Path"를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2

1 7 7 8
2
2 5 3 8
4 10 6 7

2 1 5 4
1
3 1 4 3
','9
No Path
','SHORTEST_PATH'),
                                                                                                                (11476,'BAEKJOON','https://www.acmicpc.net/problem/4212',4212,'최단 비행 경로','5초','128 MB',26,'<p>통계상으로 상업 비행기는 꽤 안전하다. 초창기의 비행기는 기술적인 측면에서 현재의 비행기에 비해 엔진 신뢰성이 낮아서 항로상에서 인근 공항으로 부터 60분 이상 떨어져서 비행하는 것을 금지했기 때문이다. 지금도 다양한 규칙들이 존재하지만 핵심 내용은 이 "60분의 규칙"과 비슷하다. 비행기가 가장 가까운 공항에서 허용된 최대 거리 이상 멀어지면 안 된다는 것이다. 이러한 제약 사항 때문에 비행기가 곧바로&nbsp;공항까지 갈 수 없는 경우도 종종 있다.</p>

<p>우리는 최대 허용 거리를 준수하면서 주어진 두 공항 사이를 이동하는 최단 경로를 계산해야 한다. 아래 보이는 그림은 첫 번째 테스트 케이스에 대한 자료를 나타낸다. 비행기의 항로는 반드시 주어진 세개의 원 어딘가에 존재해야 하며 2번에서 3번 공항으로 이동하려면 반드시 1번 공항의 원을 거쳐야 한다. 비행기가 공항 1에 도착할 필요는 없다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/sfp.png" style="height:341px; width:380px"></p>

<p>비행기의 연료는 제한되어있기 때문에 최단 경로보다 긴 경로로 이동할 경우 연료 부족으로 도중에 착륙해야 할 수도 있다. 따라서 연료 용량에 따라 공항 1까지 가야 하는 경우가 생길 수도 있다. 공항 1까지 가는데 필요한 연료도 부족한 경우엔 도착지 까지 갈 수 없는 경우이다.</p>

<p>위와 같은 가정을 아래처럼 단순화 할 수 있다.</p>

<ol>
	<li>지구의 표면은 반경 6370 km 이다.</li>
	<li>시간과 연료 소비량은 모두 이동거리에 비례한다. 즉, 우리는 이동거리에만 관심이&nbsp; 있다.</li>
	<li>고도에 따른 거리 차이는 무시한다. 즉, 비행기가 표현에 따라 비행한다고 가정한다.</li>
	<li>비행기는 필요에 따라 중간 지점의 공항에서 연료를 공급받을 수 있다. 한번 공급받을때 연료를 모두 채운다.</li>
</ol>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>각 테스트 케이스의 첫 번째 줄에 정수 N 과 R 이 주어진다 (2 ≤ N ≤ 25, 1 ≤ R ≤ 10 000). N은 공항의 수 이고 R은 최대 허용 거리(km)이다. 다음 N개의 줄에는 공항의 경도와 위도를 나타내는 정수 Φ, θ가 주어진다(0 ≤ Φ < 360, -90 ≤ θ ≤ 90). 공항의 번호는 각각 1부터 입력받은 순서로주어지며 두 공항이 같은 위치에 있는 경우는 없다.</p>

<p>이어지는 줄에는 정수 Q가 주어진다 (1 ≤ Q ≤ 100). 각각의 Q개의 줄에는 출발 공항 번호, 도착 공항 번호, 연료의 용량(최대 연료 이동할 수 있는 거리)을 나타내는 세개의 정수 s, t, c가 주어진다 (1 ≤ s,&nbsp; t ≤ N, s ≠ t,&nbsp; 1 ≤ c ≤ 50 000).&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 테스트 케이스 첫 번째 줄에 예제와 같이 테스트 케이스의 번호를 출력한다. 뒤이어 한줄씩 s, t, c를 만족하는 최단 비행 경로를 소숫점 셋째 자리 까지 출력한다. 가능한 경로가 존재하지 않다면 "impossible" 을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 2000
0 0
0 30
30 0
3
2 3 5000
2 3 4000
2 3 3000
2 10000
45 45
225 -45
2
1 2 50000
2 1 50000
','Case 1:
4724.686
6670.648
impossible
Case 2:
impossible
impossible
','SHORTEST_PATH'),
                                                                                                                (11477,'BAEKJOON','https://www.acmicpc.net/problem/4485',4485,'녹색 옷 입은 애가 젤다지?','1초','256 MB',12,'<p>젤다의 전설 게임에서 화폐의 단위는 루피(rupee)다. 그런데 간혹 도둑루피라 불리는 검정색 루피도 존재하는데, 이걸 획득하면 오히려 소지한 루피가 감소하게 된다!</p>

<p>젤다의 전설 시리즈의 주인공, 링크는 지금 도둑루피만 가득한 N x N 크기의 동굴의 제일 왼쪽 위에 있다. [0][0]번 칸이기도 하다. 왜 이런 곳에 들어왔냐고 묻는다면 밖에서 사람들이 자꾸 "젤다의 전설에 나오는 녹색 애가 젤다지?"라고 물어봤기 때문이다. 링크가 녹색 옷을 입은 주인공이고 젤다는 그냥 잡혀있는 공주인데, 게임 타이틀에 젤다가 나와있다고 자꾸 사람들이 이렇게 착각하니까 정신병에 걸릴 위기에 놓인 것이다.</p>

<p>하여튼 젤다...아니 링크는 이 동굴의 반대편 출구, 제일 오른쪽 아래 칸인 [N-1][N-1]까지 이동해야 한다. 동굴의 각 칸마다 도둑루피가 있는데, 이 칸을 지나면 해당 도둑루피의 크기만큼 소지금을 잃게 된다. 링크는 잃는 금액을 최소로 하여 동굴 건너편까지 이동해야 하며, 한 번에 상하좌우 인접한 곳으로 1칸씩 이동할 수 있다.</p>

<p>링크가 잃을 수밖에 없는 최소 금액은 얼마일까?</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 여러 개의 테스트 케이스로 이루어져 있다.</p>

<p>각 테스트 케이스의 첫째 줄에는 동굴의 크기를 나타내는 정수 N이 주어진다. (2 ≤ N ≤ 125) N = 0인 입력이 주어지면 전체 입력이 종료된다.</p>

<p>이어서 N개의 줄에 걸쳐 동굴의 각 칸에 있는 도둑루피의 크기가 공백으로 구분되어 차례대로 주어진다. 도둑루피의 크기가 k면 이 칸을 지나면 k루피를 잃는다는 뜻이다. 여기서 주어지는 모든 정수는 0 이상 9 이하인 한 자리 수다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스마다 한 줄에 걸쳐 정답을 형식에 맞춰서 출력한다. 형식은 예제 출력을 참고하시오.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
5 5 4
3 9 1
3 2 7
5
3 7 2 0 1
2 8 0 9 1
1 2 1 8 1
9 8 9 2 0
3 6 5 1 5
7
9 0 5 1 1 5 3
4 1 2 1 6 5 3
0 7 6 1 6 8 5
1 1 7 8 3 2 3
9 4 0 7 6 4 1
5 8 3 2 4 8 3
7 4 8 4 8 3 4
0
','Problem 1: 20
Problem 2: 19
Problem 3: 36
','SHORTEST_PATH'),
                                                                                                                (11484,'BAEKJOON','https://www.acmicpc.net/problem/4503',4503,'구슬','1초','128 MB',18,'<p><img alt="" src=https://www.acmicpc.net/upload/images/mbr.png" style="float:right; height:374px; width:200px">구슬 26개(회색 13개, 노란색 13개)가 오른쪽 그림과 같이 두 원에 놓여있다. 각각의 원에 있는 구슬은 시계방향이나 반시계방향으로 자유롭게 돌릴 수 있다.</p>



<p>위쪽 원과 아래쪽 원은 작은 원으로 연결되어 있다. 이 원은 항상 180도씩 돌릴 수 있으며, 위쪽 구슬 3개와 아럐쪽 구슬 3개의 위치를 서로 바꾼다.</p>



<p>상근이는 위에는 회색 구슬, 아래에는 노란색 구슬만 있게 만들고한다. 이때, 가운데 원을 돌리는 회수의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있고, 각 원에 있는 조약돌의 색상이 주어진다. 모든 줄은 y 13개와 g 13개의 순열이다.&nbsp;</p>



<p>각 줄의 처음 13개 문자는 위쪽 원에 있는 구슬의 색상을 시계방향으로 나타낸 것이고, 나머지는 아래쪽 원의 정보이다. y는 노란색, g는 회색을 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해서, 위에는 회색 구슬, 아래에는 노란색 구슬만 넣을 때, 가운데 원을 돌리는 회수의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','gggggggggggggyyyyyyyyyyyyy
yyyyyggggggggyyyygggggyyyy
gyyygyggyyygyyggyyggggyygg
ygygygygygygygygygygygygyg
','0
2
5
6
','SHORTEST_PATH'),
                                                                                                                (11517,'BAEKJOON','https://www.acmicpc.net/problem/5004',5004,'파워 블로거','1초','128 MB',26,'<p>선영이는 블로그에 음식점 리뷰를 올리는 파워 블로거이다. 음식점 리뷰를 몇 년동안 하루에 몇 개씩 하다보니, 이제 지구에 있는 모든 음식점의 리뷰를 작성했다.</p>

<p>이제, 기내식 리뷰를 작성할 차례이다. 선영이는 사람들이 자신의 기내식 리뷰를 보고 항공편을 고르는 효과를 기대하고 있다.</p>

<p>이번 기내식 리뷰는 코스모폴리탄 다음 호에도 올라갈 예정이다. 코스모폴리탄의 편집장인 상근이는 선영이에게 기내식 리뷰를 해야하는 항공편 리스트를 주었다. 선영이는 출발과 도착 도시가 같은 각 항공편은 같은 기내식을 제공한다는 사실을 알고 있다. 따라서, 한 번만 타면 된다.</p>

<p>상근이가 준 리스트에 있는 항공편만 이용해서는 모든 리뷰를 할 수 없다. 따라서, 선영이는 비행기를 조금 더 예매하려고 한다. 이렇게 예매를 한 비행기의 기내식은 리뷰를 하지 않고, 리스트에 있는 기내식만 리뷰를 한다.</p>

<p>선영이는 모든 리뷰를 작성하면서 드는 비행기 티켓에 쓰는 돈을 최소로 하려고 한다. 선영이의 사무실은 스톡홀롬에 있고, 이 곳에서 여행이 시작되고 끝이 난다. 두 도시를 운항하는 비행기 티켓의 가격은 고정되어 있으며, 양방향 모두 같다. 항상 모든 리뷰를 완료하는 것이 가능하다.</p>

<p>선영이가 이용하는 호텔의 비용, 비행기의 출발과 도착 시간은 무시할 수 있고, 비행기는 매우 자주 운항하며 비행 시간은 매우 작다고 가정한다. 따라서, 비행기 티켓의 가격만 생각하고 문제를 풀면 된다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 R이 주어진다. N은 공항의 수, R은 리뷰를 작성해야 하는 항공편의 수이다. 공항은 1부터 N까지 번호가 매겨져 있고, 스톡홀롬의 번호는 1이다. (2 ≤ N ≤ 13, 0 ≤ R ≤ 78)</p>

<p>다음 R개 줄에는 리뷰를 작성해야 하는 항공편의 정보이다. 각 줄은 3개의 정수 a, b, c로 이루어져 있으며, a와 b는 서로 다른 두 공항을, c는 비행기 티켓 가격이다. (1 ≤ a, b ≤ N, 1 ≤ c ≤ 10,000) 두 도시를 운항하는 비행기의 수는 한 개를 넘지 않는다.</p>

<p>다음 줄에는 선영이가 추가적으로 이용할 수 있는 항공편의 수 F가 주어진다. (0 ≤ F ≤ 200) 다음 F개 줄에는 위와 같은 형식으로 정보가 주어진다. 두 도시를 운항하는 비행기의 수가 여러 개일 수도 있다.</p>

<p>항상 리뷰를 모두 작성할 수 있는 경우만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>선영이가 모든 리뷰를 작성하고 스톡홀롬으로 돌아오는데 드는 비행기 티켓의 값의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 3
1 2 1000
2 3 1000
4 5 500
2
1 4 300
3 5 300
','3100
','SHORTEST_PATH'),
                                                                                                                (6655,'BAEKJOON','https://www.acmicpc.net/problem/5250',5250,'최단 경로들','1초','128 MB',23,'<p>Nikola는 Bit 마을에 살고 있고 Hex 마을에&nbsp;사는 Anita의 남자친구이다. Nikola는 주변 지도를 아주 잘 알고 있어서 두 마을 사이의 최단 경로를 찾았다. 그리고 이 경로를 운 좋은 경로라고 부르기로 했다. 주변 지도는 서로 다른 마을을 잇는 양방향 도로의 집합으로 표현된다.</p>

<p>어떤 날, 이 나라의 대통령이 도로에 공사를 하기로 했다. 나라의 교통을 유지하기 위하여, 오직 하루에 하나의 도로만 닫기로 했다.</p>

<p>운 좋은 경로에 있는 도로에 대해서, Nikola는 그 도로가 닫혔을 때 Anita와의 최단 경로의 길이를 알고 싶어 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫째 줄은 4개의 정수로 이루어진다: n - 도시의 개수; m - 도로의 개수; a - Bit 마을(Nikola가 살고 있는 마을)의 번호; b - Hex 마을(Anita가 살고 있는 마을)의 번호.</p>

<p>마을들에는 1부터 n까지의 번호가 부여된다. 다음 m개의 줄은 u, v, w 3개의 정수를 포함하며 도로에 대한 정보를 준다: 마을 u와 마을 v는 길이 w의 도로로 이어져 있다.</p>

<p>입력의 마지막 줄은 숫자 k와 k개의 숫자(v<sub>1</sub>(=a), v<sub>2</sub>, …, v<sub>k</sub>(=b))로 이루어 지고, Nikola의 운 좋은 경로를 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 정수 t = 1 … k ? 1에 대해, 각 줄마다 도로 (v<sub>t</sub>, v<sub>t+1</sub>)가 닫혔을 경우에 마을 a와 마을 b 사이의 최단 경로의 길이를 출력하라. 만약 경로가 없다면 -1을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/8b9e4508-3f71-4f17-8c55-10b83e99c320/-/preview/" style="width: 333px; height: 127px;"></p>

				</div>
				</div>','5 6 1 5
1 2 1
2 3 3
2 5 100
3 4 3
3 5 5
4 5 3
4 1 2 3 5
','-1
101
10
','SHORTEST_PATH'),
                                                                                                                (11557,'BAEKJOON','https://www.acmicpc.net/problem/5529',5529,'저택','1초','256 MB',17,'<p>상근이는 매우 큰 저택에 갇혔다. 이 저택은 정사각형 모양의 방이 격자 모양으로 배치되어 있고, N행 M열 형태이다. 왼쪽으로부터 x(1 ≤ x ≤ M)번째, 아래쪽으로부터 y(1 ≤ y ≤ N)번째 방을 (x,y)라고 한다.</p>

<p>모든 인접한 방의 사이에는 문이 있다. 문은 열려있을 수도 있고, 닫혀있을 수도 있다. 다른 방으로 이동하는데 걸리는 시간(문을 통과하는데 걸리는 시간)은 1분이다. 상근이는 항상 열려있는 문으로만 이동할 수 있고, 개폐 상태를 바꿀 수는 없다.</p>

<p>어떤 방의 중앙에는 스위치가 있다. 이 스위치를 1분동안 누르고 있으면, 집에 있는 모든 문의 개폐 상태가 바뀌게 된다. 즉, 열려있던 문은 닫히게 되고, 닫혀있던 문은 열리게 된다.</p>

<p>저택의 크기와 스위치가 있는 방의 정보가 주어진다. 상근이는 지금 (1,1)방의 중앙에 있고, (M,N)방의 중앙으로 이동하려고 한다. 이때, 이동할 수 있는 가장 빠른 시간을 구하는 프로그램을 작성하시오.&nbsp;</p>

<p>가장 처음에 위아래로 인접한 방의 문만 열려있고, 나머지 문은 모두 닫혀있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 집의 크기 M, N과 스위치가 있는 방의 수 K가 주어진다. 둘째 줄부터 K개 줄에는 스위치가 있는 방의 위치 (x<sub>i</sub>, y<sub>i</sub>)가 주어진다.&nbsp;(2 ≤ M,N ≤ 100,000, 1 ≤ K ≤ 200,000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 가장 빠른 시간을 출력한다. 만약, (M,N)에 도착할 수 없는 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 2 1
1 2
','4
','SHORTEST_PATH'),
                                                                                                                (6661,'BAEKJOON','https://www.acmicpc.net/problem/5542',5542,'JOI 국가의 행사','1초','128 MB',21,'<p>JOI 국에는 N개의 도시가 있다. 이 도시들 사이에는 M개의 도로가 있는데 이 도로는 양방향으로 통행이 가능한 도로이다. 모든 도시들은 연결되어 있다.</p>

<p>현재 JOI국의 K개의 도시들에서 축제가 벌어지고 있다. JOI국의 국민들은 축제를 좋아하는 사람들도 있지만 그 분위기를 매우 싫어하는 국민들도 제법 있다.</p>

<p>축제를 싫어하는 사람 Q명이 도시들 사이를 이동하려고 한다. 출발도시와 도착도시가 주어질 때, 출발도시와 도착도시가 주어질 때, 이동하는 경로에 있는 도시들 중 축제하는 도시와 가장 가까운 도시와의 거리가 최대가 되도록 원하는 도시로 가는 방법을 구하여라. 단, 축제하는 도시와 임의의 도시와의 거리는 두 지점간의 최단경로로 계산한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 N, 도로의 수 M, 축제를 여는 도시의 수 K, 축제를 싫어하는 사람의 수 Q가 공백으로 구분되어 입력된다.</p>

<p>다음 줄부터 M줄에 걸쳐서 각 도로의 정보 출발점, 도착점, 거리가 공백으로 구분되어 입력된다. 거리는 1 이상 1000 이하이다.</p>

<p>다음 줄 부터 K줄에 걸쳐서 축제를 하는 도시의 번호가 한 줄에 하나씩 입력된다. 축제를 하는 도시의 번호는 중복되지 않는다.</p>

<p>다음 줄부터 Q줄에 걸쳐서 축제를 싫어하는 사람이 출발하는 출발지와 도착지가 한 줄에 하나씩 공백으로 구분되어 입력된다. 출발지와 도착지는 서로 다르다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>Q줄에 걸쳐서 입력받은 순서대로 각 사람이 이동하는데 축제하는 도시와의 최대거리를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="" src="https://www.acmicpc.net/upload/images3/king1.png" style="height:92px; width:391px" title=""></p>

<p>예제 1. 3에서 4로 가는 경우는 3-5-4로 이동하면 가장 가까운 축제가 6번이고 거리는 7이다. 이 값이 최대이고, 5에서 2로 가는 경우는 5-3-2, 5-4-2 모두 1번 축제와 거리 5가 되므로 이 값을 출력한다. 마지막으로 1에서 4로 가는 경우는 1이 축제지 이므로 축제지와의 최대거리는 0이된다.</p>

<p>&nbsp;</p>

<p style="text-align:center"><img alt="" src="https://www.acmicpc.net/upload/images3/king2.png" style="height:219px; width:375px"></p>

<p style="text-align: center;">예제 2.</p>

				</div>
				</div>','6 6 2 3
1 2 5
2 3 4
2 4 6
3 5 9
4 5 3
5 6 7
1
6
3 4
5 2
1 4
','7
5
0
','SHORTEST_PATH'),
                                                                                                                (11558,'BAEKJOON','https://www.acmicpc.net/problem/5551',5551,'쇼핑몰','1초','128 MB',16,'<p>상근이가 지배하는 나라에는 도시가 N개 있고, 도시는 M개의 양방향 도로로 연결되어 있다. 이 중 K개 도시에는 쇼핑몰이 있고, 국민은 도로를 통해서 쇼핑몰이 있는 마을로 가고, 쇼핑을 한다.</p>

<p>쇼핑몰이 멀리 떨어져 있는 사람은 쇼핑몰로 가기 위해 긴 시간 운전을 해야 한다. 상근이는 실정을 파악하기 위해서 쇼핑몰과 집의 최단 거리가 집의 위치에 따라서 어떻게 달라지는지 구하기로 한다. 집은 도시에 있을 수도 있고, 도로 위에 있을 수도 있다.</p>

<p>도로의 정보와 쇼핑몰이 있는 도시가 주어졌을 때, 쇼핑몰이 있는 도시와 가장 먼 거리에 있는 집까지의 거리를 구하는 프로그램을 작성하시오. 도시 속을 이동하는데 걸리는 시간은 0이다. 또, 사람들은 항상 최단 경로를 이용한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 N, 도로의 수 M, 쇼핑몰이 있는 도시의 수 K가 주어진다. 도시는 1번부터 N번까지 번호가 매겨져 있다. (2 ≤ N ≤ 3000, 1 ≤ M ≤ 10<sup>5</sup>, 1 ≤ K ≤ N)</p>

<p>다음 M개 줄에는 도로의 정보 a, b, l이 주어진다. a와 b를 잇는 도로의 길이가 l(1 ≤ l&nbsp;≤ 1000)임을 의미하며, a와 b가 같은 경우는 없다. 두 도시 p와 q에 대해서, 두 도시를 잇는 도로는 2개 이상 존재하지 않는다. 항상 도로를 이용해서 모든 도시로 이동할 수 있다.</p>

<p>다음 K개 줄에는 쇼핑몰이 있는 도시의 번호가 주어진다. 한 도시에 쇼핑몰이 여러 개 있을 수는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>쇼핑몰이 있는 곳에서 가장 멀리 떨어져 있는 집과의 거리(쇼핑몰과 집의 최단 거리의 최솟값)를 소수점 첫째자리에서 반올림해서 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1의 경우에 도로의 길이는 모두 1이고, 쇼핑몰은 1번 도시에만 있다. 쇼핑몰과 가장 먼 거리에 있는 집의 위치는 2번 도시와 3번 도시를 연결하는 도로에서 2번 도시와 거리가 0.5만큼 떨어져 있는 위치 위에 있는 곳이다. 이 집과 쇼핑몰의 거리는 1.5이다. 따라서, 반올림하면 2가 된다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/71c6d184-00c8-4046-985f-5504caa88823/-/preview/" style="width: 221px; height: 181px;"></p>

				</div>
				</div>','3 3 1
1 2 1
2 3 1
3 1 1
1
','2
','SHORTEST_PATH'),
                                                                                                                (11568,'BAEKJOON','https://www.acmicpc.net/problem/5719',5719,'거의 최단 경로','1초','256 MB',16,'<p>요즘 많은 자동차에서는 GPS 네비게이션 장비가 설치되어 있다. 네비게이션은 사용자가 입력한 출발점과 도착점 사이의 최단 경로를 검색해 준다. 하지만, 교통 상황을 고려하지 않고 최단 경로를 검색하는 경우에는 극심한 교통 정체를 경험할 수 있다.</p>

<p>상근이는 오직 자기 자신만 사용 가능한 네비게이션을 만들고 있다. 이 네비게이션은 절대로 최단 경로를 찾아주지 않는다. 항상 거의 최단 경로를 찾아준다.</p>

<p>거의 최단 경로란 최단 경로에 포함되지 않는 도로로만 이루어진 경로 중 가장 짧은 것을 말한다.&nbsp;</p>

<p>예를 들어, 도로 지도가 아래와 같을 때를 생각해보자. 원은 장소를 의미하고, 선은 단방향 도로를 나타낸다. 시작점은 S, 도착점은 D로 표시되어 있다. 굵은 선은 최단 경로를 나타낸다. (아래 그림에 최단 경로는 두 개가 있다)거의 최단 경로는 점선으로 표시된 경로이다. 이 경로는 최단 경로에 포함되지 않은 도로로 이루어진 경로 중 가장 짧은 경로이다. 거의 최단 경로는 여러 개 존재할 수도 있다. 예를 들어, 아래 그림의 길이가 3인 도로의 길이가 1이라면, 거의 최단 경로는 두 개가 된다. 또, 거의 최단 경로가 없는 경우도 있다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/almost.png" style="height:174px; width:265px"></p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스의 첫째 줄에는 장소의 수 N (2 ≤ N ≤ 500)과 도로의 수 M (1 ≤ M ≤ 10<sup>4</sup>)가 주어진다. 장소는 0부터 N-1번까지 번호가 매겨져 있다. 둘째 줄에는 시작점 S와 도착점 D가 주어진다. (S ≠ D; 0 ≤ S, D < N) 다음 M개 줄에는 도로의 정보 U, V, P가 주어진다. (U ≠ V ; 0 ≤ U, V < N; 1 ≤ P ≤ 10<sup>3</sup>) 이 뜻은 U에서 V로 가는 도로의 길이가 P라는 뜻이다. U에서 V로 가는 도로는 최대 한 개이다. 또, U에서 V로 가는 도로와 V에서 U로 가는 도로는 다른 도로이다.&nbsp;</p>

<p>입력의 마지막 줄에는 0이 두 개 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해서, 거의 최단 경로의 길이를 출력한다. 만약, 거의 최단 경로가 없는 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','7 9
0 6
0 1 1
0 2 1
0 3 2
0 4 3
1 5 2
2 6 4
3 6 2
4 6 4
5 6 1
4 6
0 2
0 1 1
1 2 1
1 3 1
3 2 1
2 0 3
3 0 2
6 8
0 1
0 1 1
0 2 2
0 3 3
2 5 3
3 4 2
4 1 1
5 1 1
3 0 1
0 0
','5
-1
6
','SHORTEST_PATH'),
                                                                                                                (11578,'BAEKJOON','https://www.acmicpc.net/problem/5822',5822,'악어의 지하 도시','2초','256 MB',20,'<p>고고학자 철수는 악어의 신비한 지하 도시를 탐험하다가 위험을 느끼고 도망치게 되었다. 지하 도시는 N 개의 방으로 구성되어 있다. 방들을 연결하는 M 개의 복도가 있는데, 각 복도는 서로 다른 두 방을 연결하며, 같은 쌍의 방을 연결하는 복도는 최대 1 개이다. 복도를 통과하는데 걸리는 시간은 복도마다 다를 수 있다. N 개의 방들 중 K 개는 바로 탈출이 가능한 “탈출방”이다. 철수는 최초에 방 0 에 있다. 철수는 최대한 빨리 탈출방으로 가려고 한다.</p>

<p>악어 문지기는 철수가 탈출하는 것을 막으려고 한다. 문지기는 복도 중 임의의 하나를 막을 수 있는 방법이 있다. 어떤 시점이든 단 하나만 막을 수 있다. 즉, 문지기가 새로운 복도를 막으면 이전에 막았던 복도는 열린다.</p>

<p>철수의 상황을 좀더 자세히 설명하면 다음과 같다: 철수가 어떤 방을 떠나려고 할 때 문지기는 그 방과 연결된 복도들 중 하나를 막을 수 있다. 철수는 막히지 않은 복도 중 하나를 골라서 다른 방으로 이동한다. 철수가 복도에 일단 들어가고 나면 철수가 이동을 완료할 때 까지는 문지기가 이 복도를 막을 수 없다. 철수가 다른 방에 들어가고 나면 문지기는 (방금 지나온 복도도 당연히 포함하여) 또 다른 복도를 막을 수 있고, 이런 식으로 반복된다.</p>

<p>철수는 탈출 계획을 미리 정해 놓기를 원한다. 정확히 말하자면, 각 방 마다, 그 방에 도착하면 어떤 식으로 행동해야 하는 지의 계획이 미리 정해져 있어야 한다. A 가 어떤 방이라고 하자. 만약 A 가 탈출방이라면 바로 탈출하면 되므로 별다른 계획이 필요하지 않다. A 가 탈출방이 아니라면 A 에 대해서는 다음 중 한가지 형태의 계획이 있어야 한다.</p>

<ul>
	<li>만약 A 에 있다면 방 B 로 이동하는 것이 우선이다. 만약 그 쪽 복도가 막혀 있으면 방 C 로 이동하라.</li>
	<li>이 계획 하에서는 A 에 절대 도달할 수 없으므로, 아무 계획이 없음.</li>
</ul>

<p>어떤 경우에는 (예를 들어 어떤 계획하에서 철수가 싸이클을 도는 경우 등) 문지기가 탈출이 영원히 불가능하도록 만들 수도 있다는 점에 주의하라. 어떤 탈출 계획이 문지기가 어떤 작전을 쓰던지 철수가 유한한 시간 안에 탈출하는 것이 가능하다는 것을 보장하면 그 계획은 "좋은" 계획이라고 부른다. 어떤 좋은 계획 하에서, 철수가 그 시간이 지난 후에는 반드시 탈출한다고 보장할 수 있는 최소의 시간을 T 라고 하자. 그 경우, 그 좋은 계획의 “탈출 시간”은 T 라고 말한다.</p>

<p>다음의 파라미터를 받는 함수 travel_plan(N, M, R, L, K, P)를 작성하라.</p>

<ul>
	<li>N - 방의 수. 방은 0 부터 N-1 까지 번호가 붙어 있다.</li>
	<li>M - 복도의 수. 복도는 0 부터 M-1 까지 번호가 붙어 있다.</li>
	<li>R - 복도들을 표현하는 정수의 2 차원 배열. 각 i(0≤i<M)에 대해서 복도 i 는 방 R[i][0]와 방 R[i][1]를 연결한다. 동일한 쌍의 방들을 연결하는 복도는 최대 하나이다.</li>
	<li>L - 복도를 통과하는데 걸리는 시간을 저장한 일차원 배열. 각 i(0≤i<M)에 대해서 L[i](1≤L[i]≤1,000,000,000)의 값은 철수가 복도 i 를 통과하는 데 걸리는 시간이다.</li>
	<li>K - 탈출방의 수. (1≤K<N)</li>
	<li>P - 탈출방의 번호들을 가지는 크기 K 인 정수의 일차원 배열. 각 i(0≤i<K)에 대해서 P[i]는 i 번째 탈출방의 번호이다. 방 0 는 탈출방에 포함되지 않는다. (P 에 있는 값들은 모두 다르다.)</li>
</ul>

<p>당신의 함수는 좋은 계획이 존재하는 탈출 시간의 최솟값 T 를 리턴해야 한다. 탈출방이 아닌 방은 최소한 2 개의 복도가 연결되어 있다고 가정해도 좋다. 또한, 모든 경우에 T ≤ 1,000,000,000 이하인 좋은 계획이 존재한다고 가정해도 좋다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N, M, K가 주어진다. 둘째 줄부터 M개 줄에는 R[i][0], R[i][1], L[i]가 주어진다. 다음 K개 줄에는 P[i]가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>travel_plan(N, M, R, L, K, P)의 리턴값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 4 3
0 1 2
0 2 3
3 2 1
2 4 4
1
3
4
','7
','SHORTEST_PATH'),
                                                                                                                (11604,'BAEKJOON','https://www.acmicpc.net/problem/5972',5972,'택배 배송','1초','128 MB',11,'<p>농부 현서는 농부 찬홍이에게 택배를 배달해줘야 합니다. 그리고 지금,&nbsp;갈 준비를 하고 있습니다. 평화롭게 가려면 가는 길에 만나는 모든 소들에게 맛있는 여물을 줘야&nbsp;합니다. 물론 현서는 구두쇠라서 최소한의&nbsp;소들을 만나면서 지나가고 싶습니다.</p>

<p>농부 현서에게는 지도가 있습니다.&nbsp;N&nbsp;(1 <= N <= 50,000) 개의 헛간과, 소들의 길인 M (1 <= M&nbsp;<= 50,000) 개의 양방향 길이 그려져 있고,&nbsp;각각의 길은 C_i (0 <= C_i&nbsp;<= 1,000) 마리의 소가&nbsp;있습니다. 소들의 길은 두 개의 떨어진 헛간인&nbsp;A_i 와&nbsp;B_i (1 <= A_i <= N; 1 <= B_i <= N; A_i != B_i)를 잇습니다. 두&nbsp;개의 헛간은 하나 이상의 길로 연결되어 있을 수도 있습니다. 농부 현서는 헛간 1에 있고 농부 찬홍이는 헛간 N에 있습니다.</p>

<p>다음 지도를 참고하세요.</p>

<pre>           [2]---
          / |    \
         /1 |     \ 6
        /   |      \
     [1]   0|    --[3]
        \   |   /     \2
        4\  |  /4      [6]
          \ | /       /1
           [4]-----[5]
                3  </pre>

<p>농부 현서가 선택할 수 있는&nbsp;최선의 통로는&nbsp;1 -> 2 -> 4 -> 5 -> 6 입니다. 왜냐하면 여물의 총합이 1 + 0 + 3 + 1 = 5 이기 때문입니다.</p>

<p>농부 현서의 지도가 주어지고,&nbsp;지나가는 길에 소를 만나면 줘야할 여물의 비용이 주어질 때 최소 여물은 얼마일까요?&nbsp;농부 현서는&nbsp;가는 길의 길이는 고려하지 않습니다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 M이 공백을 사이에 두고 주어집니다.</p>

<p>둘째 줄부터 M+1번째 줄까지 세 개의 정수&nbsp;A_i, B_i,&nbsp;C_i가 주어집니다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 농부 현서가 가져가야 될 최소 여물을 출력합니다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 8
4 5 3
2 4 0
4 1 4
2 1 1
5 6 1
3 6 2
3 2 6
3 4 4
','5
','SHORTEST_PATH'),
                                                                                                                (11622,'BAEKJOON','https://www.acmicpc.net/problem/6087',6087,'레이저 통신','1초','128 MB',13,'<p>크기가 1×1인 정사각형으로 나누어진 W×H 크기의 지도가 있다. 지도의 각 칸은 빈 칸이거나 벽이며, 두 칸은 <code>C</code>로 표시되어 있는 칸이다.</p>

<p><code>C</code>로 표시되어 있는 두 칸을 레이저로 통신하기 위해서 설치해야 하는 거울 개수의 최솟값을 구하는 프로그램을 작성하시오. 레이저로 통신한다는 것은 두 칸을 레이저로 연결할 수 있음을 의미한다.</p>

<p>레이저는 C에서만 발사할 수 있고, 빈 칸에 거울(<code>/</code>, <code>\</code>)을 설치해서 방향을 90도 회전시킬 수 있다. </p>

<p>아래 그림은 H = 8, W = 7인 경우이고, 빈 칸은 <code>.</code>, 벽은 <code>*</code>로 나타냈다. 왼쪽은 초기 상태, 오른쪽은 최소 개수의 거울을 사용해서 두 <code>C</code>를 연결한 것이다.</p>

<pre>7 . . . . . . .         7 . . . . . . .
6 . . . . . . C         6 . . . . . /-C
5 . . . . . . *         5 . . . . . | *
4 * * * * * . *         4 * * * * * | *
3 . . . . * . .         3 . . . . * | .
2 . . . . * . .         2 . . . . * | .
1 . C . . * . .         1 . C . . * | .
0 . . . . . . .         0 . \-------/ .
  0 1 2 3 4 5 6           0 1 2 3 4 5 6
</pre>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 W와 H가 주어진다. (1 ≤ W, H ≤ 100)</p>

<p>둘째 줄부터 H개의 줄에 지도가 주어진다. 지도의 각 문자가 의미하는 것은 다음과 같다.</p>

<ul>
	<li><code>.</code>: 빈 칸</li>
	<li><code>*</code>: 벽</li>
	<li><code>C</code>: 레이저로 연결해야 하는 칸</li>
</ul>

<p><code>C</code>는 항상 두 개이고, 레이저로 연결할 수 있는 입력만 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 C를 연결하기 위해 설치해야 하는 거울 개수의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','7 8
.......
......C
......*
*****.*
....*..
....*..
.C..*..
.......
','3
','SHORTEST_PATH'),
                                                                                                                (11689,'BAEKJOON','https://www.acmicpc.net/problem/6595',6595,'프로거','1초','128 MB',13,'<p>Freddy Frog는 호수 한 가운데 돌에 앉아 있다. 그는 불현듯&nbsp;또 다른 돌에 앉아 있는&nbsp;Fiona Frog를 인식했다. 그는 그녀에게 갈 계획을 세웠지만, 물이 더럽고 관광객의 선크림으로 가득 차있었기 때문에, 그는 수영을 하지 않고 점프를 통해그녀에게 가고자 했다.&nbsp;</p>

<p>불행히도 Fiona의&nbsp;돌은 점프 범위를 벗어나 있다. 그러므로&nbsp;Freddy는 다른 돌을 거쳐 여러 번의&nbsp;점프로 그녀에게 가기로 마음 먹었다.</p>

<p>주어진 순서로 점프하기&nbsp;위해, frog의&nbsp;점프 범위는 적어도 순서의&nbsp;가장 멀리 먼 거리의 점프만큼은 되어야 한다.</p>

<p>두 돌 사이의&nbsp;the&nbsp;frog distance (사람들이&nbsp;최소 거리라 부르는) 는 모든 가능한 두 돌 사이의 경로의&nbsp;필요한&nbsp;최소한의 점프 범위로 정의할 수 있다.</p>

<p>당신은 주어진&nbsp;Freddy의&nbsp;돌, Fiona의 돌 그리고 호수의 모든 다른 돌을 좌표로 받게 된다. 당신의 일은 Freddy 돌과 Fiona&nbsp;돌의&nbsp;the frog distance를 계산하는 것이다.&nbsp;</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력 파일은 하나 혹은 그 이상의 테스트 케이스로 이루어진다. 각 테스트 케이스의 첫 번째 줄은 n개의 돌을 포함한다. (각각의&nbsp;2nn lines은 두&nbsp;개의 정수&nbsp;xi,yi 를 포함한다.)&nbsp;돌 #1은&nbsp;Freddy의 돌이고, 돌 #2는&nbsp;Fiona의 돌&nbsp;그리고 다른 n-2 돌은 비어 있는 돌이다.&nbsp;각 테스트 케이스&nbsp;사이에는&nbsp;공백 행이 있다. n을 위한 값이&nbsp;zero (0)가 될 경우 입력은 종료된다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 테스트 케이스에서&nbsp;"Scenario #x" 문장과&nbsp;"Frog Distance =&nbsp;y" 문장을 출력한다. 여기서 x는 테스트 케이스의 수로 대체된다 (1부터 번호가 매겨진다). y는 적절한 소수점 셋째 자리의 실수로 대체될 수 있다. 마지막 케이스까지 각 테스트 케이스&nbsp;뒤에는 공백 행을 출력해라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
0 0
3 4

3
17 4
19 4
18 5

0
','Scenario #1
Frog Distance = 5.000

Scenario #2
Frog Distance = 1.414
','SHORTEST_PATH'),
                                                                                                                (11707,'BAEKJOON','https://www.acmicpc.net/problem/7040',7040,'밥 먹기','1초','128 MB',20,'<p>소들은 밥을 먹을 때 친구들과 가까이 줄을 선다. 선영이는 소를 N마리 (2 ≤&nbsp;N ≤ 1,000 가지고 있고, 1번부터 N번까지 번호를 붙였다. 소는 일직선으로 번호 순으로 줄을 서서 밥을 기다린다. 이때, 두 마리 이상의 소가 같은 위치에 서는 것도 가능하다. 같은 좌표를 갖는 소가 두 마리 이상일 수도 있다.</p>

<p>서로를 좋아하는 소는&nbsp;특정 거리 이내에 서 있으려고 한다. 그리고 서로를 싫어하는 소는&nbsp;특정 거리 이상 떨어지려고 한다. 어떤 소들이 서로를 좋아하는지와 두 소가 최대한 떨어질 수 있는 거리가 길이가 ML(1 ≤ ML ≤ 10,000)인 리스트로 주어진다. 다음으로 어떤 소들이 서로를 싫어하는지와 두 소가 최소한 떨어져야 하는 거리가 MD(1 ≤ MD ≤&nbsp;10,000) 길이의 리스트로 주어진다.</p>

<p>위 조건을 만족하면서 줄을 서는 것이 가능하다면, 1번 소와 N번 소의 최대 거리를 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫째 줄에는 정수 N, ML, MD가 공백으로 구분되어 주어진다.</p>

<p>둘째 줄부터 ML+1번째 줄까지 양의 정수 A, B, D (1 ≤ A < B ≤&nbsp;N)가 공백으로 구분되어 주어진다. 소 A와 소 B는 최대한 D (1 ≤ D ≤ 1,000,000)만큼 떨어질 수 있다.</p>

<p>ML+2번째 줄부터 ML+MD+1번째 줄까지 양의 정수 A, B, D (1 &nbsp;≤ A < B ≤ N)이 공백으로 구분되어 주어진다. 소 A와 소 B는 최소한 D (1 ≤&nbsp;D ≤ 1,000,000)만큼 떨어져 있어야 한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 1번 소와 N번 소의 최대 거리를 출력한다. 줄을 서는 것이 불가능한 경우에는 -1을 출력한다. 1번 소와 N번 소의 최대 거리가 무한대인 경우에는&nbsp;-2를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 2 1
1 3 10
2 4 20
2 3 3
','27
','SHORTEST_PATH'),
                                                                                                                (13403,'BAEKJOON','https://www.acmicpc.net/problem/7140',7140,'데이터 만들기 1','1초','128 MB',12,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 ModifiedDijkstra, B는 FloydWarshall이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 107이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>ModifiedDijkstra
	<ul>
		<li><a href="/data/source/ModifiedDijkstra.c">C</a></li>
		<li><a href="/data/source/ModifiedDijkstra.cpp">C++</a></li>
	</ul>
	</li>
	<li>FloydWarshall
	<ul>
		<li><a href="/data/source/FloydWarshall.c">C</a></li>
		<li><a href="/data/source/FloydWarshall.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (13404,'BAEKJOON','https://www.acmicpc.net/problem/7141',7141,'데이터 만들기 2','1초','128 MB',17,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 FloydWarshall, B는 OptimizedBellmanFord이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 2222이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>FloydWarshall
	<ul>
		<li><a href="/data/source/FloydWarshall.c">C</a></li>
		<li><a href="/data/source/FloydWarshall.cpp">C++</a></li>
	</ul>
	</li>
	<li>OptimizedBellmanFord
	<ul>
		<li><a href="/data/source/OptimizedBellmanFord.c">C</a></li>
		<li><a href="/data/source/OptimizedBellmanFord.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (13405,'BAEKJOON','https://www.acmicpc.net/problem/7142',7142,'데이터 만들기 3','1초','128 MB',12,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 OptimizedBellmanFord, B는 FloydWarshall이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 105이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>OptimizedBellmanFord
	<ul>
		<li><a href="/data/source/OptimizedBellmanFord.c">C</a></li>
		<li><a href="/data/source/OptimizedBellmanFord.cpp">C++</a></li>
	</ul>
	</li>
	<li>FloydWarshall
	<ul>
		<li><a href="/data/source/FloydWarshall.c">C</a></li>
		<li><a href="/data/source/FloydWarshall.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (13406,'BAEKJOON','https://www.acmicpc.net/problem/7143',7143,'데이터 만들기 4','1초','128 MB',20,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 FloydWarshall, B는 ModifiedDijkstra이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 157이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>FloydWarshall
	<ul>
		<li><a href="/data/source/FloydWarshall.c">C</a></li>
		<li><a href="/data/source/FloydWarshall.cpp">C++</a></li>
	</ul>
	</li>
	<li>ModifiedDijkstra
	<ul>
		<li><a href="/data/source/ModifiedDijkstra.c">C</a></li>
		<li><a href="/data/source/ModifiedDijkstra.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (13407,'BAEKJOON','https://www.acmicpc.net/problem/7144',7144,'데이터 만들기 5','1초','128 MB',17,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 ModifiedDijkstra, B는 OptimizedBellmanFord이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 1016이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>ModifiedDijkstra
	<ul>
		<li><a href="/data/source/ModifiedDijkstra.c">C</a></li>
		<li><a href="/data/source/ModifiedDijkstra.cpp">C++</a></li>
	</ul>
	</li>
	<li>OptimizedBellmanFord
	<ul>
		<li><a href="/data/source/OptimizedBellmanFord.c">C</a></li>
		<li><a href="/data/source/OptimizedBellmanFord.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (13408,'BAEKJOON','https://www.acmicpc.net/problem/7145',7145,'데이터 만들기 6','1초','128 MB',20,'<p>오늘날 세상에는 많은 프로그래밍 대회가 있다. 대회에 사용할 좋은 프로그래밍 문제를 만드는 일은 매우 어렵다. 그 중 가장 어려운 일은 테스트 데이터를 만드는 일이다. 좋은 테스트 데이터는 문제의 의도에 맞게 짠 코드와 그렇지 않은 코드를 구별해 낼 수 있어야 한다. 또, 대부분의 경우에 올바른 결과를 내지만, 특별한 케이스에서는 틀리는 소스를 찾아낼 수도 있어야 한다.</p>

<p>이 문제는 지금까지 풀어왔던 문제와는 다르게 문제를 푸는 소스를 제출하는 문제가 아니다. 바로 테스트 케이스를 만드는 문제이다.</p>

<p>지금 상근이는 그래프 문제의 데이터 하나를 만들어야 한다. 이때, 상근이가 만들 데이터 X는 코드 A와 코드 B에 대해서 다음 조건을 만족해야 한다.</p>

<ol>
	<li>코드 A는 데이터 X를 수행할 때, 시간 초과 (TLE)가 발생하면 안 된다.</li>
	<li>코드 B는 데이터 X를 수행할 때, 결과가 시간 초과 (TLE)이어야 한다.</li>
</ol>

<p>또, 데이터는 작을 수록 좋기 때문에, 최대 T개의 정수로 이루어져 있어야 한다.</p>

<p>위의 조건을 만족하는 입력 데이터를 만드는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>이 문제는 입력이 없다.</p>

<p>상근이가 데이터를 만들 문제는 <a href="/problem/7612">7612번 SSSP</a>이고, 사용할 코드 A는 OptimizedBellmanFord, B는 ModifiedDijkstra이다. (소스는 아래 힌트에 있다)</p>

<p>코드를 보면&nbsp;counter 변수가 있다. 이 변수 값이 1,000,000을 넘으면 TLE이다.</p>

<p>또, T는 143이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>입력 데이터를 출력하면 된다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<ul>
	<li>OptimizedBellmanFord
	<ul>
		<li><a href="/data/source/OptimizedBellmanFord.c">C</a></li>
		<li><a href="/data/source/OptimizedBellmanFord.cpp">C++</a></li>
	</ul>
	</li>
	<li>ModifiedDijkstra
	<ul>
		<li><a href="/data/source/ModifiedDijkstra.c">C</a></li>
		<li><a href="/data/source/ModifiedDijkstra.cpp">C++</a></li>
	</ul>
	</li>
</ul>

				</div>
				</div>','','','SHORTEST_PATH'),
                                                                                                                (11724,'BAEKJOON','https://www.acmicpc.net/problem/7332',7332,'편의점 알바','1초','128 MB',21,'<p>대구광역시 끄트머리에&nbsp;편의점 하나가 새로 개업했다. 편의점 점주를 맡은 준이는&nbsp;카운터를 볼 알바를 충분히 고용하려고 한다. 그런데 하루의 각 시간대마다 필요한 알바의 수가 다르다. 이를테면&nbsp;밤에는 조금 필요하고, 낮에는 많이 필요하고, 그런 식이다. 준이는 최소한의 알바를 써서 최소한의 필요한 알바의 수를 모두 충족시키고 싶다.</p>

<p>준이는 고민한 끝에 매 시간 필요한 알바의 수를 계산해내었다. 이 데이터는 R[0], R[1], ..., R[23]까지 주어진다. R[0]은 0시에서 1시, R[1]은 1시에서 2시, 그렇게 R[23]은 23시에서 다음날 0시 직전까지 필요한 알바의 수이다. <u>필요한 알바의 수는 매일 같다. 또한, 필요한 알바의 수보다 더 많은 알바가 일해도 상관없다.</u></p>

<p>준이가 알바를 모집한 결과 N명의 지원자가 알바를 하겠다고 나섰다. 각 지원자 i는 매일 특정한 시간 T[i](0 ≤ T[i]&nbsp;≤ 23)시부터 정확히 8시간동안 쉬지 않고 일하겠다고 했다. 알바들은 절대 서로 도와주거나, 교대하거나, 아파서 쉬거나, 야근을 하거나, 지각하거나, 사고를 당하지 않고 <u>무조건 제 시간에 매일 꼬박꼬박 나오고 시급을 챙겨간다.</u></p>

<p>여러분이 할 일은 R[i]와 T[i]가 모두&nbsp;주어졌을 때, 필요한 최소한의 알바의 수를 구하는 프로그램을 짜는 것이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫째 줄에는 테스트 케이스의 개수가 주어진다. 테스트 케이스는 20개보다 많지 않다.</p>

<p>각 테스트 케이스의 첫 줄에는 R[0] ~ R[23]을 나타내는 24개의 정수가 공백을 사이에 두고 주어진다. (i=0..23:&nbsp;0&nbsp;≤&nbsp;R[i] ≤ 1000)&nbsp;그리고 둘째 줄에는 지원자의 수 N이 주어진다. (0&nbsp;≤ N&nbsp;≤ 1000) 그리고 그 뒤로 N개의 줄에는 각 줄에 하나씩 T[i]&nbsp;(i=1..N: 0&nbsp;≤&nbsp;t[i]&nbsp;≤&nbsp;23) 가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스마다 한 줄로 최소한의 필요한 알바의 수를 출력한다.</p>

<p>어떻게 해도 조건을 만족시키지 못하면 그 줄에 "No Solution"을 출력한다. 따옴표는 출력하지 않는다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1
1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
5
0
23
22
1
10
','1
','SHORTEST_PATH'),
                                                                                                                (11734,'BAEKJOON','https://www.acmicpc.net/problem/7577',7577,'탐사','1초','128 MB',21,'<p>직선 모양의 도로에 특별한 물체가 묻혀있다. 우리는 직선구간을 탐색할 수 있는 장비를 이용해서 이 물체가 어디에 있는지를 조사하고자 한다. 직선도로를 일차원 배열로 생각해보자. 아래 그림에서 숫자는 단위 구간의 번호이며 그 안에 ▲ 기호로 표시된 것은 우리가 찾아낼 물체이다. </p>

<table class="table table-bordered th-center table-center-50 td-center">
	<tbody>
		<tr>
			<th>1</th>
			<th>2</th>
			<th>3</th>
			<th>4</th>
			<th>5</th>
			<th>6</th>
			<th>7</th>
			<th>8</th>
			<th>9</th>
			<th>10</th>
			<th>11</th>
			<th>12</th>
		</tr>
		<tr>
			<td> </td>
			<td> </td>
			<td>▲</td>
			<td> </td>
			<td> </td>
			<td>▲</td>
			<td>▲</td>
			<td>▲</td>
			<td>▲</td>
			<td> </td>
			<td> </td>
			<td>▲</td>
		</tr>
	</tbody>
</table>

<p style="text-align: center;">그림 1</p>

<p>그런데 우리는 어떤 연속된 구간에 포함되어 있는 물체의 개수를 Probe[x,y]를 이용하여 확인할 수 있다. x부터 y까지의 구간에 물체가 r개가 있음은 Probe[x,y]=r 로 표현된다. (단 x ≤ y 이다.) 예를 들어 그림 1과 같은 상황이라면 Probe[2,7]=3, Probe[2,2]=0, Probe[6,9]=4, Probe[5,12]=5 임을 알 수 있다. </p>

<p>여러분은 제시된 탐사작업의 결과가 모두 만족되는 구간을 재구성하는 프로그램을 작성해야 한다. </p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 두 개의 정수 K와 N이 주어져 있다. K는 전체 구간의 길이이며, N은 조사한 Probe[x,y]=r 결과의 개수이다. 이어 나타나는 N개의 각 줄에는 하나의 탐사결과 Probe[x,y]=r 를 나타내는 세 개의 숫자 x y r이 공백문자로 분리되어 제시되어 있다. 단 입력변수에 대한 제한 범위는 다음과 같다. 3 ≤ K ≤ 40, 2 ≤ N ≤ 1,000, 1 ≤ x ≤ y ≤ K, 0 ≤ r ≤ 1,000 이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>여러분은 N개의 탐사결과를 만족하는 전체 구간을 길이 K 인 문자열로 표시해야 한다. 물체가 있는 단위 구간은 문자 ‘#’으로 표시해야 하고, 없는 단위 구간은 마이너스 기호 ‘-’로 표시해야 한다. 답이 여러 개 존재할 때에는 그 중 하나만 출력하면 된다. 만일 탐사결과를 모두 만족하는 답이 존재하지 않을 경우에는 문자열 “NONE"을 출력해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','12 7
1 8 4
6 10 4
2 12 6
9 12 2
4 6 1
1 4 1
11 11 0
','--#--####--#
','SHORTEST_PATH'),
                                                                                                                (11760,'BAEKJOON','https://www.acmicpc.net/problem/7981',7981,'장비를 정지합니다','1초','256 MB',19,'<p>졸업논문을 완성하지 못한 형서는 학교에 대한 테러 계획을 세웠다. 고급정보과학 시간에 몰래 형서가 제작한 기계는, 전원을 켠 순간부터 폭주하기 시작해서 온 학교를 쑥대밭으로 만들고 있다. 으악!</p>

<p>학교를 살려내기 위해서, 박종화 선생님은 형서의 설계도를 입수했다. 설계도에 의하면, 폭주 기계에는 n개의 장비가 존재하며, 현재 1번 장비만이 폭주하고 있다. 장비를 정지시키기 위해서는, 박종화 선생님이 각각의 장비에 전기 충격을 가해야 한다.</p>

<p>설계도에 의하면, 전기 충격에는 <strong>약한 충격</strong>과 <strong>강한 충격</strong>이 있다. i번 장비에 약한 충격을 가하는 데는 u<sub>i</sub> 와트의 전력이 필요하며, 강한 충격을 가하는 데는 z<sub>i</sub> 와트의 전력이 필요하다. (u<sub>i</sub> < z<sub>i</sub>) 약한 충격과 강한 충격 모두 i번 장비를 정지시키지만, 약한 충격을 받았을 때는, r<sub>i</sub> 개의 특정한 장비들이 다시 작동을 시작하게 된다! 각각의 장비에 대해서, 이러한 특정한 장비들은 g<sub>i,1</sub>, ..., g<sub>i,r<sub>i</sub></sub> 와 같은 리스트로 표현 가능하며, 이 리스트 역시 설계도에 적혀 있다.</p>

<p>박종화 선생님은 모든 장비를 정지하려고 한다. 하지만, 학교는 난장판이 되었고, 공급받을 수 있는 전력량에는 한계가 있다. 박종화 선생님은 전기 충격에 사용한 전력의 합의 최솟값을 구하려고 한다. 힘을 합쳐서 박종화 선생님을 도와드리자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 장비의 개수를 뜻하는 정수 n이 주어진다. (1 ≤ n ≤ 200, 000).</p>

<p>이후 n개의 줄에 장비의 정보가 순서대로 주어진다. 이 중 i번째 줄은 장비 i의 정보를 나타낸다. 각각의 줄에는 먼저 세 정수 u<sub>i</sub>, z<sub>i</sub>, r<sub>i</sub> 가 주어지며 (1 ≤ u<sub>i</sub> < z<sub>i</sub> ≤ 10<sup>9</sup>, 1 ≤ r<sub>i</sub>), 이후 r<sub>i</sub>개의 정수 g<sub>i,1</sub>, ..., g<sub>i,r<sub>i</sub></sub> (1 ≤ g<sub>i,j</sub> ≤ n) 가 주어진다. 모든 i에 대해 r<sub>i</sub>의 합은 10<sup>6</sup>을 넘지 않는다. <strong>다시 작동을 시작하는 장비의 리스트에, 같은 원소가 여러 번 등장할 수 있으며, 이때는 해당 장비를 등장 횟수만큼 종료해야 한다.</strong></p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>모든 장비를 정지하기 위해 필요한 전력량의 최솟값을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
4 27 3 2 3 2
3 5 1 2
1 13 2 4 2
5 6 1 2
','26
','SHORTEST_PATH'),
                                                                                                                (11830,'BAEKJOON','https://www.acmicpc.net/problem/9247',9247,'절벽 걷기','1초','128 MB',19,'<p>상근이는 대서양 해안에 살고 있다. 어느 날 하늘을 쳐다보니 보름달이 떠 있었다. 보름달 일 때는 간만의 차가 커진다. 상근이는 비가 오지 않는 날을 선택해 해안선을 산책하려고 한다.</p>

<p>해안선을 산책하다가 밀물을 만나면 바닷물에 갇힐 수 있다. 따라서, 조류를 잘 살펴본 뒤에 산책 계획을 세워야 한다.</p>

<p>안전하게 산책을 하려면 간조일 때 산책을 하면 된다. 하지만, 문제는 이 해안이 돌로 이루어져 있다는 점이다. 돌에서 미끄러지면 다칠 수 있기 때문에, 상근이는 돌이 한 시간 전에 마른 상태가 되어야 돌 위로 올라갈 수 있다.</p>

<p>해변은 거의 대부분이 모래로 이루어져 있고, 그 위에 돌이 놓여져 있는 형태이다. 모든 구역은 마른 상태이거나 물에 잠겨있는 상태이다. 구역의 높이보다 물의 높이가 높아진 순간에 구역은 물에 잠기며, 인접한 구역의 높이와는 관계 없다.</p>

<p>해변은 10 × 10m 단위로 구역을 나눌 수 있고, 각 구역의 높이는 모두 알고 있다. 각 정사각형에 들어가려면, 인접한 네 정사각형에서 이동해야 한다. 또, 두 구역의 높이가 \(z_1\), \(z_2\)라고 할 때, 높이의 차이 \(\left| z_1 - z_2 \right| \)가 최대 1m인 경우에만 이동할 수 있다.</p>

<p>한 정사각형에서 다른 정사각형으로 갈 때, 걸리는 시간은 일정하며, 이 시간 동안 두 정사각형은 모두 마른 상태이어야 한다.</p>

<p>해수면의 높이는 여러 가지 요인에 의해 결정된다. 상근이는 물의 높이 \(v\)(미터)가 만조로 부터 지난 시간 \(t\)(시간)와 여러 가지 요인에 의해 결졍된 높이 \(a\)(미터)로 다음과 같이 나타낼 수 있다는 사실을 알게 되었다.</p>

<p>\[v=0.5a \cdot (\cos { (t \frac{2 \pi}{12}) } + 1 )\]&nbsp;</p>

<p>상근이는 산책을 집에서 시작하고, 집에서 끝내려고 한다. 밀물이 몰려오기 전 까지 시간이 얼마 남지 않았기 때문에 0.0 ≤ t ≤ 12.0 시간 안에 산책을 마치려고 한다. 상근이는 얼마나 멀리 산책하러 나갈 수 있을까?</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 실수 \(a\) (0.0 < \(a\) < 15.0) 과 한 정사각형을 지나가는데 걸리는 시간 \(m\) (0.1 ≤ \(m\) ≤ 60.0)이 주어진다. \(m\)의 단위는 초이다.</p>

<p>둘째 줄에는 네 정수 &nbsp;\(W\), \(H\), \(X\), \(Y\)이 주어진다. (1 ≤ \(W\),\(H\) ≤ 200, 0 ≤ \(X\) < \(W\), 0 ≤ \(Y\) < \(H\)) \(W\)와 \(H\)는 지도의 너비와 높이이고, \(X\)와 \(Y\)는 상근이의 집의 좌표 (\(X\),\(Y\)) 이다.</p>

<p>다음 \(H\)개 줄에는 \(W\)개의 정수가 공백으로 구분되어져서 주어진다. 각 정수는 각 10 × 10m 단위 정사각형의 높이이며, 가장 해수면의 높이가 낮았을 때가 기준이다. 단위는 밀리미터이다. 각 정사각형의 높이는 0보다 크며, 20,000을 넘지 않는다. 첫째 줄의 첫 번째 숫자가 (0,0)에 해당하며, 상근이의 집은 항상 마른 상태이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 상근이가 가장 멀리 갈 수 있는 곳과의 유클리드 거리를 출력한다. 두 정사각형 사이의 거리는 두 중심 사이의 거리로 계산할 수 있다. 상대/절대 오차가 10-6 이내인 경우에만 정답이다.</p>

<p>소수점 계산으로 생기는 오차를 막기 위해서 걷는 속도 \(0.999m\) < \(m \) < \(1.001m\)인 \(m\)인 경우에 정답과 같다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2.0 10.0
3 3 0 0
2001 1000 100
1001 10000 200
100 0 0
','20
','SHORTEST_PATH'),
                                                                                                                (11842,'BAEKJOON','https://www.acmicpc.net/problem/9323',9323,'무임승차','1초','128 MB',17,'<p>상현이는 어떤 기밀 단체의 요원이다. 상현이는 매일 아침 기차를 타고 출근한다. 어느 날 출근을 하던 상현이는 무언가 불합리하다는 것을 알아챘다. 상현이는&nbsp;매일&nbsp;요금을 내고 기차를 타지만, 실제로 승무원이 티켓을 확인하는 경우는 드물었기 때문이다. 결국&nbsp;몇 년에 걸쳐, 상현이는 각 기차마다&nbsp;어느 정도의 확률로 티켓을 확인받게 되는지에 대한 정보를 모두 작성하는 데 성공했다.</p>

<p>하지만 무임승차 벌금은 일반적으로&nbsp;실제 요금보다 많기 때문에, 상현이는 모든 역에서 요금을 내지 않기보다는 요금과 벌금, 티켓을 확인받을 확률을 계산하여 기댓값이 가장 작은 방법으로 출근을 하기로&nbsp;했다. 아마 어떤 역에서는 요금을 내고 탑승하는 것이 나을 것이고, 어떤 역에서는 무임승차를 하는 것이 나을 것이다.</p>

<p>기차&nbsp;티켓은 기본 s원에 출발지&nbsp;A와 도착지&nbsp;B 사이의 최단거리에 비례하여 1 킬로미터당 p의&nbsp;요금이 추가된다. 당연히 이 티켓으로는 A와 B 사이를 최단거리로 운행하는 기차만 탈 수 있다. 만일 기차가&nbsp;운행하던 도중&nbsp;티켓을 체크받았는데 티켓을 소지하지 않았다면, 기본 y원의 벌금에 지금 탑승한 기차가 마지막으로 방문한 도시에서부터 기차의 이번 정차역까지의 거리에 비례하여 1 킬로미터당 역시 p의&nbsp;추가 벌금을 지불하게 된다. 일반적으로 무임승차가 적발될 경우 기차에서 즉시 내려야 하지만, 상현이는 기밀 요원이기에 변장술에 능하다. 따라서 적발되더라도 벌금을 지불한 뒤 계속 기차를 탈 수 있다.</p>

<p>이제 상현이가 통근 요금의 기댓값이 가장 적도록 출근할 수 있는 경로를 찾아 줄 프로그램을 작성하면 된다.</p>

<p><img src=https://www.acmicpc.net/upload/images/dogging.png"></p>

<p>위는 세 번째 예제이다. 도시 1에서 도시 4까지 가는 최적의 경로는 아래와 같다.</p>

<p>도시&nbsp;1에서 도시&nbsp;2까지는 20의&nbsp;요금을 지불하고 티켓을 구입(10 + 1&nbsp;× 10), 2에서 3까지 가는 경로에선 무임승차를 하며(이때의 벌금의&nbsp;기댓값은 0.1&nbsp;× (100 + 1&nbsp;× 120) = 22), 그리고 3에서 4까지는 20의 요금을 지불하고 티켓을 구입한다(10 + 1&nbsp;× 10). 이와 같이 출근할 경우, 총&nbsp;요금의 기댓값은 62이며(20 + 22 + 20)&nbsp;이 경우가 최소의 기댓값으로 출근하는 방법이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 테스트 케이스의 수 T가 주어진다. (T≤100)</p>

<p>각 테스트 케이스는 아래와 같이 구성되어 있다</p>

<ul>
	<li>첫 줄에 공백으로 구분된 7개의 정수가 주어진다.
	<ol>
		<li>n ( 2&nbsp;≤&nbsp;n&nbsp;≤&nbsp;200&nbsp;) : 기차의 운행 경로에 놓인&nbsp;도시의 수</li>
		<li>m ( 1&nbsp;≤&nbsp;m&nbsp;≤&nbsp;n(n-1)&nbsp;/&nbsp;2&nbsp;) : 두 도시를 직접적으로 잇는 선로의 수</li>
		<li>start&nbsp;( 1&nbsp;≤ start&nbsp;≤ n ) : 출발지</li>
		<li>end (&nbsp;1&nbsp;≤ end&nbsp;≤ n, start ≠ end ) : 도착지</li>
		<li>s ( 1&nbsp;≤ s&nbsp;≤ 1000 ) : 티켓의 기본 요금 s</li>
		<li>p ( 1&nbsp;≤ p&nbsp;≤ 1000 ) : 티켓 혹은 벌금에 추가되는 1 킬로미터당 추가 요금</li>
		<li>y ( s < y&nbsp;≤ 1000 ) : 무임승차 벌금의&nbsp;기본 요금 y</li>
	</ol>
	</li>
	<li>다음 m개의 줄에는 각각 i 번째 선로에 대한 정보가&nbsp;네 개의 공백으로 구분된 정수로 주어진다. 모든 선로는 양방향이다. i&nbsp;번째 줄의 데이터는 다음과 같다.
	<ol>
		<li>ai ( 1&nbsp;≤ ai&nbsp;≤ n ) : i 번째 선로의 한쪽 끝 도시 번호</li>
		<li>bi ( ai < bi&nbsp;≤ n ) : i&nbsp;번째 선로의 다른 쪽 끝 도시</li>
		<li>ci ( 0&nbsp;≤ ci&nbsp;≤ 100 ) : i&nbsp;번째 선로를 운행하는 기차에서 티켓을 확인받을 확률( % 값으로 주어진다. )</li>
		<li>di ( 1&nbsp;≤ di&nbsp;≤ 1000 ) : i 번째 선로의 길이(단위는 킬로미터)</li>
	</ol>
	</li>
</ul>

<p>i&nbsp;≠ j 인&nbsp;모든 (ai, bi) 와 (aj, bj) 쌍에 대하여,&nbsp;(ai, bi)&nbsp;≠&nbsp;(aj, bj) 이다. (중복되어 입력되는 선로는 없다)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해 다음을 출력한다.</p>

<ul>
	<li>start에서 end까지 가는 데 드는 요금의 기댓값의 최솟값을 소수 두 번째 자리까지 반올림한 값</li>
</ul>

<p>모든 테스트 케이스에서, 계산 과정에서의 절대 오차가 10^-6 이하인 경우 결과값은 달라지지 않는다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>벌금의 기댓값은 확인받을 확률 * 벌금 으로 계산할 수 있으며, 각 운행 경로는 독립적이므로&nbsp;경로 X에서의 기댓값을 E[X], 경로 Y에서의 기댓값을 E[Y]라 할 때, X-Y 경로의 기댓값은 E[X]+E[Y]가 된다.</p>

				</div>
				</div>','3
2 1 1 2 10 1 100
1 2 20 50
2 1 1 2 10 1 100
1 2 60 50
4 4 1 4 10 1 100
1 4 50 90
1 2 90 10
2 3 10 120
3 4 90 10
','30.00
60.00
62.00
','SHORTEST_PATH'),
                                                                                                                (11845,'BAEKJOON','https://www.acmicpc.net/problem/9347',9347,'울타리','2초','64 MB',13,'<p>준규는 화원을 운영중이다. 준규는 엄청난 가치를 지닌 대마꽃를 M개의 행과 N개의 열을 가진 토지에 경작하는데 진욱이가 자꾸 훔쳐가서 고민에 빠졌다. 준규는 진욱이가 훔쳐가지 못하게 꽃 주변을 울타리로 둘러쌓다. 하지만 시간이 지나면서 울타리 몇개가 부서졌다. 진욱이는 이때를 틈타 다시 꽃을 훔지려고 한다.</p>

<p>아래 보이는 그림은 11행 12열의 화원을 나타낸다. 0은 울타리가 없거나 꽃이 심어져 있는 부분을 나타내고 1은 울타리가 있는 곳을 나타낸다. 화원에 들어 오려면 노란색 부분부터 들어와야 한다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/fence%281%29.png" style="height:256px; width:322px"></p>

<p>진욱이가 꽃을 훔치러 화원에 들어왔다. 울타리를 요리조리 피해서 들어가는데 이때 상, 하, 좌, 우로 밖에 이동할 수 없다. 진욱이는 파괴적 성향을 지니고 있기 때문에 울타리로 가로막혀 더이상 안으로 접근할 수 없을 때 울타리를 부순다.&nbsp; 진욱이가 되도록 적은 수의 울타리를 부수면서 안으로 들어갈때, 최대한 많이 울타리를 부순 횟수와 , 그때 얻을 수 있는 꽃의 수를 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 수 T (≤ 10) 가 주어진다. 같은 줄에 주어지는 여러개의 정수는 공백으로 구분된다.</p>

<p>각각의 테스트 케이스의 첫째 줄에는 두개의 정수 R, C가 주어진다 (5 ≤ R, C ≤ 1 000)</p>

<p>R은 화원의 행을 나타내고 C는 열의 수를 나타낸다.</p>

<p>두 번째 줄부터 R+1번째 줄까지 화원의 정보가 주어진다. 화원은 꽃이 심어질 수 있는 부분인 0 과 울타리가 설치된 1로 이루어져 있다.</p>

<p>화원에는 적어도 하나 이상의 꽃이 심어지는 부분이 있다고 가정한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 테스트 케이스에 대해서 2개의 정수를 출력한다. 첫 번째 정수는 진욱이가 부수는 최대 울타리의 수이고, 두 번째 정수는 그때 얻을 수 있는 꽃의 최대 개수이다. 두 개의 정수는 공백으로 구분한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>진욱이는 되도록이면 울타리를 부수지 않고 안으로 들어간다.울타리를 부수지 않고 절대로 안으로 들어 갈 수 없을때만 울타리를 부순다.</p>

<p><img alt="" src=https://www.acmicpc.net/upload/images/fence2.png" style="height:179px; width:612px"></p>

				</div>
				</div>','2
11 12
1 1 1 1 1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0 0 0 0 1
1 0 1 1 1 1 1 1 1 1 0 1
1 0 1 0 0 0 0 1 0 1 0 1
0 0 1 0 1 1 0 0 0 1 0 1
1 0 1 0 1 0 1 0 0 1 0 1
1 0 1 0 1 1 1 0 0 1 0 1
0 0 1 0 0 0 0 0 0 1 0 1
1 0 1 1 1 1 1 1 1 1 0 1
1 0 0 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1 1 1
8 12
0 0 0 1 1 1 1 1 1 0 0 0
0 0 0 1 0 0 0 0 1 0 0 0
0 0 0 1 1 1 1 1 1 0 0 0
1 1 1 1 0 0 0 0 1 1 1 1
1 0 1 0 0 0 0 0 0 1 0 1
1 0 1 0 0 0 0 0 0 1 0 1
1 1 1 1 1 1 1 1 1 1 1 1
0 0 0 1 1 1 1 1 1 0 0 0
','2 1
2 16
','SHORTEST_PATH'),
                                                                                                                (11827,'BAEKJOON','https://www.acmicpc.net/problem/9370',9370,'미확인 도착지','3초','256 MB',14,'<p>(취익)B100 요원, 요란한 옷차림을 한 서커스 예술가&nbsp;한 쌍이 한 도시의 거리들을 이동하고 있다. 너의 임무는 그들이 어디로 가고 있는지 알아내는 것이다. 우리가 알아낸 것은 그들이 s지점에서 출발했다는 것, 그리고 목적지 후보들 중 하나가 그들의 목적지라는 것이다. 그들이 급한 상황이기 때문에&nbsp;목적지까지 우회하지 않고 최단거리로&nbsp;갈 것이라 확신한다. 이상이다. (취익)</p>

<p>어휴!&nbsp;(요란한 옷차림을 했을지도 모를)&nbsp;듀오가 어디에도 보이지 않는다. 다행히도 당신은 후각이 개만큼 뛰어나다. 이 후각으로 그들이&nbsp;g와 h 교차로 사이에 있는 도로를 지나갔다는 것을 알아냈다.</p>

<p>이 듀오는 대체 어디로 가고 있는 것일까?</p>

<p style="text-align: center;"><img alt="" src=https://www.acmicpc.net/upload/images/destination.png" style="font-size:medium; height:230px; width:236px"></p>

<p>예제 입력의 두 번째 케이스를 시각화한 것이다. 이 듀오는 회색 원에서 두 검은 원 중 하나로 가고 있고 점선으로 표시된 도로에서 냄새를 맡았다. 따라서 그들은 6으로 향하고 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 테스트 케이스의 T(1 ≤ T ≤ 100)가 주어진다. 각 테스트 케이스마다</p>

<ul>
	<li>첫 번째 줄에 3개의 정수&nbsp;n, m, t (2 ≤ n ≤ 2 000, 1 ≤ m ≤ 50 000 and 1 ≤ t ≤ 100)가 주어진다. 각각 교차로, 도로, 목적지 후보의 개수이다.</li>
	<li>두 번째 줄에&nbsp;3개의 정수&nbsp;s, g,&nbsp;h (1 ≤ s, g, h ≤ n)가 주어진다. s는 예술가들의 출발지이고, g, h는 문제 설명에 나와&nbsp;있다. (g ≠ h)</li>
	<li>그 다음 m개의 각 줄마다 3개의 정수&nbsp;a, b, d (1 ≤ a < b ≤ n and 1 ≤ d ≤ 1 000)가 주어진다. a와 b 사이에 길이 d의 양방향 도로가 있다는 뜻이다.</li>
	<li>그 다음 t개의 각 줄마다 정수 x가 주어지는데, t개의 목적지 후보들을 의미한다. 이 t개의 지점들은 서로 다른 위치이며 모두&nbsp;s와 같지 않다.</li>
</ul>

<p>교차로 사이에는 도로가 많아봐야 1개이다. m개의 줄 중에서 g와 h 사이의 도로를 나타낸 것이 존재한다. 또한 이 도로는 목적지 후보들 중 적어도 1개로 향하는 최단 경로의 일부이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>테스트 케이스마다</p>

<ul>
	<li>입력에서 주어진 목적지 후보들 중 불가능한 경우들을 제외한 목적지들을 공백으로 분리시킨 오름차순의&nbsp;정수들로 출력한다.</li>
</ul>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
5 4 2
1 2 3
1 2 6
2 3 2
3 4 4
3 5 3
5
4
6 9 2
2 3 1
1 2 1
1 3 3
2 4 4
2 5 5
3 4 3
3 6 2
4 5 4
4 6 3
5 6 7
5
6
','4 5
6
','SHORTEST_PATH'),
                                                                                                                (11846,'BAEKJOON','https://www.acmicpc.net/problem/9376',9376,'탈옥','1초','256 MB',17,'<p>상근이는 감옥에서 죄수 두 명을 탈옥시켜야 한다. 이 감옥은 1층짜리 건물이고, 상근이는 방금 평면도를 얻었다.</p>

<p>평면도에는 모든 벽과 문이 나타나있고, 탈옥시켜야 하는 죄수의 위치도 나타나 있다. 감옥은 무인 감옥으로 죄수 두 명이 감옥에 있는 유일한 사람이다.</p>

<p>문은 중앙 제어실에서만 열 수 있다. 상근이는 특별한 기술을 이용해 제어실을 통하지 않고 문을 열려고 한다. 하지만, 문을 열려면 시간이 매우 많이 걸린다. 두 죄수를 탈옥시키기 위해서 열어야 하는 문의 개수를 구하는 프로그램을 작성하시오. 문을 한 번 열면 계속 열린 상태로 있는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스의 수는 100개를 넘지 않는다.</p>

<p>첫째 줄에는 평면도의&nbsp;높이 h와 너비 w가 주어진다. (2 ≤ h, w ≤ 100) 다음 h개 줄에는 감옥의 평면도 정보가 주어지며, 빈 공간은 ., 지나갈 수 없는 벽은 *, 문은 #, 죄수의 위치는 \$이다.</p>

<p>상근이는 감옥 밖을 자유롭게 이동할 수 있고, 평면도에 표시된 죄수의 수는 항상 두 명이다. 각 죄수와 감옥의 바깥을 연결하는 경로가&nbsp;항상 존재하는 경우만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스마다 두 죄수를 탈옥시키기 위해서 열어야 하는 문의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
5 9
****#****
*..#.#..*
****.****
*$#.#.#$*
*********
5 11
*#*********
*$*...*...*
*$*.*.*.*.*
*...*...*.*
*********.*
9 9
*#**#**#*
*#**#**#*
*#**#**#*
*#**.**#*
*#*#.#*#*
*$##*##$*
*#*****#*
*.#.#.#.*
*********
','4
0
9
','SHORTEST_PATH'),
                                                                                                                (11848,'BAEKJOON','https://www.acmicpc.net/problem/9446',9446,'아이템 제작','2초','256 MB',17,'<p>선영이는 최근에 "노리스 타워" 라는 게임을 시작했다. 게임에는 아이템 종류가 총 n개가 있다. 이 아이템은 모두 선영이의 캐릭터가 착용할 수 있다. 아이템은 1번부터 n번까지 번호가 매겨져 있다. 선영이는 1번 아이템을 제작하려고 한다.</p>

<p>아이템을 얻는 방법은 다음과 같이 두 가지가 있다.</p>

<ul>
	<li>아이템을 구매할 수 있다. i번 아이템의 가격은 c<sub>i</sub>원이다.</li>
	<li>아이템을 제작할 수 있다. 총 m가지 제작방법이 있다. 서로 다른 두 종류의 아이템을 대장장이에게 갖다 주면, 대장장이는 무료로 결과 아이템을 전달해 준다.</li>
</ul>

<p>선영이가 1번 아이템을 얻는데 필요한 돈의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 아이템 종류의 수 n과 제작 방법의 수 m이 주어진다. (1 ≤ n ≤ 10,000, 0 ≤ m ≤ 100,000)</p>

<p>둘째 줄에는 각 아이템의 가격 c<sub>i</sub>가 아이템 번호가 증가하는 순서대로 주어진다. (0 ≤ c<sub>i</sub> ≤ 10<sup>9</sup>)</p>

<p>다음 m개 줄에는 제작에 필요한 아이템과 그 결과 아이템의 번호 a<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>가 주어진다. 대장장이에게 x<sub>i</sub>번과 y<sub>i</sub>번 아이템을 하나씩 가져다주면, a<sub>i</sub>번 아이템을 결과로 준다는 뜻이다. (1 ≤ a<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub> ≤ n, a<sub>i</sub> ≠ x<sub>i</sub>, x<sub>i</sub> ≠ y<sub>i</sub>, y<sub>i</sub> ≠ a<sub>i</sub>)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스마다 1번 아이템을 얻는데 필요한 돈의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 3
5 0 1 2 5
5 2 3
4 2 3
1 4 5
','2
','SHORTEST_PATH'),
                                                                                                                (11857,'BAEKJOON','https://www.acmicpc.net/problem/9505',9505,'엔터프라이즈호 탈출','10초','256 MB',12,'<p>엔터프라이즈호가 클링온에게 포위되었다! 가장 빠른 시간 내에 나갈 수 있는 탈출 루트를 찾고 그 시간을 출력하라.</p>

<p>직사각형의 평면이 입력으로 주어지며, 이는 엔터프라이즈호와 클링온 전투선들의 위치들을 의미한다. 클링온 전투선은 몇 가지의 클래스로 나누어지며, 각 클래스의 클링온 전투선을 엔터프라이즈호가 무력화 시키는 데에 걸리는 시간도 입력으로 주어진다. 엔터프라이즈호는 탈출하는 경로에 있는 모든 클링온 전투선을 무력화 시키며 입력된 평면의 가장자리로 탈출한다. 입력된 평면의 단위 사각형은 꼭짓점이 아닌 가장자리로만 연결된다. (즉, 각 단위 사각형은 4개의 이웃 단위 사각형을 갖는다.)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 <strong>테스트 케이스의 개수 T</strong> (2 ≤ T ≤ 100)가 주어진다.</p>

<p>각 케이스는 첫 줄에 세개의 숫자 <strong>K, W, H</strong>가 주어진다.</p>

<p><strong>K</strong>&nbsp;(1 ≤ K ≤ 25)는 <strong>클링온 전투선의 클래스 개수</strong>를 의미한다.</p>

<p><strong>W</strong>&nbsp;(1 ≤ W ≤ 1000)는 <strong>평면의 폭</strong>을 의미한다.</p>

<p><strong>H</strong>&nbsp;(1 ≤ H ≤ 1000)는 <strong>평면의 높이</strong>를 의미한다.</p>

<p>&nbsp;</p>

<p>다음 <strong>K 줄</strong>에는 <strong>클링온 전투선의 클래스 이름</strong>과 <strong>무력화시키는 데에 걸리는 시간</strong>이 주어진다.</p>

<p><strong>클링온 전투선의 클래스 이름</strong>은 알파벳 대문자로 주어지며, "E" 가될 수 없다. 클래스의 이름은 겹칠 수 없다.</p>

<p><strong>무력화시키는 데에 걸리는 시간</strong>은 분을 나타내며 0 이상, 100,000 이하이다.</p>

<p>다음 <strong>H 줄</strong>에는 <strong>W 개</strong>의 알파벳 대문자가 주어진다. (각 문자 사이에는 공백이 없다.)</p>

<p>H 줄의 W 개 문자 중,</p>

<p><strong>"E"</strong>는 <strong>엔터프라이즈호의 위치</strong>를 의미하며, <strong>반드시 하나만 주어진다.</strong></p>

<p>"E"가 아닌&nbsp;<strong>다른 모든 문자</strong>는 <strong>해당 단위 평면에 위치한&nbsp;</strong><strong>클링온</strong><strong> 전투선</strong>의<strong> 클래스</strong>이고, 반드시 위 K 줄에서 무력화시키는 데에 걸리는 시간과 함께 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>엔터프라이즈호가 탈출하는 데에 걸리는 최소 시간을 정수로 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
6 3 3
A 1
B 2
C 3
D 4
F 5
G 6
ABC
FEC
DBG
2 6 3
A 100
B 1000
BBBBBB
AAAAEB
BBBBBB
','2
400
','SHORTEST_PATH'),
                                                                                                                (11870,'BAEKJOON','https://www.acmicpc.net/problem/9694',9694,'무엇을 아느냐가 아니라 누구를 아느냐가 문제다','1초','128 MB',13,'<p>한신이는 젊고, 똑똑하고 매우 유명한 정치인이다. 그럼에도 그는 여전히 자신의 성공을 위해서도 인간관계는 중요한것이라고 믿고있다. 다음달에 열릴 국회의원선거에서 한신이는 자신의 당이 반드시 이기길 희망한다. 그러기 위해서 최고의원의 지지가 필요하다.</p>

<p><img alt="" src="/userupload/vumbumy/201510/36b07eab268797eac93e2ffb5f37fe9a.png" style="float:right; margin:0px 0px 10px 10px"></p>

<p>이 최고의원의 지지를 받기위해 한신이는 전략을 세웠다. 그는 그 최고의원을 직접적으로 만날수 없다면 그를 알고있는 인맥을 이용하여 만날것이다. 이것을 위해서 우선 정치인들의 친밀도를 조사하였는데 친밀도를 다음 4단계로 나누어서 기록해놓았다.</p>

<p>최측근 [1] / 측근 [2] / 비즈니스관계 [3] / 지인 [4]</p>

<p>[두 사람의 관계는 이 4가지 경우중 반드시 해당되며, 적(enemy)는 존재하지 않는다.]</p>

<p>한신이는 지인보다는 최측근 친구에게 소개받기 원한다. 그래서 최고의원을 만나기까지의 인맥간 친밀도의 합을 최소화하고 싶어한다.</p>

<p>N명의 정치인 명단으로부터 그들의 인맥 친밀도가 주어진다. 정치인 리스트를 보고 한신이가 최고의원을 만나기까지의 친밀도의 합 중에서 가장 작은 값을 구하면 된다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>맨위 첫 번째 줄에 T(1 <T< 100)는 테스트케이스 수를 의미한다. 이것을 따라 다음줄에 각 테스트 케이스가 주어지는데, 첫 번째 줄에는 N과 M이 주어진다. N(N ≤ 20)은 관계의 개수를 의미하며, M(5 ≤M≤ 20)은 정치인의 수를 나타낸다. 이 다음 N줄에는 정치인 x, 그의 친구 y (0 ≤x,y< M), 두사람간의 친밀도 z(1 ≤z≤ 4)를 입력받는다. 정치인 0번은 한신이를 나타내고 M-1은 최고의원을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스는 "Case #x: "의 형식으로 출력되며 x는 케이스 번호(1부터 시작)을 의미한다. 콜론뒤에 한신이가 최고의원을 만날수 있다면 0번 정치인(한신이)를 시작으로 M-1번 정치인(최고의원)까지 만난 순서대로 출력하면 되고, 최고의원을 만날수 없는 경우엔 -1을 출력하면 된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>첫 번째 테스트 케이스에서 보면 한신이는 1번 정치인(한신이의 측근[2])에게 3번 정치인(1번 정치인의 지인[4])을 소개받고, 이 3번 정치인은 4번 정치인(3번 정치인의 지인[4])을 만나는 경우 2+4+4 = 10이다.</p>

<p>한신이가 곧바로 4번 정치인(한신이의 비즈니스관계[3])에게 얘기할수 있지만 대신에 2번 정치인(한신이의 최측근[1])에게 4번 정치인(2번 정치인의 최측근[1])을 소개 받아 만난다면 한신이는 더 좋은 인상으로 최고의원을 만날수 있을것이다.</p>

				</div>
				</div>','2
7 5
0 1 2
1 3 4
0 2 1
0 4 3
3 2 3
3 4 4
2 4 1
3 5
0 1 2
1 3 4
4 2 1
','Case #1: 0 2 4
Case #2: -1
','SHORTEST_PATH'),
                                                                                                                (11897,'BAEKJOON','https://www.acmicpc.net/problem/10159',10159,'저울','1초','256 MB',12,'<p>무게가 서로 다른 N 개의 물건이 있다. 각 물건은 1부터 N 까지 번호가 매겨져 있다. 우리는 일부 물건 쌍에 대해서 양팔 저울로 어떤 것이 무거운 것인지를 측정한 결과표를 가지고 있다. 이 결과표로부터 직접 측정하지 않은 물건 쌍의 비교 결과를 알아낼 수도 있고 알아내지 못할 수도 있다. 예를 들어, 총 6개의 물건이 있고, 다음 5개의 비교 결과가 주어졌다고 가정하자. ([1]은 1번 물건의 무게를 의미한다.)</p>

<p>[1]>[2], [2]>[3], [3]>[4], [5]>[4], [6]>[5]</p>

<p>우리는 [2]>[3], [3]>[4]로부터 [2]>[4]라는 것을 알 수 있다. 하지만, 물건 2와 물건 6을 비교하는 경우, 앞서의 결과만으로는 어느 것이 무거운지 알 수 없다. 이와 같이, 물건 2는 물건 1, 3, 4와의 비교 결과는 알 수 있지만, 물건 5, 6과의 비교 결과는 알 수 없다. 물건 4는 모든 다른 물건과의 비교 결과를 알 수 있다.&nbsp;</p>

<p>비교 결과가 모순되는 입력은 없다고 가정한다. 위 예제의 기존 측정 결과에 [3]>[1]이 추가되었다고 가정하자. 이 경우 [1]>[2], [2]>[3]이므로 우리는 [1]>[3]이라는 것을 예측할 수 있는데, 이는 기존에 측정된 결과 [3]>[1]과 서로 모순이므로 이러한 입력은 가능하지 않다.&nbsp;</p>

<p>물건의 개수 N 과 일부 물건 쌍의 비교 결과가 주어졌을 때, 각 물건에 대해서 그 물건과의 비교 결과를 알 수 없는 물건의 개수를 출력하는 프로그램을 작성하시오.&nbsp;</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 물건의 개수 N 이 주어지고, 둘째 줄에는 미리 측정된 물건 쌍의 개수 M이 주어진다. 단, 5 ≤ N ≤ 100 이고, 0 ≤ M ≤ 2,000이다. 다음 M개의 줄에 미리 측정된 비교 결과가 한 줄에 하나씩 주어진다. 각 줄에는 측정된 물건 번호를 나타내는 두 개의 정수가 공백을 사이에 두고 주어지며, 앞의 물건이 뒤의 물건보다 더 무겁다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>여러분은 N개의 줄에 결과를 출력해야 한다. i 번째 줄에는 물건 i 와 비교 결과를 알 수 없는 물건의 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6
5
1 2
2 3
3 4
5 4
6 5
','2
2
2
0
3
3
','SHORTEST_PATH'),
                                                                                                                (11898,'BAEKJOON','https://www.acmicpc.net/problem/10282',10282,'해킹','2초','256 MB',12,'<p>최흉최악의 해커 yum3이 네트워크 시설의 한 컴퓨터를 해킹했다! 이제 서로에 의존하는 컴퓨터들은 점차 하나둘 전염되기 시작한다. 어떤 컴퓨터 a가 다른 컴퓨터 b에 의존한다면, b가 감염되면 그로부터 일정 시간 뒤 a도 감염되고 만다. 이때 b가 a를 의존하지 않는다면, a가 감염되더라도 b는 안전하다.</p>

<p>최흉최악의 해커 yum3이 해킹한 컴퓨터 번호와 각 의존성이 주어질 때, 해킹당한 컴퓨터까지 포함하여 총 몇 대의 컴퓨터가 감염되며 그에 걸리는 시간이 얼마인지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스의 개수는 최대 100개이다. 각 테스트 케이스는 다음과 같이 이루어져 있다.</p>

<ul>
	<li>첫째 줄에 컴퓨터 개수 n, 의존성 개수 d, 해킹당한 컴퓨터의 번호 c가 주어진다(1 ≤ n ≤ 10,000, 1 ≤ d ≤ 100,000, 1 ≤ c ≤ n).</li>
	<li>이어서 d개의 줄에 각 의존성을 나타내는 정수 a, b, s가 주어진다(1 ≤ a, b ≤ n, a ≠ b, 0 ≤ s ≤ 1,000). 이는 컴퓨터 a가 컴퓨터 b를 의존하며, 컴퓨터 b가 감염되면 s초 후 컴퓨터 a도 감염됨을 뜻한다.</li>
</ul>

<p>각 테스트 케이스에서 같은 의존성 (a, b)가 두 번 이상 존재하지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스마다 한 줄에 걸쳐 총 감염되는 컴퓨터 수, 마지막 컴퓨터가 감염되기까지 걸리는 시간을 공백으로 구분지어 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
3 2 2
2 1 5
3 2 5
3 3 1
2 1 2
3 1 8
3 2 4
','2 5
3 6
','SHORTEST_PATH'),
                                                                                                                (11929,'BAEKJOON','https://www.acmicpc.net/problem/10473',10473,'인간 대포','1초','256 MB',14,'<p>당신은 세계적인 인간대포 서커스 공연자이다. 즉, 당신은 거대한 가짜 대포 안으로 기어올라가 먼 거리를 발사되며 사람들에게 기쁨을 주는 사람인 것이다. 오늘, 당신은 혼자가 아니다. 당신은 국제 인간대포 회의 겸 전시장에 와 있으며 이 곳에서는 수백명의 인간대포 전문가들이 서로의 경험을 공유하고 기술을 연마한다. 보통 당신의 서커스에서 당신은 한 대포만을 가지고 공연하는데 반해 이곳에서는 사용할 수 있는 수많은 대포가 있다.</p>

<p>여러 대포를 사용하면 회의장을 좀 더 편리하게 돌아다닐 수 있다. 만약 당신이 a장소에서 b장소까지 이동하려 한다면 a 부터 b까지 직선으로 걸어갈 수도 있고, 주변의 대포에 탑승해서 어딘가 다른 곳으로 발사되어 이동할 수도 있다. 발사되고 나면 내린 위치에서 도착점을 향해서 걸어갈 수도 있고, 다시 한 번 또 다른 대포를 이용하여 목적지에 더 빠르게 도착할 수도 있다. 그림 E.1처럼 배치된 지도에서 당신은 a에서 b로 이동하기 위하여 그림 E.2와 같은 경로로 걷거나 대포를 이용하여 움직일 수 있다. 화살표는 당신이 대포에서 발사되어 떨어진 점을 의미하며 직선은 당신이 달린 경로를 나타낸다.</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/images2/human1.png" style="height:199px; width:305px"></p>

<p style="text-align:center">그림 E.1</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/images2/human2.png" style="height:200px; width:299px"></p>

<p style="text-align:center">그림 E.2</p>

<p>당신은 5m/s의 속도로 달린다. 모든 대포는 당신을 당신이 원하는 임의의 방향으로 50m 날려줄 수 있다. 대포에 올라타고 발사되고 착륙하기까지는 정확히 2초가 걸린다. 대포는 장애물이 아니기 때문에 당신이 뛰는 도중에 대포가 있다면 점프해서 넘어가 마치 직선과 같이 움직일 수 있다. 당신의 현재 위치와 목적지의 위치, 그리고 대포들의 위치가 주어질 때 당신은 목적지에 가장 빨리가기 위한 경로를 알고 싶다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 한 개의 길찾기 문제를 표현한다. 첫 줄에는 두 개의 실수가 입력되며 각각은 당신이 현재 위치한 X, Y좌표이다. 두 번째 줄에는 목적지의 X, Y좌표가 실수로 입력된다. 이어지는 줄에는 대포의 숫자 정수 n이 주어진다. 남은 n줄에는 한 줄에 대포 하나의 위치 정보가 주어지며, 이는 실수로 주어지는 X, Y 좌표이다. 모든 좌표는 미터로 측정되었으며 n의 값은 0 이상 100 이하이다.&nbsp;입력으로 주어지는&nbsp;모든 X, Y좌표는 0 이상 500 이하의 실수이고,&nbsp;소수점 아래로 최대 두 자리까지만 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>한 줄에 걸쳐 목적지에 다다르기 위해 가장 빠른 시간을 출력하라. 실제 답과 0.001초 미만의 차이는 정답으로 인정한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','25.0 100.0
190.0 57.5
4
125.0 67.5
75.0 125.0
45.0 72.5
185.0 102.5
','19.984901
','SHORTEST_PATH'),
                                                                                                                (11928,'BAEKJOON','https://www.acmicpc.net/problem/10478',10478,'단위','3초','256 MB',13,'<p>과학에서 단위는 어디에서나 존재한다. 물리에서 단위는 거리(미터, 키로미터 등), 무게(키로그램, 그램 등), 그리고 다른 많은 양을 측정하는데 사용한다. 컴퓨터 과학자들은 용량의 단위(키로바이트, 메가바이트, ...)를 만들어 사용하고 있다. 당신은 여러 단위들이 주어질 때 그들이 몇 배 차이나는지를 찾는 프로그램을 작성하고자 한다.</p>

<p>여러 단위간의 관계를 표현하는 방법은 여러 가지가 존재하지만, 의미하는 바는 같다. 예를 들자면 미터계에 존재하는 단위는 1km = 1000m, 1m = 100cm, 1cm = 10mm로 표현할 수 있다. 다른 방법으로는 1km = 100000cm, 1km = 1000000mm, 1m = 1000mm 가 있다. 두 표현법에서는 모두 1km = 1000m = 100000cm = 1000000mm라는 똑같은 관계를 유추할 수 있다.</p>

<p>이 문제에서 당신은 단위를 큰 순서에서 작은 순서대로 정렬하고 싶다. 예제로 cm, km, m, mm중에서 km이 가장 큰 단위이며 그 이유는 1km이 1cm, 1m, 1mm보다 크기 때문이다. 남은 단위들도 같은 방법으로 정렬할 수 있다. 이 예제에 대한 답은 km m cm mm이다.</p>

<p>이 문제에서 단위간 크기 차이는 정수배로만 나게 된다. 그렇기 때문에 1인치 = 2.54cm같은 단위는 고려하지 않아도 된다. 또한 언제나 큰 단위가 작은 단위의 몇 배로 표현되도록 입력이 주어진다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>여러 개의 테스트 케이스가 주어진다. 각 테스트 케이스는 단위의 가짓수 N(2 ≤ N ≤ 10)으로 시작한다. 이어지는 줄에는 N개의 단위들이 주어진다. 각 단위는 최대 5글자이며 대소문자를 구분한다. 이어지는 N - 1개의 줄에는 서로 다른 두 단위의 관계가 주어진다. 입력 형식은 "단위의 이름" "=" "1보다 큰 정수" "왼쪽 단위보다 작은 오른쪽 단위의 이름" 순이다. 각 줄은 오른쪽의 작은 단위와 왼쪽 큰 단위가 몇 배 차이가 나는지를 설명한다. 각 단위는 N - 1줄중에 한번 이상 등장하며 주어진 입력만으로 전 단위간의 관계가 파악 가능하도록 주어진다. 단위간의 관계는 (2<sup>31</sup> - 1) 배보다 같거나 작은 차이가 나도록 구성되어 있다.</p>

<p>모든 입력이 끝나면 0이 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해서 한 줄에 걸쳐 단위들의 관계를 출력한다. 단위들은 왼쪽에서 오른쪽으로, 높은 단위에서 낮은 단위로 정렬되어 있어야 하며 가장 왼쪽의 단위가 1일 때 나머지 단위들은 몇인지를 "=" 기호를 통해서 나열한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
km m mm cm
km = 1000 m
m = 100 cm
cm = 10 mm
4
m mm cm km
km = 100000 cm
km = 1000000 mm
m = 1000 mm
6
MiB Mib KiB Kib B b
B = 8 b
MiB = 1024 KiB
KiB = 1024 B
Mib = 1048576 b
Mib = 1024 Kib
6
Kib B MiB Mib KiB b
B = 8 b
MiB = 1048576 B
MiB = 1024 KiB
MiB = 8192 Kib
MiB = 8 Mib
0
','1km = 1000m = 100000cm = 1000000mm
1km = 1000m = 100000cm = 1000000mm
1MiB = 8Mib = 1024KiB = 8192Kib = 1048576B = 8388608b
1MiB = 8Mib = 1024KiB = 8192Kib = 1048576B = 8388608b
','SHORTEST_PATH'),
                                                                                                                (11949,'BAEKJOON','https://www.acmicpc.net/problem/10715',10715,'JOI 공원','1초','256 MB',15,'<p>20XX년에 IOI나라에서 열리는 올림픽 준비의 일환으로 IOI나라에 있는 JOI공원을 정비하기로 했다. JOI공원에는 N개의 광장이 있고, 1부터 N까지 번호가 붙어 있다. 또, 공원에는 광장을 연결하는 M개의 도로가 있고, 1부터 M까지 번호가 붙어있다. 도로 i (1 ? i ? M)는 광장 Ai와 광장 Bi를 쌍방향으로 연결하며 그 길이는 Di이다. 어떤 광장에서도 한 개 이상의 도로를 통해서 다른 광장으로 가는 것이 가능하다.</p>

<p>정비계획은 다음과 같다. 지하도 설치에 관한 변수 C가 주어진다. 먼저, 0 이상의 정수 X를 고르고 광장 1로부터 거리가 X이하인 광장(광장 1을 포함해서) 모두를 지하도로 연결한다. 단, 광장 i와 광장 j의 거리는 광장 i로부터 광장 j까지 가는 데 걸리는 도로의 길이의 최소로 정의한다. 지하도를 설치하는 데에 드는 전체 비용은 C × X이다.</p>

<p>다음으로, 지하도로 연결된 광장들을 잇는 도로를 전부 철거한다. 도로를 철거하는 데에 비용은 들지 않는다.</p>

<p>마지막으로, 철거되지 않고 남은 도로를 전부 보수한다. 길이 d의 도로를 보수하는데에 드는 비용은 d이다.</p>

<p>정비계획을 실시하기 전, JOI공원에 지하도는 없다. JOI공원에 있는 광장의 정보와 지하도 설치 비용이 주어질 때, JOI공원을 정비하는 데에 드는 비용의 최솟값을 구하는 프로그램을 작성하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>표준입력으로 다음의 정보가 주어진다.</p>

<ul>
	<li>첫 번째 줄에는 정수 N, M, C가 공백을 두고 주어진다. 이것은 광장이 N개, 도로가 M개 있고, 지하도 설치에 관한 변수가 C라는 것을 의미한다.</li>
	<li>다음 M개 행에서는 정수 A<sub>i</sub>, B<sub>i</sub>, D<sub>i</sub> (1 ? i ? M) 가 공백을 두고 한 줄씩 주어진다. 이것은 도로 i가 광장 A<sub>i</sub>와 B<sub>i</sub>를 잇고, 그 길이가 D<sub>i</sub>라는 것을 의미한다.</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>JOI공원 정비에 드는 비용의 최솟값을 1줄로 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5 2
2 3 1
3 1 2
2 4 3
1 2 4
2 5 5
','14
','SHORTEST_PATH'),
                                                                                                                (11956,'BAEKJOON','https://www.acmicpc.net/problem/10776',10776,'제국','1초','256 MB',15,'<p>사회에 불만이 많은 지용이는 미적분학 교과서를 적당히 찢어서, 한 사람이 충분히 탈 만한 두께 K의 뗏목을 만들었다.</p>

<p>지용이는 이제 A 항구에서 출발해서 무인도 B에 자신의 제국을 건설하기 위해 멀고 먼 여행을 떠날 계획이다. (1 ≤ A, B ≤ N, A ≠ B)</p>

<p>바다에는 N개의 섬이 있고 M개의 바닷길이 있으며, 바닷길 외의 길로는 갈 수가 없으며 지용이는 A에서 B로 가는 동안 섬들을 거쳐가면서 항해할 계획이다.</p>

<p>각 바닷길은 지나가는 데 걸리는 시간 t<sub>i</sub>, 뗏목을 깎아내리는 정도 h<sub>i</sub> (cm) 를 가지고 있으며, 만약에 도착하기 전에 뗏목이 0cm 이하의 두께를 가지게 된다면 - 달리 말해서 경로 상의 h<sub>i</sub>의 합이 K 이상이 된다면, 수영을 못하는 지용이의 목숨을 보장하지 못할수도 있다(!)</p>

<p>지용이는 가장 빠른 시간 내에 A에서 B 지점까지 안전하게 가기를 원한다. 지용이를 도와 그러한 길의 길이를 출력해주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 정수 K, N, M (1 ≤ K ≤ 200; 2 ≤ N ≤ 2000; 1 ≤ M ≤ 10000)이 주어진다.</p>

<p>이 후 M개의 줄에 각 바닷길의 정보가 A, B, t<sub>i</sub>, h<sub>i</sub> (1 ≤ A, B ≤ N; 1 ≤ t<sub>i</sub> ≤ 10<sup>5</sup>; 0 ≤ h<sub>i</sub> ≤ 200) 형태로 주어진다. 이는 A와 B를 잇는 바닷길이 존재하며, 이 바닷길은 t<sub>i</sub>의 시간이 걸리며 h<sub>i</sub> 만큼 뗏목을 깎아내린다는 것을 의미한다. A ≠ B임이 보장된다.</p>

<p>마지막 줄에는 시작점과 도착점인 A, B가 주어진다. (1 ≤ A, B ≤ N; A ≠ B)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>지용이가 안전하게 A에서 B에서 항해할 수 있다면 그 때 걸리는 시간을, 그럴 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','10 4 7
1 2 4 4
1 3 7 2
3 1 8 1
3 2 2 2
4 2 1 6
3 4 1 1
1 4 6 12
1 4
','7
','SHORTEST_PATH'),
                                                                                                                (11957,'BAEKJOON','https://www.acmicpc.net/problem/10847',10847,'자카르타의 마천루','1초','256 MB',22,'<p>자카르타 시에는 <em>N</em>개의 큰 빌딩이 일직선 위에 위치하고 있다. 이들은 왼쪽부터 0, 1, ..., <em>N</em> - 1까지 번호가 붙어 있다. 자카르타에는 이들 말고 다른 큰빌딩은 없다.</p>

<p>자카르타에는 "도게"라고 불리는 신비한 생명체들이 살고 있다. 도게들은 0, 1, ..., <em>M</em> - 1 까지 번호가 붙어 있다. 도게 <em>i</em>는 최초에 빌딩 <em>B</em><sub><em>i</em></sub>에 위치하고 있다. 도게 <em>i</em>가 가진 신비한 힘은 그 능력치가 양의 정수 <em>P</em><sub><em>i</em></sub>로 표시된다. 도게는 이 신비한 힘으로 큰 빌딩들 간에 점프를 할 수 있다. 큰 빌딩 <em>b</em>에 있는 능력치가 <em>p</em>인 도게는 한번의 점프로 큰빌딩 <em>b</em> + <em>p</em>(0 ≤ <em>b</em> + <em>p</em> < <em>N</em>이라야 함) 혹은 큰빌딩 <em>b</em> - <em>p</em>(0 ≤ <em>b</em> - <em>p</em> < <em>N</em>이라야 함)로 이동할 수 있다.</p>

<p>도게 0이 가장 대단한 도게이며 모든 도게들의 지도자이다. 도게 0은 급한 소식이 있어 이 소식을 도게 1에게 전해야 한다. 물론 가장 빨리 소식이 전해지기를 바란다. 뉴스를 전해 들은 도게는 다음의 두가지 중 하나를 할 수 있다.</p>

<ul>
	<li>다른 큰 빌딩으로 점프.</li>
	<li>현재 위치한 빌딩의 다른 도게에게 소식을 전달</li>
</ul>

<p>도게들을 도와주는 프로그램을 작성해야 한다. 이 프로그램은 소식을 도게 1에게 전할 수 있는 최소한의 점프 횟수를 계산해야 한다. 만약 소식을 전달하는 것이 불가능한 경우라면 그것도 알아내야 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 줄에는 정수 <em>N</em>과 <em>M</em>이 주어진다. 이후 <em>M</em>개의 줄에는 두 자연수 <em>B</em><sub><em>i</em></sub>와 <em>P</em><sub><em>i</em></sub>가 주어진다.</p>

<ul>
	<li>0 ≤ B<sub>i</sub> < N</li>
	<li>1 ≤ N ≤ 30, 000</li>
	<li>1 ≤ P<sub>i</sub> ≤ 30, 000</li>
	<li>2 ≤ M ≤ 30, 000</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>출력은 단 한 줄이며, 최소의 점프 횟수라야 한다. 불가능한 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>다음 경우가 5 번의 점프로 가능한 시나리오이다.</p>

<ul>
	<li>도게 0이 큰빌딩 2로 점프, 또 큰빌딩 4로 점프 (2번 점프).</li>
	<li>도게 0이 소식을 도게 2에게 전함.</li>
	<li>도게 2가 큰빌딩 3으로 점프, 또 큰빌딩 2로 점프, 또 큰빌딩 1로 점프 (3번 점프).</li>
	<li>도게 2가 도게 1에게 소식을 전함.</li>
</ul>

				</div>
				</div>','5 3
0 2
1 1
4 1
','5
','SHORTEST_PATH'),
                                                                                                                (7041,'BAEKJOON','https://www.acmicpc.net/problem/10979',10979,'가넷이나 버는게 낫지 않아요?','10초','128 MB',17,'<p>석주는 유명한 게임 예능 ‘더 찌니어스’의 출연자다. 이 프로그램에서 오늘 ‘징검다리’라는 게임을 하려고 한다. 징검다리의 규칙은 다음과 같다:</p>

<ol>
	<li>N개의 섬과 M개의 양방향으로 통행이 가능한 다리가 그려진 지도가 있다.</li>
	<li>각 M개의 다리는 건너는데 걸리는 시간이 있다.</li>
	<li>각 M개의 다리는 건널 때마다 다리별로 정해진 가넷을 받게 된다.</li>
	<li>모든 플레이어는 1번 섬에서 게임을 시작하며, N번 섬에 도착한 순서대로 플레이어의 순위가 1등, 2등, …이 된다.</li>
	<li>1번 섬에서 N번 섬으로 가는 경로는 항상 존재한다.</li>
	<li>어떤 플레이어가 이용한 다리의 순서와 완전히 똑같은 순서로 다른 플레이어가 다리를 이용할 수 없다.</li>
</ol>

<p>오늘의 방송에서 석주는 다른 ‘더 찌니어스’의 출연자인 영석이와 비밀스럽게 연합을 맺었다! 오늘 석주는 영석이에게 1등을 내어주고, 2등으로 들어오는 전략을 짜려고 한다. (단, 공동 1등인 경우 2등을 했다고 인정한다.) 영석이는 가넷과 관계 없이 1등만 하면 된다는 생각을 하는 반면, 석주는 개당 현금 100만원의 가치를 갖는 가넷을 최대한 많이 모으려고 한다. 영석이와 석주는 다른 플레이어보다 먼저 경로를 선택할 기회를 갖고 있다.</p>

<p>이러한 방법으로 플레이 했을 때, 석주가 2등으로 N번 섬에 도착할 때까지 걸리는 시간과 그 때 모을 수 있는 가넷의 수는 얼마나 될까?&nbsp;</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 테스트 케이스의 수 T가 주어진다.</p>

<p>각 테스트 케이스의 첫 번째 줄에는 섬의 수 N(1 ≤ N ≤ 50000)과 다리의 수 M(1 ≤ M ≤ 200,000)가 주어진다.</p>

<p>각 테스트 케이스의 두 번째 줄부터 M+1번 줄까지 32비트 정수 x, y, t, g (1 ≤ x, y ≤ N, t, g는 1보다 큰 32비트 부호 있는 정수)가 주어진다. 이는 x에서 y로 가는 다리가 있으며, 다리를 건너는 데에 걸리는 시간은 t, 얻을 수 있는 가넷의 수는 g임을 의미한다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>i번째 테스트 케이스에서 석주가 t시간에 게임을 마치며 g가넷을 얻을 경우, “Game #i: Suckzoo ends game in time t, earning g garnet(s).”를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
4 5
1 2 1 1
1 3 1 2
1 4 1 1
2 4 1 1
3 4 1 2
2 2
1 2 1 1
1 2 1 99
3 2
1 2 1 1
2 3 99 1
','Game #1: Suckzoo ends game in time 2, earning 4 garnet(s).
Game #2: Suckzoo ends game in time 1, earning 99 garnet(s).
Game #3: Suckzoo ends game in time 102, earning 4 garnet(s).
','SHORTEST_PATH'),
                                                                                                                (11970,'BAEKJOON','https://www.acmicpc.net/problem/11097',11097,'도시 계획','2초','256 MB',18,'<p>경기도의 어떤 한 도시는 새 구역을 건설해서 도시를 확장하려고 한다. 그래서 이 도시에서는 우리의 친구 남서를 비롯한 여러 유명 건축가들을 불러 디자인을 시켰다. 남서는 도로망 디자인 담당이 되었는데,&nbsp;귀찮았던 나머지 구역 내의 지역들을 잇는&nbsp;모든 도로를 일방통행으로 만들어버렸다. (다행히도, 두 지역&nbsp;A B간에 A에서 B로 가는 도로, B에서 A로 가는 도로를 놓아 서로 연결할&nbsp;수 있다.)</p>

<p>남서는 자신의 도로망 계획을 지도해 그려본 결과, 일방통행 도로들 때문에 몇몇&nbsp;지역들에서&nbsp;특정 지역으로 갈 수 없다는 것을 깨달았다. 이 문제를 해결하기 위해서, 남서는 놀라운 접근법을 사용하기로 했다: 종이에 갈 수 있는 모든&nbsp;경우의 수를 쓰는 것이다. 좀 더 자세히&nbsp;말하자면, 각 지역 j에 대해서 j로부터 갈 수 있는&nbsp;모든 지역에 대해 리스트를 작성하는 것이다. 우리는 이 리스트를 도로망의&nbsp;갈 수 있는 지역&nbsp;리스트라고 부른다. (만약 A에서 B로 가는 길이, B에서 C로 가는 길이 있다면 A의 리스트에는 B,C가, B의 리스트에는 C가 적힐 것이다.)</p>

<p>그러나,&nbsp;남서는 문제를 해결하던 도중&nbsp;하드 디스크가 망가져 자기가 만든 도로망 계획을 모두 잃어버렸다. 그에게 남은 것은 책상 위의 종이 한 장 - 갈 수 있는 지역&nbsp;리스트 하나 뿐이다.</p>

<p>우리는 불쌍한 남서를 도와 이 갈 수 있는 리스트를 통해서 원래 도로망 계획을 알아내려고 한다. 물론, 한 갈 수 있는 리스트에 대해서 여러 도로망 구조가 만들어질 수 있다. 우리는 이 중에서 각 지역을 잇는 도로의 개수가 가장 적은 도로망 계획을 구하고자 한다. 그러면 아마도&nbsp;남서에게 큰 도움이 될 것이다.</p>

<p>주어진 갈 수 있는 지역 리스트에 대해서 가장 적은 도로로 이루어진 도로망 계획을 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 라인에는 전체 테스트 케이스의 개수 t 가 주어진다. 각 테스트 케이스는 빈 줄로 구분된다.</p>

<p>각 테스트 케이스의 첫 줄에는 지역의 개수를 나타내는 수 n&nbsp;(1 ≤ n ≤ 300)이 주어진다. 각 지역은 1부터 n까지 번호가 부여되어있다. 그 다음 n줄은 각각&nbsp;길이 n의 문자열이 주어진다. 각 i번째 줄은 지역 i로부터 갈 수 있는 지역들에 대한 정보를 나타낸다. 정확하게 말하자면, j번째 문자가 0이라면 지역 i에서 j로 갈 수 없는 것이고, j번째 문자가 1이라면 지역 i에서 j로 가는 방법이 하나 이상 존재하는 것이다. (물론, 지역 i에서 i로는 항상 갈 수 있다.)</p>

<p>주어진 갈 수 있는 지역 리스트는 실제로&nbsp;하나 이상의 도로망을 구성할 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스에 대해서, 가장 적은 도로로 이루어진 도로망 계획을 구한다. 첫 번째 줄에는 도로의 개수 m (물론, 이 m은 가능한 한 작아야 한다!)이 주어진다. 그리고 그 뒤로 이어지는 m개의 줄에는 두 개의 수&nbsp;a<sub>i</sub>와&nbsp;b<sub>i</sub>&nbsp;(1 ≤ a<sub>i</sub>, b<sub>i</sub>&nbsp;≤ n)을 출력한다. 이는 지역 a<sub>i</sub> 에서 b<sub>i</sub>로 가는 도로를 의미한다.</p>

<p>도로는 어떤 순서로 출력해도 상관 없다. 만약 하나 이상의 해가 존재한다면 그 중 어떤 것을 출력해도 문제 없다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2

3
111
011
001

4
1111
1111
0011
0011
','2
1 2
2 3

5
1 2
2 1
1 3
3 4
4 3
','SHORTEST_PATH'),
                                                                                                                (11994,'BAEKJOON','https://www.acmicpc.net/problem/11265',11265,'끝나지 않는 파티','2초','256 MB',11,'<p>파티를 좋아하는 민호는 끝없이 파티가 열리는 놀이동산 "민호월드"를 세웠다. 처음에는 한개의 파티장만을 가지고 있는 작은 놀이동산이었지만, 사람들의 점점 많이 찾아와 파티장을 증축했고 현재는 N개의 파티장을 가진 큰 놀이동산이 되었다. 민호는 파티장을 증축할때마다 편의를 위해 새로운 파티장과 기존의 모든 파티장이 직접적으로 연결이 될 수 있는 도로들을 만들었다. 이때 만들어진 도로들은 사용자들의 편의를 위해 일방통행으로 설계가 되었다.</p>

<p>파티장이 적을때는 괜찮았지만 파티장이 많아진 지금 다음과 같은 두 가지 문제점이 발생했다.</p>

<ol>
	<li>A 파티장에서 B 파티장으로 빨리 갈 수 있도록 직접 연결이 된 일방통행 도로를 만들었지만 A와 B가 아닌 다른 파티장을 경유해서 더 빨리 갈 수 있는 경우가 있을 수 있다.</li>
	<li>지금으로부터 C만큼의 시간 뒤에 B번 파티장에서 새롭게 파티가 열리는데 1번과 같은 이유때문에 현재 있는 A파티장에서 B번 파티장까지 파티가 열리는 시간까지 맞춰 갈 수 있는지 쉽게 알 수 없다.</li>
</ol>

<p>이러한 문제점으로 이용객들의 불만이 점점 커져갔고 민호는 이를 해결하기 위해 빠른 네비게이션 서비스를 실행하기로 하였으나 서비스 요청이 너무 많아 업무가 마비되기에 이르렀다. 이에 민호는 천재프로그래머인 당신에게 이 문제를 해결해 달라고 요청하였다. 민호를 도와 한 파티장에서 다른 파티장에까지 시간내에 도착할 수 있는지 없는지 알아봐주는 프로그램을 작성하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 번째 줄에는 파티장의 크기 N(5 ≤ N ≤ 500)과 서비스를 요청한 손님의 수 M(1 ≤ M ≤ 10,000) 이 주어진다. 각각의 파티장은 1번부터 N번까지 번호가 붙여져 있다. 다음에는 N개의 줄에 걸쳐 각각 N개의 수가 주어진다. i번째 줄의 j번째 수 T(1 ≤ T ≤ 1,000,000)는 i번 파티장에서 j번 파티장으로 직접적으로 연결된 도로를 통해 이동하는 시간을 의미한다.</p>

<p>다음 M개의 줄에는 세개의 정수 A, B, C가 주어진다. A(1 ≤ A ≤ N) 는 서비스를 요청한 손님이 위치한 파티장의 번호, B(1 ≤&nbsp;B ≤ N) 다음 파티가 열리는 파티장의 번호, C(1 ≤ C ≤ 1,000,000,000)는 지금으로부터 다음 파티가 열리는데 걸리는 시간을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>M개의 줄에 걸쳐 서비스를 요청한 손님이 시간내에 다른 파티장에 도착할 수 있으면 “Enjoy other party”를, 시간내에 도착할 수 없으면 "Stay here”를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 10
0 4 4 8 7
7 0 7 7 4
1 4 0 5 4
5 2 2 0 7
1 4 1 6 0
1 3 8
2 4 1
4 1 1
1 5 5
3 2 1
3 2 5
4 5 10
5 3 2
1 4 1
1 4 11
','Enjoy other party
Stay here
Stay here
Stay here
Stay here
Enjoy other party
Enjoy other party
Enjoy other party
Stay here
Enjoy other party
','SHORTEST_PATH'),
                                                                                                                (12005,'BAEKJOON','https://www.acmicpc.net/problem/11403',11403,'경로 찾기','1초','256 MB',10,'<p>가중치 없는 방향 그래프 G가 주어졌을 때, 모든 정점 (i, j)에 대해서, i에서 j로 가는 길이가 양수인 경로가 있는지 없는지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 N (1 ≤ N ≤ 100)이 주어진다. 둘째 줄부터 N개 줄에는 그래프의 인접 행렬이 주어진다. i번째 줄의 j번째 숫자가 1인 경우에는 i에서 j로 가는 간선이 존재한다는 뜻이고, 0인 경우는 없다는 뜻이다. i번째 줄의 i번째 숫자는 항상 0이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>총 N개의 줄에 걸쳐서 문제의 정답을 인접행렬 형식으로 출력한다. 정점 i에서 j로 가는 길이가 양수인 경로가 있으면 i번째 줄의 j번째 숫자를 1로, 없으면 0으로 출력해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
0 1 0
0 0 1
1 0 0
','1 1 1
1 1 1
1 1 1
','SHORTEST_PATH'),
                                                                                                                (12010,'BAEKJOON','https://www.acmicpc.net/problem/11404',11404,'플로이드','1초','256 MB',12,'<p>n(2&nbsp;≤ n ≤ 100)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1 ≤ m ≤ 100,000)개의 버스가 있다. 각 버스는 한 번 사용할 때 필요한 비용이 있다.</p>

<p>모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는데 필요한 비용의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 n이 주어지고 둘째 줄에는 버스의 개수 m이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 버스의 정보는 버스의 시작 도시 a, 도착 도시 b, 한 번 타는데 필요한 비용 c로 이루어져 있다. 시작 도시와 도착 도시가 같은 경우는 없다. 비용은 100,000보다 작거나 같은 자연수이다.</p>

<p>시작 도시와 도착 도시를 연결하는 노선은 하나가 아닐 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>n개의 줄을 출력해야 한다. i번째 줄에 출력하는 j번째 숫자는 도시 i에서 j로 가는데 필요한 최소 비용이다. 만약, i에서 j로 갈 수 없는 경우에는 그 자리에 0을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
14
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
3 5 10
3 1 8
1 4 2
5 1 7
3 4 2
5 2 4
','0 2 3 1 4
12 0 15 2 5
8 5 0 1 1
10 7 13 0 3
7 4 10 6 0
','SHORTEST_PATH'),
                                                                                                                (12009,'BAEKJOON','https://www.acmicpc.net/problem/11562',11562,'백양로 브레이크','1초','256 MB',13,'<p>서울 소재 Y모 대학교에서 대규모 공사를 진행하면서, 학교가 마치 미로처럼 변해버리고 말았다. 공사 이전까지는 어떤 건물에서 출발하더라도 다른 모든 건물로 갈 수 있는 길이 있었으나, 공사가 진행되면서 어떻게 한 건진 알 수 없지만 일방통행만 가능한 길이 많이 늘고 말았다.</p>

<p>컴퓨터과학과 학생 남규는 전공 수업을 듣고 교양 수업을 들으러 가던 중 길을 잃어 3일 밤낮을 헤매다가 공학관에서 종합관으로 가는 길은 존재하지 않는다는 결론을 내렸다.</p>

<p>3일 사이에 과제도 내지 못하고 출석도 하지 못해 학사경고 위기에 처한 남규는 전공을 살려 현재 일방통행인 길들 중 반드시 양방향으로 바꿔야만 하는 길이 몇 개인지 조사해 학교에 건의하기로 마음을 먹었다.</p>

<p>남규는 여러 건물들 사이를 직접 잇는 길들을 모두 조사했고, 그 중 어떤 길들이 일방통행인지, 또는 양방향 통행이 가능한지를 모두 체크했다.</p>

<p>남규의 프로그램은 간단하다. 출발지와 도착지를 입력하면 도착지까지 가기 위해 최소 몇 개의 길을 양방향으로 바꿔야만 하는지를 출력해준다. 프로그램이 완성되었다는 소문이 퍼지자, 남규처럼 길을 잃고 헤맨 경험이 있는 학생들은 남규에게 묻기 시작했다.</p>

<p>"공학관에서 대강당 갈 수 있어?"</p>

<p>"상경대 별관에서 학관으로는?"</p>

<p>남규는 매번 손으로 타이핑해 입력하고 결과를 보내주는 데에 지치고 말았다.</p>

<p>결국 앓아누운 남규를 위해 학생들의 질문을 해결할 새로운 프로그램을 만들어보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 Y대학교 건물의 수 n과 길의 수 m이 주어진다. (n ≤ 250, m ≤ n * (n - 1) / 2 )</p>

<p>다음 m줄에 걸쳐, u v b (1 ≤ u ≤ n, 1 ≤ v ≤ n, u != v, b = 0 또는 1) 의 형태로 길에 대한 정보가 주어진다.</p>

<p>b가 0일 경우 u에서 v로 가는 일방통행 길인 것이고, b가 1일 경우 u와 v를 잇는 양방향 길이다.</p>

<p>어떤 두 건물 사이를 잇는 길은 최대 한 개이다.</p>

<p>다음 줄에 학생들의 질문의 수 k가 주어진다. (1 ≤ k ≤ 30,000)</p>

<p>다음 k줄에 걸쳐 s e (1 ≤ s ≤ n, 1 ≤ e ≤ n)의 형태로 학생들의 질문들이 주어진다.</p>

<p>이는 질문한 학생이 건물 s에서 건물 e로 가고 싶다는 의미이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>출력은 k줄에 걸쳐 이루어진다.</p>

<p>각 질문에 대해, 최소 몇 개의 일방통행인 길을 양방향 통행으로 바꿔야 출발지에서 도착지로 갈 수 있는지를 출력한다.</p>

<p>모든 길을 양방향으로 바꾸더라도 서로 도달 불가능한 건물은 없다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 3
1 2 0
2 3 1
3 4 0
7
1 1
1 2
2 1
1 4
4 1
2 3
4 3
','0
0
1
0
2
0
1
','SHORTEST_PATH'),
                                                                                                                (12019,'BAEKJOON','https://www.acmicpc.net/problem/11569',11569,'신호등','1초','256 MB',17,'<p>다익스트라 알고리즘(Dijkstra algorithm)은 어떤 변(edge)도 음수 가중치를 갖지 않는 그래프에서 주어진 출발점과 도착점 사이의 최단 경로 문제를 푸는 알고리즘이다. 다시 말해서 임의의 그래프에서 꼭짓점들이 각각 교차로를 나타내고, 변들을 교차로 사이를 연결 하는 도로의 길이를 나타낸다면, 다익스트라 알고리즘을 이용하여 두 교차로의 최단 경로를 구할 수 있다.&nbsp;</p>

<p>그러나 실생활에서는 각 교차로에 신호등이 있기 때문에, 교차로를 항상 지날 수 있는 것은 아니다. 그래서 최단거리가 아닌 다른 곳으로 우회하는 것이 목적지까지 더 빠르게 갈 수 있는 경우도 있다.</p>

<p>신호등은 주기 P초 단위마다 신호가 바뀐다. 어떤 교차로 i에 연결된 교차로들의 번호를 x1, x2, ..., xn (x1 < x2 < ... < xn)이라 했을 때, 처음 P초간은 x1에서 온 차들만 i를 거쳐 x2, ..., xn으로 갈 수 있고, 그 다음 P초간은 x2 에서 온 차들만 i를 거쳐 x1, x3, ..., xn으로 갈 수 있다. 이런 식으로 P초마다 교차로 번호 오름차순으로 교차로 i를 이용하여 다른 교차로로 통행할 수 있으며, n×P초가 지나면 다시 x1부터 P초간 교차로 i를 이용할 수 있게 된다.</p>

<table class="table">
	<tbody>
		<tr>
			<td style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11568/1.png" style="height:118px; width:132px"></td>
			<td style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11568/2.png" style="height:111px; width:122px"></td>
			<td style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11568/3.png" style="height:118px; width:124px"></td>
		</tr>
		<tr>
			<td style="text-align: center;">(a)</td>
			<td style="text-align: center;">(b)</td>
			<td style="text-align: center;">(c)</td>
		</tr>
	</tbody>
</table>

<p>예를 들어 현재 교차로 번호가 3번이고 3번과 연결된 교차로 번호가 1번, 4번, 5번 교차로 일 때 0초 이상 P초 미만까지는 위 그림 (a)와 같이 1번 교차로와 연결 된 도로를 이용하여 3번 교차로에 도착한 차들이 다른 교차로로 가는 도로를 이용할 수 있다. P초 이상 2×P초 미만까지는 그림 (b)와 같이 4번 교차로와 연결된 도로를 이용하여 3번 교차로에 도착한 차들이 다른 교차로로 가는 도로를 이용할 수 있다. 마찬가지로 2×P초 이상 3×P초 미만까지는 그림 (c)와 같이 5번 교차로와 연결된 도로를 이용하여 3번 교차로에 도착한 차들이 1번이나 4번 교차로로 갈 수 있다. 그 다음 3×P초 이상 4×P초 미만동안은 다시 (a)와 같은 상태가 된다.</p>

<p>다음과 같은 조건 하에서 자동차가 출발지에서 목적지 까지 가는 최소 시간을 알아보자.</p>

<ul>
	<li>자동차는 1초에 1의 길이만큼 이동한다.</li>
	<li>자동차는 하나의 교차로에서 출발하고 목적지 역시 교차로이다.</li>
	<li>교차로의 모든 신호등은 자동차의 출발과 동시에 동작하기 시작한다고 가정한다.</li>
	<li>출발 교차로와 도착 교차로에서는 신호를 기다릴 필요가 없다.</li>
	<li>어떤 교차로에서 같은 교차로로 돌아오는 길(self loop)은 없다.</li>
</ul>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11568/4.png" style="height:140px; width:157px"></p>

<p>예를 들어, 위와 같은 도로에서 시작 교차로가 1번이고, 4번 교차로가 목적지라고 하자. 그러면 1번 교차로에서 출발한 차는 10초에 3번 교차로에 도착한다.</p>

<p>이때, 3번 교차로의 주기가 2초라면, 10초 이상부터 12초 미만까지는 5번 교차로에서 온 차들만 도로를 이용할 수 있으므로, 1번 교차로에서 온 차가 4번 교차로로 가기 위해서는 12초까지 대기해야 한다. 따라서 1번 교차로에서 4번 교차로까지 가는 데는 14초가 걸린다.</p>

<p>모든 도로의 길이와 각 신호등의 주기가 주어졌을 때 출발 교차로에서 목적 교차로까지 가는 최소 시간을 구해보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 테스트케이스의 개수 T (1 ≤ T ≤ 10)가 입력으로 주어진다. 이어서 각 테스트 케이스마다 첫 번째 줄에는 교차로의 수 N (1 ≤ N ≤ 10<sup>5</sup>), 도로의 수 M (0 ≤ M ≤ 10<sup>5</sup>), 출발 교차로의 번호 S (1 ≤ S ≤ N), 도착 교차로의 번호 D (1 ≤ D ≤ N)가 주어진다.</p>

<p>두 번째 줄부터 연속한 M개의 줄에 a, b, c (1 ≤ a, b ≤ N, a ≠ b, 1 ≤ c ≤ 10<sup>5</sup>)가 입력으로 주어지는 데 a번 교차로와 와 b번 교차로 사이에 길이가 c인 양방향 도로가 있음을 의미한다.</p>

<p>그 다음 줄에 각 교차로의 신호등의 주기 P<sub>i</sub> (1 ≤ i ≤ n, 1 ≤ P<sub>i</sub> ≤ 100)가 공백 하나를 사이에 두고 주어진다.</p>

<p>모든 두 교차로 사이에는 최대 한 개의 도로가 존재할 수 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트케이스마다 출발 교차로에서 도착 교차로까지 자동차를 이용하여 가는데 걸리는 최소 시간을 출력하여라. 출력의 결과가 int 범위를 넘을 수 있으므로 64bit 변수를 이용하여 출력하는 것을 권장한다. 만약 두 교차로로 갈 수 있는 경로가 없을 경우 -1을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
5 5 1 5
1 2 6
3 2 6
3 4 6
4 5 6
3 5 6
10 10 10 10 10
3 1 3 1
1 2 3
10 10 10
5 5 1 5
1 2 6
3 2 6
3 4 6
4 5 6
3 5 6
5 5 5 5 5
1 0 1 1
3
','36
-1
22
0
','SHORTEST_PATH'),
                                                                                                                (12016,'BAEKJOON','https://www.acmicpc.net/problem/11581',11581,'구호물자','2초','256 MB',10,'<p>서기 2050년 엄청나게 강력한 폭풍이 인천을 강타했다. 강력한 폭풍의 영향으로 모든 사람은 대피소로 대피하였으며, 많은 도로가 유실되었다. 그나마 남아있는 도로도 모든 표지판과 가로등이 작동을 멈춰 제대로 된 길을 찾기란 불가능에 가까웠다.</p>

<p>이런 심각한 상황에 민지는 대피소에 구명 물자를 보내려고 한다. 서기 2050년 인천의 모든 길은 교차로와 도로만으로 이루어져 있다. 한 교차로와 다른 교차로는 일방통행 도로로 연결되어 있으며, 한 교차로와 여러 교차로가 연결될 수 있다. 그리고 도로에 한번 진입하면 교차로에 도착할 때까지 도로를 벗어날 수 없다.</p>

<p>민지는 구호물자로 가득 찬 트럭을 출발시키려고 했지만, 운행을 거부한 트럭운전사들 때문에 난관에 봉착했다. 강력한 폭풍의 영향으로 내비게이션은 정확하지 않고, 도로를 구분할 수 있는 표지판이 망가졌기 때문에 트럭운전사들은 교차로에서 어떤 도로를 선택해야 할지 모른다. 이러한 상황에서 특정 도로를 임의로 선택하면 이미 지나쳤던 교차로를 또다시 방문하는 일이 발생할 수 있고, 만약 그런 상황이 발생하면 트럭의 기름이 부족해 대피소에 도착하지 못할 수 있다.</p>

<p>대피소에 반드시 구호물자를 보내야 한다고 생각하는 민지는 현재 위치인 1번 교차로에서 대피소가 있는 N번 교차로까지 어떤 도로를 선택하며 가더라도 지나친 교차로를 다시 방문하지 않는다는 것을 증명해 트럭 운전사들을 설득하려 한다.</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11581/1.png" style="height:100px; width:233px"></p>

<p>위 그림은 대피소가 3번에 있다고 했을 때 가능한 두 가지 모양이다. 왼쪽 그림에서는 어떠한 도로를 선택하더라도 지나친 교차로를 다시 방문하지 않고 대피소가 있는 3번에 무사히 도착할 수 있다. 하지만 오른쪽 그림에서는 방문했던 교차로를 다시 방문할 가능성이 있다.</p>

<p>민지를 도와 어떠한 길을 선택하더라도 같은 교차로를 다시 방문하는 경우가 있는지 없는지를 판단하는 프로그램을 작성하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 교차로의 수 N(1 ≤ N ≤ 100)이 주어진다. 그다음에 1번 교차로부터 N-1번 교차로의 상태가 각각 두 줄에 걸쳐 차례대로 주어진다. (1 ≤ i ≤ N-1)번째 교차로와 연결된 교차로의 수 M<sub>i</sub>(0 ≤ M<sub>i</sub> ≤ N)가 주어지고 그다음 줄에는 i번째에서 갈 수 있는 교차로의 번호 C<sub>i</sub>(1 ≤ C<sub>i</sub> ≤ N)가 주어진다. N번 교차로는 대피소가 있는 곳이기 때문에 연결 상태가 주어지지 않는다. 구호물자가 출발하는 장소는 항상 1번이며 대피소가 있는 곳 역시 항상 N번이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>1번 교차로에서 N번 교차로까지 가는 과정 중 지나쳤던 교차로를 다시 방문하는 경우가 생길 수 있으면 CYCLE, 그렇지 않다면 NO CYCLE을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
2
2 3
1
3
','NO CYCLE
','SHORTEST_PATH'),
                                                                                                                (12029,'BAEKJOON','https://www.acmicpc.net/problem/11657',11657,'타임머신','1초','256 MB',12,'<p>N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는&nbsp;버스가 M개 있다. 각 버스는 A, B, C로 나타낼 수 있는데, A는 시작도시, B는 도착도시, C는 버스를 타고 이동하는데 걸리는 시간이다. 시간 C가 양수가 아닌 경우가 있다. C = 0인 경우는 순간 이동을 하는 경우, C < 0인 경우는 타임머신으로 시간을 되돌아가는 경우이다.</p>

<p>1번 도시에서 출발해서 나머지 도시로 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N (1 ≤ N ≤ 500), 버스 노선의 개수 M (1 ≤ M ≤ 6,000)이 주어진다. 둘째 줄부터 M개의 줄에는 버스 노선의 정보 A, B, C&nbsp;(1 ≤ A, B ≤ N,&nbsp;-10,000 ≤ C ≤ 10,000)가 주어진다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>만약 1번 도시에서 출발해 어떤 도시로 가는 과정에서 시간을 무한히 오래 전으로 되돌릴 수 있다면 첫째 줄에 -1을 출력한다. 그렇지 않다면 N-1개 줄에 걸쳐 각 줄에 1번 도시에서 출발해 2번 도시, 3번 도시, ..., N번 도시로 가는 가장 빠른 시간을 순서대로 출력한다. 만약 해당 도시로 가는 경로가 없다면 대신 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 4
1 2 4
1 3 3
2 3 -1
3 1 -2
','4
3
','SHORTEST_PATH'),
                                                                                                                (12052,'BAEKJOON','https://www.acmicpc.net/problem/11779',11779,'최소비용 구하기 2','1초','256 MB',13,'<p>n(1≤n≤1,000)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. 그러면 A번째 도시에서 B번째 도시 까지 가는데 드는 최소비용과 경로를 출력하여라. 항상 시작점에서 도착점으로의 경로가 존재한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 n(1≤n≤1,000)이 주어지고 둘째 줄에는 버스의 개수 m(1≤m≤100,000)이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.</p>

<p>그리고 m+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.</p>

<p>둘째 줄에는 그러한 최소 비용을 갖는 경로에 포함되어있는 도시의 개수를 출력한다. 출발 도시와 도착 도시도 포함한다.</p>

<p>셋째 줄에는 최소 비용을 갖는 경로를 방문하는 도시 순서대로 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
8
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
1 5
','4
3
1 3 5
','SHORTEST_PATH'),
                                                                                                                (12056,'BAEKJOON','https://www.acmicpc.net/problem/11780',11780,'플로이드 2','1초','256 MB',14,'<p>n(1 ≤ n ≤ 100)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1 ≤&nbsp;m ≤ 100,000)개의 버스가 있다. 각 버스는 한 번 사용할 때 필요한 비용이 있다.</p>

<p>모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는데 필요한 비용의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 n이 주어지고 둘째 줄에는 버스의 개수 m이 주어진다. 그리고 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 버스의 정보는 버스의 시작 도시 a, 도착 도시 b, 한 번 타는데 필요한 비용 c로 이루어져 있다. 시작 도시와 도착 도시가 같은 경우는 없다. 비용은 100,000보다 작거나 같은 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>먼저, n개의 줄을 출력해야 한다. i번째 줄에 출력하는 j번째 숫자는 도시 i에서 j로 가는데 필요한 최소 비용이다. 만약, i에서 j로 갈 수 없는 경우에는 그 자리에 0을 출력한다.</p>

<p>그 다음에는 n×n개의 줄을 출력해야 한다. i×n+j번째 줄에는 도시 i에서 도시 j로 가는 최소 비용에 포함되어 있는 도시의 개수 k를 출력한다. 그 다음, 도시 i에서 도시 j로 가는 경로를 공백으로 구분해 출력한다. 이때, 도시 i와 도시 j도 출력해야 한다. 만약, i에서 j로 갈 수 없는 경우에는 0을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
14
1 2 2
1 3 3
1 4 1
1 5 10
2 4 2
3 4 1
3 5 1
4 5 3
3 5 10
3 1 8
1 4 2
5 1 7
3 4 2
5 2 4
','0 2 3 1 4
12 0 15 2 5
8 5 0 1 1
10 7 13 0 3
7 4 10 6 0
0
2 1 2
2 1 3
2 1 4
3 1 3 5
4 2 4 5 1
0
5 2 4 5 1 3
2 2 4
3 2 4 5
2 3 1
3 3 5 2
0
2 3 4
2 3 5
3 4 5 1
3 4 5 2
4 4 5 1 3
0
2 4 5
2 5 1
2 5 2
3 5 1 3
3 5 2 4
0
','SHORTEST_PATH'),
                                                                                                                (12057,'BAEKJOON','https://www.acmicpc.net/problem/11781',11781,'퇴근 시간','1초','256 MB',15,'<p>엔지니어의 행복도는 퇴근 후 집에 도착하는 시각이 늦을수록 낮아진다는 것이 증명되었다.</p>

<p>조이의 대표 레드는 엔지니어의 행복도를 최대한 높여야 할 의무가 있기 때문에, 신중하게 퇴근 시간을 조정하기로 하였다.</p>

<p>하지만 퇴근 시간을 조정하려면 먼저 엔지니어들이 집에 도착하는 시간을 알아야만 했다.</p>

<p>이 문제를 미카에게 맡기려고 했지만, 6시가 넘어 미카는 이미 퇴근해버렸기 때문에 레드는 고민에 빠지고 말았다.</p>

<p>레드를 도와 레드와 조이 엔지니어 모두의 행복도를 높여보도록 하자!</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11781/1.png" style="height: 240px; width: 391.667px;"></p>

<p>회사가 있는 서울은 N개의 지점으로 되어있다.</p>

<p>각 지점은 1번부터 N번의 번호를 가지고 있고, 회사는 1번 지점에 있다.</p>

<p>M개의 도로들은 서로 다른 지점을 연결하고 있으며, 임의의 지점에서 모든 지점으로 이동할 수 있다.</p>

<p>각각의 도로는 길이를 가지고 있으며, 거리 1을 이동하는 데 1분이 걸린다.</p>

<p>편의상 퇴근은 0분에 한다고 가정한다.</p>

<p>서울은 퇴근 시간에 도로가 막힌다.</p>

<p>퇴근 시간이 아닐 때에는 거리 1을 이동하는 데 1분이 걸리지만,</p>

<p>퇴근 시간이 겹칠 경우 혼잡한 도로는 거리 1을 이동하는 데 2분이 걸리게 된다.&nbsp;(물론 퇴근 시간에 막히지 않는 도로도 있다.)</p>

<p>만약 퇴근 시간이 10분부터 20분이고 어떤 도로에 진입한 순간이 15분이며, 도로의 길이는 10이라면 이 도로를 전부 통과하는 데 걸리는 시간은</p>

<ul>
	<li>퇴근 시간 : 5분(15 ~ 20분)동안 간 거리 = 2.5를 가는 데 걸린 시간 : 5분</li>
	<li>퇴근 시간 외의 시간 : 나머지 거리 7.5를 가는 데 걸린 시간 : 7.5분</li>
</ul>

<p>총 12.5분이 된다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 N, M과 퇴근 시간의 시작과 끝을 의미하는 S와 E가 정수로 주어진다. (2 ≤ N ≤ 5,000, 1 ≤ M ≤ 100,000, 0 ≤ S < E ≤ 1,000,000,000)</p>

<p>다음 M개의 줄에는 서로 다른 정수 A, B와 도로의 길이를 의미하는 L, 그리고 t1, t2가 주어진다. (1 ≤ A, B ≤ N, 1 ≤ L ≤ 1,000,000,000, t1, t2 = 0 또는 1)</p>

<p>t1, t2는 A,B 사이에 퇴근 시간에 도로가 정체되는지 여부이다.</p>

<ul>
	<li>t1 = 1 일 때는 퇴근 시간에 A에서 B로 이동시 정체됨을 의미하며,</li>
	<li>t2 = 1 일 때는 퇴근 시간에 B에서 A로 이동시 정체됨을 의미한다.</li>
	<li>만약 t1 혹은 t2가 0이라면 각각의 이동시 정체되지 않음을 의미한다.</li>
</ul>

<p>퇴근할 때는 같은 길로는 2번 이상 이동하지 않는다.&nbsp;사원들은 언제나 최대한 빨리 집에 가고 싶어하기 때문에 일부러 늦는 길을 선택하지 않는다.&nbsp;또한 이동할 때 멈추지 않고 계속 이동한다.</p>


					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>모든 지점에 대해서 회사에서 출발했을 때 가장 늦게 도착하게 되는 지점까지의 도착 시각을 첫째 줄에 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>퇴근 시간이 없다면 7번에 도착하는 시각인 15분이 가장 늦게 된다.</p>

<p>하지만 3번까지 가는 경로가 정체가 되기 때문에 3번에 도착하는 시각이 16분으로 가장 늦게 된다.</p>

<ul>
	<li>1번 도로 : 5만큼 5분간 이동 -> 퇴근 시간 시작 -> 나머지 3을 6분동안 이동 : 11분만에 이동</li>
	<li>2번 도로 : 2분동안 1만큼 이동 -> 퇴근 시간이 끝남 -> 나머지 3을 3분동안 이동 : 5분</li>
</ul>

<p>합 16분</p>

<ul>
	<li>조이는 ICPC 문제 풀이 능력을 중요하다고 생각하고 있습니다.</li>
	<li>이 문제를 푼 분에게는 조이코퍼레이션 지원 시 선착순 10명에게 서류전형 통과의 기회를 드리고 있습니다.</li>
	<li>이외에도 BOJ문제를 많이 푸신 분은 지원 시 어드밴티지가 있습니다.</li>
	<li>자세한 채용 정보는 <a href="http://zoyi.co/job">http://zoyi.co/job</a>&nbsp;에서 확인해주세요.</li>
</ul>

				</div>
				</div>','7 6 5 13
1 2 8 1 0
3 2 4 0 1
1 5 5 0 0
1 4 10 0 0
1 6 10 0 0
6 7 5 0 0
','16
','SHORTEST_PATH'),
                                                                                                                (12061,'BAEKJOON','https://www.acmicpc.net/problem/11900',11900,'차이 그래프','1초','32 MB',15,'<p>승현이는 정점의 개수가 N개인 방향성 그래프 G와 음이 아닌 정수들로 구성된 배열 A[1],A[2],?,A[N?1]을 가지고 있습니다. 정점들에는 0 이상 N?1 이하의 정수 번호가 붙어 있으며, 각 간선에는 가중치가 존재합니다. 초기에 이 방향성 그래프에는 간선이 하나도 없었기 때문에, 승현이는 허전함을 느꼈습니다. 이에 그는 아래와 같은 방식으로 간선들을 잇기로 했습니다.</p>

<ul>
	<li>임의의 두 정점 u와 v (0≤u,v<N,u≠v)에 대하여,
	<ul>
		<li>만약 u>v이고 A[u?v]의 값이 양수라면, u에서 v로 향하는 가중치가 A[u?v]인 간선을 추가합니다.</li>
		<li>만약 u<v이고 A[u?v+N]의 값이 양수라면, u에서 v로 향하는 가중치가 A[u?v+N]인 간선을 추가합니다.</li>
	</ul>
	</li>
</ul>

<p>승현이는 이렇게 간선을 추가한 뒤에 임의의 정점에서 출발하여 다른 정점에 도착하는 최단 경로의 길이를 구하고자 합니다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 그래프 G의 정점의 수 N (5≤N≤2,000)이 주어집니다. 두 번째 줄에 A[1],A[2],?,A[N?1] (0≤A[1],A[2],?,A[N?1]≤10,000)이 공백을 사이로 두고 주어집니다. 세 번째 줄에 질의의 수 Q (1≤Q≤200,000)가 주어집니다. 이후 Q개 줄이 주어지는데, 이 중 i번째 줄 (1≤i≤Q)에는 두 개의 정수 a<sub>i</sub>와 b<sub>i</sub> (0≤a<sub>i</sub>,b<sub>i</sub><N, a<sub>i</sub>≠b<sub>i</sub>)가 공백을 사이로 두고 주어집니다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>여러분은 각 질의마다 a<sub>i</sub>번 정점에서 출발하여 b<sub>i</sub>번 정점에 도착하는 최단 경로의 길이를 한 줄에 하나씩 입력에서 주어진 순서대로 출력해야 합니다. 단 이러한 최단 경로가 존재하지 않을 경우 ?1을 출력합니다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
3 2 0 0
4
1 0
2 1
3 0
0 1
','3
3
5
4
','SHORTEST_PATH'),
                                                                                                                (12028,'BAEKJOON','https://www.acmicpc.net/problem/11909',11909,'배열 탈출','2초','256 MB',11,'<p>상수는 2차원 배열 A[1..n][1..n] (n≥2, n은 자연수)을 가지고 있습니다. 이 배열의 각 원소는 1 이상 222 이하의 정수입니다.</p>

<p>배열을 가지고 놀던 상수를 본 승현이는, 질투심이 불타올라 상수를 A[1][1]에 가둬 버렸습니다! 최소한의 양심이 있던 승현이는 A[n][n]에 출구를 만들어 놓고 이 사실을 상수에게 알려줬습니다.</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11909/1.png" style="height:164px; width:203px"></p>

<p style="text-align: center;">[그림 1] n=4라면 상수는 A[1,1]에 있고, 출구는 A[4][4]에 있습니다.</p>

<p>상수는 가능한 한 빨리 출구인 A[n][n]에 도달하고자 합니다. 상수가 A[i][j]에 있다고 가정했을 때, 상수는 최단 경로로 이동하기 위해 아래와 같은 조건을 만족하며 이동합니다.</p>

<ol>
	<li>1≤i,j<n이라면, 상수는 A[i][j+1] 또는 A[i+1][j]로만 건너갑니다.</li>
	<li>i=n,1≤j<n이라면, A[i][j+1]로만 건너갑니다.</li>
	<li>1≤i<n,j=n이라면 A[i+1][j]로만 건너갑니다.</li>
	<li>i=j=n인 경우 바로 출구로 갑니다.</li>
</ol>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11909/2.png" style="height:190px; width:234px"></p>

<p style="text-align: center;">[그림 2] n=5라고 가정합시다. (ㄱ)는 1번 조건을 만족하고, (ㄴ)는 2번 조건을 만족하며, (ㄷ)는 3번 조건을 만족합니다.</p>

<p>그러나 건너갈 때에도 제약이 따릅니다. 상수가 A[a][b]에서 A[c][d]로 건너가려면 A[a][b]>A[c][d]를 만족해야 합니다. 상수는 왜인지 이런 조건을 만족하면서 이동할 수 없을 것 같았습니다. 다행히도, 승현이가 상수를 배열에 가둬버리기 전에, 상수는 배열의 각 원소에 버튼을 만들어 놓아서, 이 버튼을 누르면 해당 원소의 값이 1 증가하도록 했습니다. (물론 상수는 자신이 위치해 있는 원소의 버튼만 누를 수 있습니다.) 이 버튼 덕분에, 상수는 항상 배열을 탈출할 수 있습니다!</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11909/3.png" style="height:98px; width:122px"></p>

<p style="text-align: center;">[그림 3] n=2라고 가정합시다. A[1][1]=5>A[1][2]=2이므로, 상수는 A[1][1]에서 A[1][2]로 건너갈 수 있습니다. 상수가 A[1][1]에서 A[2][1]로 건너가려면, A[1][1]에 있는 버튼을 두 번 눌러 A[1][1]의 값을 7로 만들면 됩니다.</p>

<p>하지만 버튼을 한 번 누르는 데에는 1원의 비용이 듭니다. 상수는 돈을 가능한 한 적게 들이면서 배열을 탈출하고자 합니다. 상수를 도와주세요.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 n이 주어집니다. (n ≤ 2,222)</p>

<p>다음에 n개 줄이 주어집니다. 이 중 i(1≤i≤n)번째 줄에는 n개의 수 A[i][1],A[i][2],?,A[i][n?1],A[i][n]이 공백을 사이로 두고 차례대로 주어집니다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 상수가 배열을 탈출하기 위해 들여야 할 최소 비용(원 단위)을 출력합니다.</p>

<p>&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>상수는 아래 그림과 같은 방법으로 탈출할 수 있습니다.</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11909/4.png" style="height:202px; width:640px"></p>

<p>이렇게 하면 A[1][1]에서 2원, A[3][2]에서 1원의 비용이 들어 총 3원의 비용이 들게 되며, 이것이 최소입니다.</p>

				</div>
				</div>','4
5 2 4 3
6 5 1 2
3 4 5 3
7 4 3 1
','3
','SHORTEST_PATH'),
                                                                                                                (12032,'BAEKJOON','https://www.acmicpc.net/problem/11952',11952,'좀비','2초','512 MB',14,'<p>JOI국은 N개의 도시와 M개의 도로로 이루어져 있다. 모든 도시는 도로로 연결되어 있으며, 각 도로를 통하지 않고는 다른 도시로 갈 수 없다.</p>

<p>이번에 K개의 도시는 좀비에 의해서 점령당했다. ㅠㅠ</p>

<p>따라서 경곽이는 벙커가 있는 가장 안전한 도시로 피난을 가기로 했다. 경곽이는 현재 1번 도시에 살고 있으며, 벙커가 있는 가장 안전한 피난처는 N번 도시이다. 1번 도시와 N번 도시는 아직 좀비에게 점령당하지 않았다.</p>

<p>경곽이는 각 도시를 이동할 때마다 1박을 해야하고, 1박을 할 때 숙박비를 지불해야 한다. 만약 그 도시가 좀비에게 점령당했다면 숙박이 불가능하다.</p>

<p>좀비에게 점령당한 도시로 부터 S번 이하의 이동으로 이동할 수 있는 모든 도시는 위험한 도시로 정의하며, 그 이외의 도시는 안전한 도시로 정의할 때,&nbsp;만약 그 도시가 안전한 도시라면 숙박비가 p원이고,&nbsp;만약 그 도시가 위험한 도시라면 숙박비는 q원이다. (좀비로부터 보호받기 위한 특별한 시큐리티 서비스를 제공하기 때문에 좀 더 비싸다 ㅠㅠ)</p>

<p>경곽이가 도시 1부터 N으로 이동하는 데 드는 최단 비용을 구하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 N, M, K, S가 공백으로 구분되어 입력된다. 각 값은 도시의 수, 길의 수, 좀비에게 점령당한 도시의 수, 위험한 도시의 범위 를 의미한다.&nbsp;(2 ? N ? 100000, 1 ? M ? 200000, 0 ? K ? N - 2, 0 ? S ? 100000)</p>

<p>다음 줄에는 숙박비를 나타내는 정수 p, q가 입력된다.&nbsp;(1 ? p ＜ q ? 100000)</p>

<p>그 다음 줄부터 K줄에 걸쳐서 좀비에게 점령당한 도시가 한 줄에 하나씩 주어진다.</p>

<p>다음 줄부터 M줄에 걸쳐서 각 도시를 연결하는 도로의 정보가 주어진다. 이 도로는 서로 양방향으로 이동 가능하다.</p>

<p>1번 도시에서 N번 도시로 항상 도달 가능하다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>최소 비용을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11952/1.png" style="height:224px; width:221px"></p>

<p>도시는 이렇게 생겼다. 이때</p>

<p>1 - 2 - 5 - 9 - 10 - 11 - 12 - 13</p>

<p>으로 이동하는 것이 가장 싼 가격으로 이동할 수 있는 방법이다.</p>

<p>이때 1과 13에서는 숙박할 필요가 없다.</p>

				</div>
				</div>','13 21 1 1
1000 6000
7
1 2
3 7
2 4
5 8
8 9
2 5
3 4
4 7
9 10
10 11
5 9
7 12
3 6
4 5
1 3
11 12
6 7
8 11
6 13
7 8
12 13
','11000
','SHORTEST_PATH'),
                                                                                                                (12070,'BAEKJOON','https://www.acmicpc.net/problem/12441',12441,'약속장소 정하기 (Small)','5초','512 MB',12,'<p>서로 다른 도시에 사는 친구들이 급히 약속장소를 정하려고 한다. 하지만 길이 너무 복잡하고 서로 멀리 살아서, 어느 정도 시간 여유를 잡아야 할지 알아내기가 어렵다. 친구들이 한 곳에서 만나는 데 걸리는 최소한의 시간은 얼마인가?</p>

<p>약속장소를 잡기 위해 펼친 지도에는 도시와 각 도시를 잇는 도로에 대한 정보가 있다. 이것은 두 도시를 연결하는 길을 의미하는 것이 아니라, 연속된 길들의 집합으로서 여러 도시를 지나간다.</p>

<p>더욱 자세히 말하면, 각각의&nbsp;<strong>T</strong>&nbsp;개의 테스트 케이스에 대해 다음과 같은 것이 주어진다.</p>

<ul>
	<li><strong>N</strong>: 도시의 숫자</li>
	<li><strong>P</strong>: 친구의 수</li>
	<li><strong>M</strong>: 도로의 숫자</li>
</ul>

<p>각 도시는 순서대로&nbsp;<strong>1</strong>부터&nbsp;<strong>N</strong>까지의 번호가 붙여져 있다.</p>

<p>또한,&nbsp;<strong>1</strong>부터&nbsp;<strong>P</strong>까지의 번호가 붙여져 있는 각 친구&nbsp;<strong>i</strong>에 대해, 다음과 같은 것이 주어진다.</p>

<ul>
	<li><strong>X<sub>i</sub></strong>: 친구가 출발하는 도시의 번호.</li>
	<li><strong>V<sub>i</sub></strong>: 친구가 거리 1 만큼 움직이는 데 걸리는 시간.</li>
</ul>

<p>&nbsp;</p>

<p>각 도시를 잇는 도로&nbsp;<strong>j</strong>에 대해서는 다음과 같은 것이 주어진다. 도로는 단순히 두 도시를 잇는 길이 아니라, 여러 도시를 순서대로 잇는 연속된 길의 모임이다.</p>

<ul>
	<li><strong>D<sub>j</sub></strong>: 도로가 지나가는 도시들 사이의 거리. (한 도로 위에서, 인접한 도시 사이의 거리는&nbsp;<strong>D<sub>j</sub></strong>로 같다.)</li>
	<li><strong>L<sub>j</sub></strong>: 도로가 지나가는 도시들의 숫자</li>
	<li><strong>{C<sub>j,k</sub>}</strong>: 도로가 이어주는 도시의 번호가 순서대로 나열된다.</li>
</ul>

<p>&nbsp;</p>

<p>위의 정보들을 이용해서, 동시에 출발한 친구들이 한 도시에서 만나는 데 필요한 최소한의 시간을 구하시오. 만약 다들 모일 수 있는 도시가 없다면 -1을 대신 출력하시오.</p>

<p>모임은 도시에서만 이루어질 수 있으며, 먼저 도착한 친구들은 다른 친구들을 기다릴 수 있다.</p>

<p>두 도시를 바로 연결하는 도로는 둘 이상 존재할 수 없으며, 어떤 도시에 도착하였을 때, 해당 도시를 지나는 도로 간의 이동은 추가 시간 없이 자유로이 할 수 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 다음과 같은 형식으로 주어진다.</p>

<p><br>
T<br>
N P M<br>
X1 V1<br>
X2 V2<br>
...<br>
XP VP<br>
D1 L1 C1,1 C1,2 ... C1,L1<br>
D2 L2 C2,1 C2,2 ... C2,L2<br>
...<br>
DM LM CM,1 CM,2 ... CM,LM<br>
N P M<br>
....</p>

<h3>제한</h3>

<ul>
	<li>각 테스트 케이스에 대한 답은 2147483647 이하이다.</li>
	<li>1 ≤&nbsp;<strong>T</strong>&nbsp;≤ 30.</li>
	<li>1 ≤&nbsp;<strong>V<sub>i</sub></strong>&nbsp;≤ 200.</li>
	<li>1 ≤&nbsp;<strong>D<sub>i</sub></strong>&nbsp;≤ 200.</li>
	<li>2 ≤&nbsp;<strong>L<sub>j</sub></strong>&nbsp;≤&nbsp;<strong>N</strong>.</li>
	<li>1 ≤&nbsp;<strong>N</strong>&nbsp;≤ 110.</li>
	<li>2 ≤&nbsp;<strong>P</strong>&nbsp;≤ 10.</li>
	<li>1 ≤&nbsp;<strong>M</strong>&nbsp;≤ 10.</li>
	<li>2 ≤&nbsp;<strong>L<sub>j</sub></strong>≤ 25.</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 테스트 케이스에 대해서, x가 1번부터 시작하는 케이스 번호라고 하고 y가 각 케이스에 해당하는 답이라고 할 때 출력 파일의 각 줄에 "Case #x: y"와 같은 형식으로 출력한다. 친구들이 한 도시에서 만나는 것이 불가능하다면, 최소 시간 대신 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><img alt="" src="https://onlinejudgeimages.s3.amazonaws.com/problem/12441/images-40.png"></p>

				</div>
				</div>','3
2 2 1
1 1
2 2
1 2 1 2
5 2 2
1 1
5 100
1 3 1 2 3
2 3 4 2 5
5 2 2
1 1
5 5
1 2 1 2
1 3 3 4 5
','Case #1: 1
Case #2: 3
Case #3: -1
','SHORTEST_PATH'),
                                                                                                                (12071,'BAEKJOON','https://www.acmicpc.net/problem/12442',12442,'약속장소 정하기 (Large)','5초','512 MB',12,'<p>서로 다른 도시에 사는 친구들이 급히 약속장소를 정하려고 한다. 하지만 길이 너무 복잡하고 서로 멀리 살아서, 어느 정도 시간 여유를 잡아야 할지 알아내기가 어렵다. 친구들이 한 곳에서 만나는 데 걸리는 최소한의 시간은 얼마인가?</p>

<p>약속장소를 잡기 위해 펼친 지도에는 도시와 각 도시를 잇는 도로에 대한 정보가 있다. 이것은 두 도시를 연결하는 길을 의미하는 것이 아니라, 연속된 길들의 집합으로서 여러 도시를 지나간다.</p>

<p>더욱 자세히 말하면, 각각의&nbsp;<strong>T</strong>&nbsp;개의 테스트 케이스에 대해 다음과 같은 것이 주어진다.</p>

<ul>
	<li><strong>N</strong>: 도시의 숫자</li>
	<li><strong>P</strong>: 친구의 수</li>
	<li><strong>M</strong>: 도로의 숫자</li>
</ul>

<p>각 도시는 순서대로&nbsp;<strong>1</strong>부터&nbsp;<strong>N</strong>까지의 번호가 붙여져 있다.</p>

<p>또한,&nbsp;<strong>1</strong>부터&nbsp;<strong>P</strong>까지의 번호가 붙여져 있는 각 친구&nbsp;<strong>i</strong>에 대해, 다음과 같은 것이 주어진다.</p>

<ul>
	<li><strong>X<sub>i</sub></strong>: 친구가 출발하는 도시의 번호.</li>
	<li><strong>V<sub>i</sub></strong>: 친구가 거리 1 만큼 움직이는 데 걸리는 시간.</li>
</ul>

<p>&nbsp;</p>

<p>각 도시를 잇는 도로&nbsp;<strong>j</strong>에 대해서는 다음과 같은 것이 주어진다. 도로는 단순히 두 도시를 잇는 길이 아니라, 여러 도시를 순서대로 잇는 연속된 길의 모임이다.</p>

<ul>
	<li><strong>D<sub>j</sub></strong>: 도로가 지나가는 도시들 사이의 거리. (한 도로 위에서, 인접한 도시 사이의 거리는&nbsp;<strong>D<sub>j</sub></strong>로 같다.)</li>
	<li><strong>L<sub>j</sub></strong>: 도로가 지나가는 도시들의 숫자</li>
	<li><strong>{C<sub>j,k</sub>}</strong>: 도로가 이어주는 도시의 번호가 순서대로 나열된다.</li>
</ul>

<p>&nbsp;</p>

<p>위의 정보들을 이용해서, 동시에 출발한 친구들이 한 도시에서 만나는 데 필요한 최소한의 시간을 구하시오. 만약 다들 모일 수 있는 도시가 없다면 -1을 대신 출력하시오.</p>

<p>모임은 도시에서만 이루어질 수 있으며, 먼저 도착한 친구들은 다른 친구들을 기다릴 수 있다.</p>

<p>두 도시를 바로 연결하는 도로는 둘 이상 존재할 수 없으며, 어떤 도시에 도착하였을 때, 해당 도시를 지나는 도로 간의 이동은 추가 시간 없이 자유로이 할 수 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 다음과 같은 형식으로 주어진다.</p>

<p><br>
T<br>
N P M<br>
X1 V1<br>
X2 V2<br>
...<br>
XP VP<br>
D1 L1 C1,1 C1,2 ... C1,L1<br>
D2 L2 C2,1 C2,2 ... C2,L2<br>
...<br>
DM LM CM,1 CM,2 ... CM,LM<br>
N P M<br>
....</p>

<h3>제한</h3>

<ul>
	<li>각 테스트 케이스에 대한 답은 2147483647 이하이다.</li>
	<li>1 ≤&nbsp;<strong>T</strong>&nbsp;≤ 30.</li>
	<li>1 ≤&nbsp;<strong>V<sub>i</sub></strong>&nbsp;≤ 200.</li>
	<li>1 ≤&nbsp;<strong>D<sub>i</sub></strong>&nbsp;≤ 200.</li>
	<li>2 ≤&nbsp;<strong>L<sub>j</sub></strong>&nbsp;≤&nbsp;<strong>N</strong>.</li>
	<li>1 ≤&nbsp;<strong>N</strong>&nbsp;≤ 10000.</li>
	<li>2 ≤&nbsp;<strong>P</strong>&nbsp;≤ 100.</li>
	<li>1 ≤&nbsp;<strong>M</strong>&nbsp;≤ 1000.</li>
	<li>2 ≤&nbsp;<strong>L<sub>j</sub></strong>≤ 150.</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각각의 테스트 케이스에 대해서, x가 1번부터 시작하는 케이스 번호라고 하고 y가 각 케이스에 해당하는 답이라고 할 때 출력 파일의 각 줄에 "Case #x: y"와 같은 형식으로 출력한다. 친구들이 한 도시에서 만나는 것이 불가능하다면, 최소 시간 대신 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><img alt="" src="https://onlinejudgeimages.s3.amazonaws.com/problem/12441/images-40.png"></p>

				</div>
				</div>','3
2 2 1
1 1
2 2
1 2 1 2
5 2 2
1 1
5 100
1 3 1 2 3
2 3 4 2 5
5 2 2
1 1
5 5
1 2 1 2
1 3 3 4 5
','Case #1: 1
Case #2: 3
Case #3: -1
','SHORTEST_PATH'),
                                                                                                                (12108,'BAEKJOON','https://www.acmicpc.net/problem/12752',12752,'도시들','4초','256 MB',22,'<p>사과나라에는 n 개의 도시들이 존재하며, 이 중 k 개의 도시는 국왕 구사과가 자주 방문하는 중요한 도시들이다. 또한 사과나라에는 m 개의 도시와 도시를 잇는 도로가 존재한다. 각각의 도시들은 1~n의 번호가 매겨져 있다.</p>

<p>어느 날 갑자기 사과나라에 폭풍이 몰아쳤다. 이 폭풍은 사과나라 건국 이래 최대 규모의 자연 재해였으며, 이때문에 모든 도로들은 제 구실을 하지 못하게 되었다. 따라서 사과나라의 대신들은 도시들 간의 교류를 이어나가기 위해 도로들을 재건하기로 결정하였다. 이를 위해, 대신들은 각각의 도로를 재건하는 데 드는 비용을 조사하여 알아내었다.</p>

<p>그러나, 평소 사치와 향락에 찌든 생활을 하던 구사과 때문에 사과나라의 국고는 텅텅 비어버렸고, 이때문에 모든 도로를 재건할 수는 없었다. 대신들은 일단 급한 대로 <strong>모든 중요한 도시가 서로 이어질 수 있도록 </strong>(즉, 각각의 중요한 도시들에서 다른 모든 중요한 도시에 도달할 수 있도록) 우선적으로 도로를 재건하고자 한다.</p>

<p>대신들은 세계 최고의 프로그래머인 당신에게 <strong>모든 중요한 도시가 서로 이어질 수 있도록 도로를 재건하는 최소 비용</strong>을 알아내도록 의뢰하였다. 우매한 사과나라 사람들에게 당신의 실력을 보여 주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 도시의 개수 n, 중요한 도시의 개수 k, 도로의 개수 m이 공백으로 구분되어 주어진다.</p>

<p>두 번째 줄에는 공백으로 구분된 k개의 수들이 주어진다. 이 수들은 1 이상 n 이하의 서로 다른 정수들로, 중요한 도시들의 번호를 나타낸다.</p>

<p>다음 줄부터는 m개의 줄에 걸쳐 각 도로에 대한 정보가 주어진다. 각 줄에는 세 정수 a, b, c가 주어진다. 이는 이 도로가 도시 a와 도시 b를 잇고 있으며, 이 도로를 재건하는 데에 c의 비용이 소모된다는 뜻이다.</p>

<p>모든 도시들이 도로를 통해 연결되어 있다</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>당신은 <strong>모든 중요한 도시가 서로 이어질 수 있도록 도로를 재건하는 최소 비용</strong>을 하나의 정수로 출력해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 3 6
1 3 4
1 2 4
1 3 9
1 4 6
2 3 2
2 4 5
3 4 8
','11
','SHORTEST_PATH'),
                                                                                                                (12117,'BAEKJOON','https://www.acmicpc.net/problem/12763',12763,'지각하면 안 돼','2초','128 MB',14,'<p>준하는 평범한 대학생이다. 이번 학기는 수강신청에 완전히 실패했다. 그러다 보니 수업시간표가 엉망이라 수업마다 옮겨 다닐 건물이 많다.</p>

<p>이런 건물들에는 모두 이름이 있지만, 매번 건물의 이름까지 모두 적기엔 잉크가 아까웠다. 그래서 편의상, 옮겨다닐 건물이 \(N\)개가 있다면 1호관 ~ \(N\)호관이라 부르기로 했다.</p>

<p>이렇듯 건물이 많다 보니 지각을 하는 경우가 빈번했는데, 1호관에 있는 준하는 \(N\)호관에서 듣는 이번 수업에 출석하지 못하면 F 학점을 받을 위기에 놓여있다.</p>

<p>준하는 지각을 면하기 위해 택시를 자주 타곤 했는데, 각 건물들 간에 이동하는 데 걸리는 시간과 택시비를 노트에 메모해두었다. 노트가 몇 장 없기때문에 이미 적어놨던 길은 다시 적지 않았다. 건물 사이에는 길이 하나밖에 없어서 노트에 이미 적은 것과 다른 시간이나 다른 택시비인 경우는 한차례도 없었다. 가는 길과 오는 길 역시 모두 같았다.</p>

<p>학사경고가 걸린 긴박한 상황이기 때문에, 노트에 적히지 않은 새로운 길을 간다거나 하는 모험은 피하기로 했다.</p>

<p>아래는 건물이 5개가 있는 경우이다.</p>

<p><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/12763/image.png" style="height: 261.667px; width: 335px;"></p>

<p>그동안의 메모를 이용해 지금 1호관에서 듣는 수업이 끝나고 3시간 안에 5호관까지 가야 한다. 급하게 노트에 펼쳐봤지만, 어떻게 가야 하는 지 도저히 모르겠다.</p>

<p>가진 돈이라고는 4,000원밖에 없는 준하는 3시간 이내에 5호관까지 가야 하는 데, 이번 달은 남은 돈으로 살아가야 하기 때문에 가진 돈의 지출을 최소화하고 싶다.</p>

<p>이런 일이 앞으로도 자주 있을 것이기 때문에, 이번 수업은 포기하고 다음을 위해 일반화된 프로그램을 당신에게 간곡히 부탁했다.</p>

<p>건물과 건물 사이에 이동하는 데 걸리는 시간과 택시비, 현재 가지고 있는 돈을 알고 있을 때, \(T\)분 내에 얼마의 최소 지출로 도착할 수 있는지 출력하는 프로그램을 만들어주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 건물의 개수 \(N (2 \le N \le 100) \)이 주어진다.</p>

<p>둘째 줄에 수업 출석까지 남은 시간 \(T (1 \le T \le 10,000) \)(분) 과 현재 가지고 있는 돈 \(M (0 \le M \le 10,000) \)이 차례로 주어진다.</p>

<p>셋째 줄에 노트에 적혀있는 건물 사이의 길의 개수 \(L(1 ≤ L \le10,000)\)이 주어진다.</p>

<p>다음 \(L\)개의 줄에 걸쳐 길의 양 끝에 있는 두 건물의 번호와 이동 시간(분), 택시비가 주어진다. 이동시간과 택시비는 모두 10,000을 넘지 않는 자연수이다. 양 끝에 있는 두 건물의 번호는 서로 다름이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>\(T\)분 이내에 1번 건물에서 \(N\)번 건물까지 \(M\)만큼의 돈 이하로 갈 수 있다면, 최소 얼마의 지출이 예상되는지 출력한다.</p>

<p>만약 갈 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>1호관에서 3호관, 4호관을 거쳐 5호관으로 간다면, 3시간만에 3500원의 지출로 도착할 수 있다. (다행히 이번 수업은 휴강이었다고 합니다.)</p>

				</div>
				</div>','5
180 4000
7
1 2 60 2000
1 4 120 4000
2 5 90 2000
3 1 120 1000
3 4 30 1500
3 5 40 4500
5 4 30 1000
','3500
','SHORTEST_PATH'),
                                                                                                                (12113,'BAEKJOON','https://www.acmicpc.net/problem/12766',12766,'지사 배정','5초','512 MB',21,'<p>Innovative Consumer Products Company (ICPC)는 비밀 프로젝트를 시작하려하고 있다. 이 프로젝트는 s개의 하위 프로젝트로 구성된다. 이 프로젝트에 관련된&nbsp;b(≥s)개의 ICPC의 지사들이 있고, ICPC는 각 지사에 하위 프로젝트들 중 하나를 맡기고자 한다. 다시 말하자면, 지사들은 s개의 분리된 그룹으로 나누어지고, 각 그룹이 한 하위 프로젝트를 맡게 된다.</p>

<p>각 달의 마지막에, 각 지사는 그 그룹에 있는 다른 모든 지사에게 메시지를 보낼 것이다(서로 다른 지사에는 다른 메시지를 보낸다). ICPC는 통신을 위한 특별한 프로토콜을 가지고 있다. 각 지사 i는&nbsp;그 지사와 본부에만 공개된&nbsp;비밀키 k<sub>I</sub>를 가지고 있다. 지사 i가 지사 j에 메시지를 보내고 싶어한다고 하자. 지사 i는 비밀키 k<sub>I</sub>로 메시지를 암호화한다. 신뢰할 수 있는 운반원이 이 메시지를 지사로부터 본부까지 전달한다. 본부는 키 k<sub>I</sub>로 메시지를 복호화하고, 키 k<sub>j</sub>로 다시 암호화시킨다. 운반원은 새롭게 암호화된 메시지를 (키 k<sub>j</sub>를 가지고 있는) 지사 j로 전달한다. 보안적인 문제 때문에, 운반원은 동시에 오직 하나의 메시지만 전달할 수 있다.</p>

<p>도로망과 지사와 본부의 위치가 주어졌을 때, 당신은 각 지사에 하위 프로젝트를 배정하는 모든 경우에 대해서,&nbsp;월말에 운반원이 메시지를 전달하기 위해 이동해야하는 최소 거리를 알아내야 한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫줄은 4개의 정수 n, b, s, 그리고 r로 이루어진다. n (2 ≤ n ≤ 5 000)은 교차로의 개수, b (1 ≤ b ≤ n ? 1)는 지사의 수, s (1 ≤ s ≤ b)는 하위 프로젝트의 수, r (1 ≤ r ≤ 50 000)은 도로의 수를 나타낸다. 교차로들은 1부터 n까지 숫자가 주어지고, 지사들은 교차로 1부터 교차로 b에 위치하고, 본부는 교차로 b+1에 위치한다. 다음 r개의 줄은 각각 3개의 정수 u, v, l로 이루어진다.&nbsp;이것은 교차로 u에서 교차로 v로 가는 길이 있고(1 ≤ u, v ≤ n), 이 길이가 l(0 ≤ ℓ ≤ 10 000)임을 뜻한다. u에서 v로 가는 길은 두번 이상 주어지지 않고, 어느 교차로에서든 다른 모든 교차로로 갈 수 있음이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>운반원이 이동해야 할 최소 거리를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 4 2 10
5 2 1
2 5 1
3 5 5
4 5 0
1 5 1
2 3 1
3 2 5
2 4 5
2 1 1
3 4 2
','13
','SHORTEST_PATH'),
                                                                                                                (12119,'BAEKJOON','https://www.acmicpc.net/problem/12834',12834,'주간 미팅','1초','512 MB',12,'<p>만약 KIST 기사단 2기로 여러분이 선발된다면, 서울 월곡에 있는 KIST와 양재에 있는 씨알푸드에서 팀이 함께 만나 의논하고 함께 작업할 시간을 가지게 된다. 누구나 그 회의 장소에 빨리 가고 싶은 마음은 똑같을 것이다.</p>

<p>각 장소를 노드로 생각하고, 연결된 도로를 간선으로 생각하면 그래프를 구성할 수 있다. KIST 기사단 N명의 집이 있는 노드 번호와 KIST, 씨알푸드의 노드 번호가 주어지고, 한 사람의 거리 d<sub>i</sub> = (집-KIST의 최단 거리) + (집-씨알푸드의 최단 거리)로 정의된다. 단, 도달할 수 없는 경우의 최단 거리는 -1로 정의한다. 예를 들어, 어떤 사람이 KIST로는 갈 수 없고 씨알푸드까지의 최단 거리가 10인 경우 이 사람의 거리 d는 9이고, 다른 사람이 KIST, 씨알푸드로 모두 갈 수 없을 경우 이 사람의 거리 d는 -2이다. 이때 Σd<sub>i</sub>의 값을 출력하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 KIST 기사단 팀원의 수 N, 장소의 수 V, 도로의 수 E가 주어진다. (N ≤ 100, V ≤ 1000, E ≤ 10000)</p>

<p>둘째 줄에 KIST의 위치 A와 씨알푸드의 위치 B가 주어진다. (1 ≤ A, B ≤ V)</p>

<p>셋째 줄에 팀원 N명의 집의 위치 H<sub>i</sub>가 공백을 사이에 두고 주어진다. (1 ≤ i ≤ N, 1 ≤ H<sub>i</sub> ≤ V)</p>

<p>넷째 줄부터 E+3번째 줄까지는 도로의 양 끝 장소 a, b와 길이 l이 주어진다. (1 ≤ a, b ≤ V, 1 ≤ l ≤ 100)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>모든 사람의 최단 거리의 합을 출력한다. 단, KIST나 씨알푸드로 갈 수 없는 경우에는 -1로 처리한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2 5 10
3 5
2 4
3 2 91
1 3 44
5 3 93
1 4 1
4 5 53
4 2 23
5 1 60
2 1 63
3 4 38
5 2 17
','156
','SHORTEST_PATH'),
                                                                                                                (12109,'BAEKJOON','https://www.acmicpc.net/problem/12875',12875,'칙령','2초','512 MB',12,'<p>총 N명의 사람이 살고있는 왕국이 있다. 각 사람이 가지고 있는 돈은 음이 아닌 정수이다.</p>

<p>사람들은 1번부터 N번까지 번호가 매겨져 있다.</p>

<p>어느 날. 왕이. 다음과. 같은. 칙령을. 선포했다.</p>

<p>모든 사람이 가지고 있는 돈은 자신의 친구가 가지고 있는 돈과 최대 d원 만큼 차이가 나야 한다.</p>

<p>즉, 어떤 사람이 가지고 있는 돈이 x가 되려면, 친구 중에 x-d보다 작거나, x+d보다 큰 돈을 가진 사람이 없어야 한다.</p>

<p>사람들은 가능한 돈의 분배 방법 중에서 돈을 가장 많이 가진 사람과 적게 가진 사람의 차이가 가장 크게 되도록 분배하려고 한다.</p>

<p>사람의 수와 친구 관계가 주어졌을 때, 왕의 칙령을 지켜 돈을 분배하는 방법을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 사람의 수 N (2 ≤ N ≤ 50)이 주어진다.&nbsp;</p>

<p>둘째 줄에는 d (0 ≤ d ≤ 1,000)가 주어진다.</p>

<p>셋째 줄부터 N개의 줄에는 사람들의 친구 관계가 주어진다. i번째 줄의 j번째 문자가 Y인 경우에는 i번 사람과 j번 사람이 친구라는 뜻이고, N인 경우는 친구가 아니라는 뜻이다. 항상 i번째 줄의 i번째 문자는 N이며, i번째 줄의 j번째 글자와 j번째 줄의 i번째 글자는 같다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p><span style="line-height:1.6em">첫째 줄에 가능한 돈의 분배 방법 중에서 돈을 가장 많이 가진 사람과 적게 가진 사람의 차이가 최대가 될 때의 최댓값을 출력한다. 이 차이가 무한대인 경우에는 -1을 출력한다.</span></p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1의 경우에 왕국에는 세 명의 사람들이 살고 있다. 1과 2는 친구이고, 2와 3은 친구이다. 가능한 방법 중 돈을 가장 많이 가진 사람과 적게 가진 사람의 차이의 최댓값은 20이다. 사람 1이 100원을 갖고, 2가 110원을, 3이 120원을 가지면 된다.</p>

<p>예제 2의 경우에는 친구 관계가 없다. 따라서, 아무런 제약이 없기 때문에 정답은 무한대이다.</p>

				</div>
				</div>','3
10
NYN
YNY
NYN
','20
','SHORTEST_PATH'),
                                                                                                                (9761,'BAEKJOON','https://www.acmicpc.net/problem/12908',12908,'텔레포트 3','2초','512 MB',11,'<p>수빈이는 크기가 무한대인 격자판 위에 살고 있다. 격자판의 각 점은 두 정수의 쌍 (x, y)로 나타낼 수 있다.</p>

<p>제일 처음에 수빈이의 위치는 (xs, ys)이고, 집이 위치한 (xe, ye)로 이동하려고 한다.</p>

<p>수빈이는 두 가지 방법으로 이동할 수 있다. 첫 번째 방법은 점프를 하는 것이다. 예를 들어 (x, y)에 있는 경우에 (x+1, y), (x-1, y), (x, y+1), (x, y-1)로 이동할 수 있다. 점프는 1초가 걸린다.</p>

<p>두 번째 방법은 텔레포트를 사용하는 것이다. 텔레포트를 할 수 있는 방법은 총 세 가지가 있으며, 미리 정해져 있다. 텔레포트는 네 좌표 (x1, y1), (x2, y2)로 나타낼 수 있으며, (x1, y1)에서 (x2, y2)로 또는 (x2, y2)에서 (x1, y1)로 이동할 수 있다는 것이다. 텔레포트는 10초가 걸린다.</p>

<p>수빈이의 위치와 집의 위치가 주어졌을 때, 집에 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 xs와 ys가, 둘째 줄에 xe, ye가 주어진다. (0 ≤ xs, ys, xe, ye ≤ 1,000,000,000)</p>

<p>셋째 줄부터 세 개의 줄에는 텔레포트의 정보 x1, y1, x2, y2가 주어진다. (0 ≤ x1, y1, x2, y2 ≤ 1,000,000,000)</p>

<p>입력으로 주어지는 모든 좌표 8개는 서로 다르다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>수빈이가 집에 가는 가장 빠른 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3
4 5
1000 1001 1000 1002
1000 1003 1000 1004
1000 1005 1000 1006
','3
','SHORTEST_PATH'),
                                                                                                                (12125,'BAEKJOON','https://www.acmicpc.net/problem/12913',12913,'매직 포션','2초','512 MB',13,'<p>0부터 N-1까지 번호가 매겨져있는 N개의 도시가 있다. 도시는 모두 연결되어 있기 때문에, 임의의 두 도시를 여행하는 것은 항상 가능하다.</p>

<p>모든 도시 사이를 이동하는데 걸리는 시간과&nbsp;가지고 있는 매직 포션의 개수 K가 주어진다. 매직 포션은 평소보다 두 배 빠르게 움직일 수 있게 해준다. 한 도시에서 다른 도시로 이동할 때, 매직 포션을 하나 사용할 수 있다.&nbsp;</p>

<p>도시 0에서 도시 1을 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오. 모든 매직 포션을 다 마실 필요는 없다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N과 가지고 있는 매직 포션의 개수 K가 주어진다. (2&nbsp;≤ N ≤ 50, 0 ≤ K ≤ 50)</p>

<p>둘째 줄부터 N개의 줄에는 도시사이의 거리가 주어진다. i번 줄의 j번째 수는 i번 도시에서 j번 도시를 가는데 걸리는 시간이다. 시간은 0보다 크거나 같고, 9보다 작거나 같은 자연수이다.</p>

<p>i번째 줄의 j번째 수는 j번째 줄의 i번째 수와 같으며, i번째 줄의 i번째 수는 항상 0이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 도시 0에서 1을 가는데 가장 빠른 시간을 출력한다. 절대/상대 오차는 10<sup>-9</sup>까지 허용한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 1
094
904
440
','4.5
','SHORTEST_PATH'),
                                                                                                                (12126,'BAEKJOON','https://www.acmicpc.net/problem/12930',12930,'두 가중치','2초','512 MB',16,'<p>N개의 정점으로 이루어진 그래프 G가 있다. 그래프의 정점은 0번부터 N-1번까지 번호가 매겨져 있다.</p>

<p>그래프 G의 모든 간선은 가중치를 2개 가지고 있고, 각각을 가중치 1, 가중치 2라고 한다.</p>

<p>0번 정점에서 1번 정점으로 가는 최단 경로를 찾는 프로그램을 작성하시오. 경로의 비용은 경로에 있는 간선의 가중치 1을 모두 더한 값인 W1과 가중치 2를 모두 더한 값인 W2를 곱해서 구할 수 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 수 N이 주어진다. (2 ≤ N ≤ 20)</p>

<p>둘째 줄부터 N개의 줄에는 그래프의 가중치 1에 대한 정보가, 그 다음 N개을 줄에는 가중치 2에 대한 정보가 주어진다.</p>

<p>i번 줄의 j번째 문자는 i에서 j로 가는 간선을 나타내며, 가중치는 1~9 또는 .이다. 가중치가 .인 경우에는 간선이 없는 것이다.</p>

<p>가중치 1의 정보를 weight1, 가중치 2의 정보를 weight2 라고 했을 때, 다음 조건을 만족한다.</p>

<ul>
	<li>weight1[i][i] = weight2[i][i] = .</li>
	<li>weight1[i][j] = weight1[j][i]</li>
	<li>weight2[i][j] = weight2[j][i]</li>
	<li>weight1[i][j] == . 이면 weight2[i][j] == . 이며 그 역도 성립한다.</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>0번 정점에서 1번 정점으로 가는 최단 경로의 비용을&nbsp;출력한다. 0번에서 1번으로 갈 수 없는 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
..14
..94
19..
44..
..94
..14
91..
44..
','64
','SHORTEST_PATH'),
                                                                                                                (12128,'BAEKJOON','https://www.acmicpc.net/problem/12956',12956,'퍼레이드','5초','512 MB',13,'<p>N개의 교차로와 M개의 거리로 이루어진 도시가 있다. 교차로는 0번부터 N-1번까지 번호가 매겨져 있고, 도로는 0번부터 M-1번까지 번호가 매겨져 있다. 모든 도로는 양방향이며, 도로는 서로 다른 교차로를 연결한다. 임의의 두 교차로는 최대 1개의 도로로 연결되어 있다.&nbsp;모든 교차로는 연결되어 있기 때문에, 한 교차로에서 다른 교차로로 도로를 이용해서 항상 갈 수 있다.</p>

<p>도시의 시장은 퍼레이드를 개최하려고 한다. 퍼레이드는 도로 하나에서 열린다.&nbsp;</p>

<p>도시에는 모든 교차로의 쌍(X, Y) 마다 X와 Y를 오가는 버스가 존재한다. 퍼레이드는 버스의 운행에 영향을 줄 수 있다. 버스가 퍼레이드에 영향을 받는 경우는 퍼레이드에 사용하는 도로를 제외하고 구한 최단 거리의 길이가 제외하지 않고 구한 X에서 Y로 가는 최단 경로의 길이보다 큰 경우이다. 퍼레이드 때문에 X에서 Y로 갈 수 없게 되는 경우도 영향을 받는 경우이다.</p>

<p>각 도로에서 퍼레이드를 개최한다고 했을 때, 영향을 받는 버스 노선의 수가 몇 개인지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N (1 ≤ N ≤ 100)과 도로의 개수 M (1 ≤ M ≤ 2,000)이 주어진다.</p>

<p>둘째 줄부터 M개의 줄에는 도로의 정보가 0번 도로부터 순서대로 주어진다.</p>

<p>도로의 정보는 from, to, time으로 이루어져 있으며, from과 to를 오가는데 걸리는 시간이 time이라는 뜻이다. (0 ≤ from, to ≤ N-1, 1 ≤ time ≤ 1,000, from ≠ to)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 도로에서 퍼레이드가 열린다고 했을 때, 영향을 받는 버스 노선의 개수를 0번 도로부터 순서대로 공백으로 구분해 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 2
0 1 1
1 2 1
','2 2
','SHORTEST_PATH'),
                                                                                                                (12130,'BAEKJOON','https://www.acmicpc.net/problem/13008',13008,'특수 능력','2초','512 MB',15,'<p>N개의 정점과 M개의 간선으로 이루어진 그래프가 있다. 정점은 1번부터 N번까지 번호가 매겨져 있다. 간선의 가중치는 양의 정수이다. 이 그래프는 두 정점 사이에 간선이 여러 개 있을 수도 있고, 간선의 양 끝점이 같을 수도 있다.</p>

<p>성원이는 현재 1번 정점 위에 있다. 성원이는 간선을 이용해서 다른 정점으로 이동할 수 있다. 어떤 간선을 이동할 때 필요한 비용은 간선의 가중치이다. 성원이는 N번 정점까지 이동하는 비용을 최소로 하려고 한다.</p>

<p>성원이는 특수 능력을 가지고 있다. 어떤 간선을 이용할 때, 이 특수 능력을 사용하면 간선의 가중치를 음수(-1을 곱한 값)로 바꿔버릴 수 있게 된다. 하지만, 이 특수 능력은 최대 C번 사용할 수 있다.</p>

<p>특수 능력을 사용해서 간선의 가중치를 음수로 바꾼 후, 그 간선을 사용하면 다시 원래 가중치로 바뀌게 된다. 각 간선은 여러 번 사용할 수도 있으며, 특수 능력을 사용할 수 있는 횟수가 남은 상태로 N번 정점에 도착해도 된다.</p>

<p>성원이가 1번 정점에서 출발해서 N번 정점에 도착하는 최소 비용을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 N, 간선의 개수 M, 특수 능력을 사용할 수 있는 횟수 C가 주어진다. (1 ≤ N ≤ 50, 1 ≤ M ≤ 2500, 0 ≤ C ≤ 1,000)</p>

<p>둘째 줄부터 M개의 줄에 간선의 정보 from, to, cost가 주어진다. (1 ≤ from, to ≤ N, 0 ≤ cost ≤ 100,000) from은 간선의 시작점, to는 간선의 도착점이다.</p>

<p>항상 1번에서 N번으로 갈 수 있는 그래프만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 성원이가 N번 도시로 이동하는 최소 비용을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 6 1
1 2 1
1 3 5
2 1 1
2 3 10
3 1 1
3 2 1
','-9
','SHORTEST_PATH'),
                                                                                                                (12129,'BAEKJOON','https://www.acmicpc.net/problem/13009',13009,'특수 능력 2','2초','512 MB',21,'<p>N개의 정점과 M개의 간선으로 이루어진 그래프가 있다. 정점은 1번부터 N번까지 번호가 매겨져 있다. 간선의 가중치는 양의 정수이다. 이 그래프는 두 정점 사이에 간선이 여러 개 있을 수도 있고, 간선의 양 끝점이 같을 수도 있다.</p>

<p>성원이는 현재 1번 정점 위에 있다. 성원이는 간선을 이용해서 다른 정점으로 이동할 수 있다. 어떤 간선을 이동할 때 필요한 비용은 간선의 가중치이다. 성원이는 N번 정점까지 이동하는 비용을 최소로 하려고 한다.</p>

<p>성원이는 특수 능력을 가지고 있다. 어떤 간선을 이용할 때, 이 특수 능력을 사용하면 간선의 가중치를 음수(-1을 곱한 값)로 바꿔버릴 수 있게 된다. 하지만, 이 특수 능력은 최대 C번 사용할 수 있다.</p>

<p>특수 능력은 한 번에 한 간선에만 사용할 수 있다. 각 간선은 여러 번 사용할 수도 있으며, 특수 능력을 사용할 수 있는 횟수가 남은 상태로 N번 정점에 도착해도 된다.</p>

<p>성원이가 1번 정점에서 출발해서 N번 정점에 도착하는 최소 비용을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 N, 간선의 개수 M, 특수 능력을 사용할 수 있는 횟수 C가 주어진다. (1 ≤ N ≤ 50, 1 ≤ M ≤ 2500, 0 ≤ C ≤ 1,000,000,000)</p>

<p>둘째 줄부터 M개의 줄에 간선의 정보 from, to, cost가 주어진다. (1 ≤ from, to ≤ N, 0 ≤ cost ≤ 100,000) from은 간선의 시작점, to는 간선의 도착점이다.</p>

<p>항상 1번에서 N번으로 갈 수 있는 그래프만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 성원이가 N번 도시로 이동하는 최소 비용을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 6 1
1 2 1
1 3 5
2 1 1
2 3 10
3 1 1
3 2 1
','-9
','SHORTEST_PATH'),
                                                                                                                (7245,'BAEKJOON','https://www.acmicpc.net/problem/13168',13168,'내일로 여행','1초','512 MB',13,'<p>친한 친구인 승현이와 지학이는 여름방학 때 여행을 가기로 계획했습니다. 해외여행은 금전적으로 부담이 많기 때문에 둘은 한국의 여러 도시를 여행하기로 했습니다. 한국에는 N개의 도시가 있으며, 승현이는 이 중 여행할 M개의 도시를 결정했습니다. 여행 경로에서 같은 도시를 여러 번 방문할 수 있으며, 여행을 시작하는 도시와 끝내는 도시는 같습니다.</p>

<p>한국에는 두 도시 사이를 오갈 수 있는 K개의 교통수단이 있습니다. 교통수단의 종류는 기차, 지하철, 버스, 택시, 비행기 등으로 다양합니다. 특히 기차 코스는 매우 세부적으로 나뉘어 있어서 무궁화호(Mugunghwa), ITX-새마을(ITX-Saemaeul), ITX-청춘(ITX-Cheongchun), KTX, S-Train, V-Train 등이 있습니다. 모든 교통수단은 한 번 이용하는 데 필요한 비용이 정해져 있습니다. 승현이와 지학이는 계획한 M개의 도시를 최소비용으로 차례대로 움직일 것입니다.</p>

<p>한편, 코레일에서는 ‘내일로’라는 특별한 기차표를 판매하고 있습니다. 방학 동안, 젊은 청년들은 R원을 주고 내일로 티켓을 살 수 있습니다. 한 번 내일로 티켓을 사면, 며칠 동안 무궁화호, ITX-새마을, ITX-청춘은 무료로 이용할 수 있으며, S-Train과 V-Train은 50% 할인된 가격으로 이용할 수 있습니다. KTX나 지하철, 또는 다른 교통수단에 대해서는 할인이 적용되지 않습니다.</p>

<p>지학이는 자신이 아무것도 하지 않는 것에 죄책감을 느끼기 때문에, 자신들의 여행에서 내일로 티켓이 필요한지 생각해보기로 했습니다. 지학이를 도와 내일로 티켓을 사는 것과 사지 않는 것 중 어떤 선택이 더 좋은 지 구하는 프로그램을 작성하세요.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 한국에 있는 도시의 수 N(1 ≤ N ≤ 100)과 1인당 내일로 티켓의 가격 R(1 ≤ R ≤ 1,000,000)이 주어집니다. 두 번째 줄에는 N개의 도시의 이름이 주어집니다. 도시의 이름은 알파벳 대소문자로 구성된 길이 20 이하의 문자열입니다. 세 번째 줄에는 승현이와 지학이가 여행할 도시의 수 M(1 ≤ M ≤ 200)이 주어집니다. 네 번째 줄에는 승현이와 지학이가 여행할 M개 도시의 이름이 주어집니다. 이 도시들은 앞서 언급된 N개의 도시 중 하나입니다. 다섯 번째 줄에는 교통수단의 수 K(1 ≤ K ≤ 10,000)가 주어집니다. 마지막 K개의 줄에는 교통수단에 대한 정보가 주어집니다. 줄마다 교통수단의 종류 Type<sub>i</sub>, 양 끝 도시 S<sub>i</sub>, E<sub>i</sub>, 1인당 비용 Cost<sub>i</sub> (1 ≤ Cost<sub>i</sub>&nbsp;≤ 100,000)가 주어집니다. Type<sub>i</sub>는 ‘Subway’, ‘Bus’, ‘Taxi’, ‘Airplane’, ‘KTX’, ‘S-Train’, ‘V-Train’, ‘ITX-Saemaeul’, ‘ITX-Cheongchun’, ‘Mugunghwa’ 중 하나이며, 모든 도시는 주어진 K개의 교통수단을 이용하여 갈 수 있음이 보장되어 있습니다.</p>

<p>한국에는 이름이 같은 도시가 있을 수 있다. 따라서, N개의 도시의 이름에는 같은 도시의 이름이 두 번 이상 주어질 수도 있다. 이 경우 이러한 도시를 모두 같은 도시라고 생각해야 한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>한줄에 내일로 티켓을 사는 것이 좋으면 ‘Yes’를 출력하고 그렇지 않으면 ‘No’를 출력합니다. 내일로 티켓을 사더라도 비용이 정확히 같다면 ‘No’를 출력합니다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1에서 내일로 티켓을 구매하는 경우 최소비용은 다음과 같다.</p>

<ul>
	<li>서울 → 전주 : 0원 (서울 → 천안 → 대전 → 광주 → 전주)</li>
	<li>전주 → 순천 : 0원 (전주 → 순천)</li>
	<li>순천 → 여수 : 0원 (순천 → 여수)</li>
	<li>여수 → 순천 : 0원 (여수 → 순천)</li>
	<li>순천 → 보성 : 500원 (순천 → 보성)</li>
	<li>보성 → 진주 : 1,500원 (보성 → 순천 → 진주)</li>
	<li>진주 → 부산 : 1,000원 (진주 → 순천 → 전주 → 광주 → 대전 → 대구 → 부산)</li>
	<li>부산 → 서울 : 0원 (부산 → 대구 → 대전 → 천안 → 서울)</li>
	<li>총합 : 3,000원 + 40,000원(내일로 티켓)</li>
</ul>

<p>내일로 티켓을 구매하지 않는 경우 최소비용은 다음과 같다.</p>

<ul>
	<li>서울 → 전주 : 12,500원 (서울 → 천안(지하철) → 대전 → 광주 → 전주)</li>
	<li>전주 → 순천 : 4,000원 (전주 → 순천)</li>
	<li>순천 → 여수 : 1,500원 (순천 → 여수)</li>
	<li>여수 → 순천 : 1,500원 (여수 → 순천)</li>
	<li>순천 → 보성 : 1,000원 (순천 → 보성)</li>
	<li>보성 → 진주 : 3,000원 (보성 → 순천 → 진주)</li>
	<li>진주 → 부산 : 1,500원 (진주 → 부산)</li>
	<li>부산 → 서울 : 18,500원 (부산 → 진주 → 서울)</li>
	<li>총합 : 43,500원</li>
</ul>

				</div>
				</div>','14 40000
Boseong Busan Changwon Cheonan Chuncheon Daegu Daejeon Gwangju Jeonju Jinju Masan Seoul Suncheon Yeosu
9
Seoul Jeonju Suncheon Yeosu Suncheon Boseong Jinju Busan Seoul
23
KTX Seoul Busan 20000
KTX Seoul Gwangju 12000
KTX Gwangju Yeosu 8000
KTX Seoul Jinju 17000
ITX-Saemaeul Seoul Cheonan 7000
ITX-Cheongchun Seoul Chuncheon 3000
V-Train Chuncheon Daegu 10000
Subway Seoul Cheonan 2000
ITX-Saemaeul Cheonan Daejeon 4000
ITX-Saemaeul Daejeon Daegu 10000
ITX-Saemaeul Daegu Busan 7000
Mugunghwa Daejeon Daegu 6000
Mugunghwa Daejeon Gwangju 5000
Mugunghwa Gwangju Jeonju 1500
Mugunghwa Jeonju Suncheon 4000
Mugunghwa Suncheon Yeosu 1500
S-Train Busan Changwon 3000
S-Train Changwon Masan 1000
S-Train Masan Jinju 2000
S-Train Jinju Suncheon 2000
S-Train Suncheon Boseong 1000
Bus Busan Jinju 1500
Bus Suncheon Jinju 4000
','Yes
','SHORTEST_PATH'),
                                                                                                                (2255,'BAEKJOON','https://www.acmicpc.net/problem/13271',13271,'스파이','1초','256 MB',20,'<p>석주가 회장으로 있는 SPARCS Company 에서 신제품 N종을 내놓기로 결정하였다! SPARCS Company 의 K명의 베타테스터들은 서로 협의하여 각각의 신제품에 대해 0점 이상 100점 이하의 정수인 평점을 메겨놓았다.</p>

<p>베타테스트 결과가 궁금했던 경쟁사 GoN Company 소속 스파이 지훈이는 베타테스터 K명 각각에게 질문을 해서 평점에 대한 정보를 한 가지씩 얻을 수 있었다. 지훈이가 얻은 정보에는 세 가지 종류가 있다:</p>

<ol>
	<li>1 a b c : (a 번 제품의 평점) - (b 번 제품의 평점) ≥ c 이다.</li>
	<li>2 a b c : (a 번 제품의 평점) - (b 번 제품의 평점) ≤ c 이다.</li>
	<li>3 a b c : (a 번 제품의 평점) - (b 번 제품의 평점) = c 이다.</li>
</ol>

<p>지훈이는 이 데이터를 바탕으로 가장 평이 좋은 신제품과 평이 가장 좋지 않은 신제품을 알아내려고 하였으나, 그것을 알아내는 것은 무리였다. 아쉬운 대로 (가장 높은 평점) - (가장 낮은 평점)의 최솟값을 구해보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 N과 K가 주어진다. (2 ≤ N ≤ 1000, 1 ≤ K ≤ 3000)</p>

<p>둘째 줄부터 K+1번째 줄에 지훈이가 얻은 정보들이 본문과 같은 형식으로 주어진다. (1 ≤ a ≤ N, 1 ≤ b ≤ N, |c| ≤ 100)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>지훈이가 얻은 정보를 모두 만족하는 (가장 높은 평점) - (가장 낮은 평점)의 최솟값을 출력한다. 불가능한 경우에는 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 1
1 2 3 3
','3
','SHORTEST_PATH'),
                                                                                                                (12153,'BAEKJOON','https://www.acmicpc.net/problem/13308',13308,'주유소','2초','512 MB',16,'<p>어떤 나라에는 N개의 도시가 있고, 각 도시는 1번부터 N번까지 번호가 붙어 있다. 또, 서로 다른 두 도시를 양방향으로 직접 연결하는 M개의 도로가 있다. 도로들은 서로 길이가 다를 수 있다. 도로 길이의 단위는 km를 사용한다.</p>

<p>1번 도시에서 N번 도시로 자동차를 이용하여 이동하려고 한다. 처음 출발할 때 자동차에는 기름이 없어서 주유소에서 기름을 넣고 출발하여야 한다. 기름통의 크기는 무제한이어서 얼마든지 많은 기름을 넣을 수 있다. 도로를 이용하여 이동할 때 1km마다 1리터의 기름을 사용한다. 각 도시에는 단 하나의 주유소가 있으며, 도시마다 주유소의 리터당 가격은 다를 수 있다. 가격의 단위는 원을 사용한다.</p>

<p>예를 들어, 이 나라에 다음 그림처럼 4개의 도시와 4개의 도로가 있다고 하자. 원 안에 있는 숫자는 도시의 번호, 원 옆에 있는 숫자는 그 도시에 있는 주유소의 리터당 가격이다. 도로 옆에 있는 숫자는 도로의 길이를 표시한 것이다.&nbsp;</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13308/1.png" style="height:169px; width:224px"></p>

<p>1번 도시에서 출발할 때 7리터의 기름을 넣고 그 기름으로 4번 도시까지 (3번 도시를 거쳐) 이동하면 총 비용은 35원이다. 만약 1번 도시에서 출발할 때 3리터의 기름을 넣고(3×5 = 15원) 3번 도시로 이동한 다음, 다시 3번 도시에서 4리터의 기름을 넣고(4×4 = 16원) 4번 도시에 도착하면 총 비용은 31원이다. 또 다른 방법으로 1번 도시에서 2리터의 기름을 넣고(2×5 = 10원) 2번 도시로 이동하여, 2번 도시에서 9리터의 기름을 넣고(9×2 = 18원) 1번과 3번 도시를 거쳐 4번 도시에 도착하면 총 비용은 28원이다.</p>

<p>각 도시에 있는 주유소의 기름 가격과, 각 도로들의 길이를 입력으로 받아 1번 도시에서 N번 도시로 이동하는 최소의 비용을 계산하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>표준 입력으로 다음 정보가 주어진다. 첫 번째 줄에는 도시의 수와 도로의 수를 나타내는 정수 N(2 ≤ N ≤ 2,500)과 정수 M(1 ≤ M ≤ 4,000)이 주어진다. 다음 줄에 각 도시 주유소의 리터당 가격이 도시 번호 순서대로 N개의 자연수로 주어진다. 리터당 가격은 1 이상 2,500 이하의 자연수이다. 그 다음 M개의 줄 각각에 하나의 도로에 대한 정보가 세 개의 자연수로 주어지는데, 처음 두 개의 자연수는 도로가 연결하는 두 도시의 번호이며, 세 번째 자연수는 도로의 길이이다. 도로의 길이는 1 이상 2,500 이하의 자연수이다. 한 쌍의 도시를 연결하는 도로는 최대 하나만 존재한다. 임의의 도시에서 다른 임의의 도시로 도로들을 이용하여 이동할 수 있는 방법이 항상 존재한다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>표준 출력으로 1번 도시에서 N번 도시로 가는 최소 비용을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 4
5 2 4 1
3 1 3
1 2 2
4 3 4
2 4 15
','28
','SHORTEST_PATH'),
                                                                                                                (12151,'BAEKJOON','https://www.acmicpc.net/problem/13314',13314,'플로이드에 오타가?','2초','512 MB',13,'<p>평소에 코딩 실력이 부족하다고 느끼고 있는 지구이는 익명게시판에서 “백스페이스 키를 쓰지 않고 코딩하기를 추천합니다” 라는 글을 읽게 되었다. 글의 최하단에는 매우 작은 글씨로 “효과는 보장할 수 없습니다” 같은 내용의 글이 5줄에 걸쳐 알아보기 힘들게 쓰여 있었지만, 지구이는 그래도 한 번은 시도해 볼 만한 방법이라고 생각했고, 직접 해보기로 했다.</p>

<p>지구이가 처음으로 도전한 문제는 다음과 같다.</p>

<p>“정점이 N (1 ≤ N ≤ 100)개 있고, 그래프의 인접행렬이 N*N으로 주어진다. 이때 모든 쌍의 최단거리를 구하시오.”</p>

<p>지구이는 플로이드로 이 문제를 풀려고 했으나, 아쉽게도 첫 번째 줄에서 오타가 나고 말았다. 하지만 지구이는 짧은 시간동안 자기합리화와 함께, “이 정도 실수라면 데이터가 내 코드를 빗겨나가지 않을까?”라는 굳은 믿음으로 계속 코딩을 했다. 하지만 결국 그 실수 때문에 맞을 수 없었고, 지구이는 코드를 밀 수밖에 없었다.</p>

<p>문제를 푼 후, 지구이는 자신의 첫 번째 코드가 얼마나 잘못됐는지 확인해 보려고 한다. 이것은, 첫 번째 코드와 두 번째 코드에서 구한 최단거리가 서로 다른 (i, j) 쌍의 개수가 9700개 이상인 데이터를 찾는 것이다. 하지만, 역시나 지구이는 데이터를 찾을 수 없었다.</p>

<p>지구이의 첫 번째 코드가 얼마나 망한 코드인지 알려주자!</p>

<p>지구이의 코드는 <a href="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13314/typo.cpp"><strong><u>여기</u></strong></a>에 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 정점 개수 N(1 ≤ N ≤ 100)을 출력한다.</p>

<p>두 번째 줄부터 N개의 줄에 그래프의 인접행렬 D를 출력한다.</p>

<p>D(i, i) = 0, 0 ≤ D(i, j) ≤ 10000이어야 한다.</p>

<p>출력 예시는 답이 아님에 주의하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','','2
0 1
1 0
','SHORTEST_PATH'),
                                                                                                                (12154,'BAEKJOON','https://www.acmicpc.net/problem/13317',13317,'한 번 남았다','2초','512 MB',13,'<p>최단경로 알고리즘은 Dijkstra 알고리즘밖에 모르는 지구이는 어느 날 간선의 가중치가 1과 ?1만 존재하는 그래프에서 음수 사이클의 존재 여부를 구하는 문제를 보게 되었다. 지구이는 Dijkstra 알고리즘밖에 몰랐고, Dijkstra 알고리즘은 음수 간선이 있을 때 동작하지 않기 때문에 “당연히” 틀렸다. 지식이 부족하다는 것을 느낀 지구이는 구글신에게 물어볼 수밖에 없었고, 꽤 유용한 Bellman­ford 알고리즘을 알게 되었다.</p>

<p>Bellman­ford 알고리즘으로 음수 싸이클의 존재 여부를 찾는 방법은 다음과 같다.</p>

<ol>
	<li>모든 정점의 현재 최단거리 d[v]를 0으로 초기화한다.</li>
	<li>모든 간선 u­>v (길이 D)에 대하여 d[v]에 min(d[u] + D, d[v])를 대입한다. (이는 간선을 사용할 때 거리가 더 짧아지는 경우를 고려한 것이다)</li>
	<li>2번을 (정점 개수)?1번 반복한다.</li>
	<li>2번을 한 번 더 반복했을 때, 배열 d의 값 중 하나 이상 바뀐 경우 음수 사이클이 존재하는 것이다.</li>
</ol>

<p>하지만 지구이는 Bellman­ford의 작동 원리를 정확하게 이해하지 못했고, 그 결과 Bellman­ford를 한 번 덜 돌리는 실수를 저질렀다(즉, 3번에서 (정점 개수)?2회 반복했다). 도토리는 지구이의 코드가 음수 사이클이 없음에도 있다고 판별하기 때문에 틀렸다고 주장했지만, 지구이는 채점 결과가 “맞았습니다”였기 때문에 틀린 것을 인정하지 않았다.</p>

<p>도토리를 도와 지구이를 정의구현하자!</p>

<p>지구이의 코드는 <a href="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13317/baby_one_more_time.cpp"><strong><u>여기</u></strong></a>에 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력은 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 정점 개수 N과 간선 개수 M을 출력한다. (50 ≤ N ≤ 100, 0 ≤ M ≤ N*(N-­1))</p>

<p>두 번째 줄부터 M개의 줄에 시작 정점 s, 끝 정점 e, 가중치 d를 출력한다. (1 ≤ s, e ≤ N, s ≠ e, d = 1 or ­-1)</p>

<p>그래프에는 중복 간선이 없어야 한다.</p>

<p>출력 예시는 답이 아님에 주의하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','','4 5
1 2 1
1 3 1
1 4 1
2 4 1
3 4 -1
','SHORTEST_PATH'),
                                                                                                                (12157,'BAEKJOON','https://www.acmicpc.net/problem/13327',13327,'개구리','1초','512 MB',18,'<p>어느 덥고 건조한 여름, 배고픈 개구리들이 물과 양식이 풍부한 “파리 나라(the land of flies)”를 향해 여행하고 있다. 여행하는 중 강을 건널 일이 생겼다. 보통의 경우 개구리들은 수영을 잘하지만, 너무 배고프고 피곤한 나머지 개구리는 걷기와 점프만 가능하다. 강 위에 통나무들이 떠다니고 있고, 개구리는 a) 통나무 위에서 걸어 다니거나, b) 한 통나무에서 다른 통나무로 점프할 수 있다. 개구리들은 너무 피곤하고 배고파서, 가능한 한 에너지를 적게 쓰고 싶다. 걸어 다닐 때는 거의 에너지를 쓰지 않기 때문에 걷는 거리는 신경 쓰지 않아도 된다. 반면, 개구리가 거리 x만큼 점프하면, x<sup>2</sup> 단위의 에너지를 쓰게 된다. 파리 나라에 도착하는 과정에서 사용된 에너지는 최소화되어야 한다.&nbsp;</p>

<p>다음 예제를 생각해보자. 강과 양쪽 강가는 8 × 9 크기의 격자로 표현할 수 있다. 처음 개구리는 아래쪽 강가에 있고, 파리 나라는 위쪽 강가에 있다. (a, b) ? (c, d)는 양 끝점이 (a, b)와 (c, d)인 선분을 의미한다. 아래쪽 강가는 다음과 같은 7 개의 선분으로 표현할 수 있다. (0,0) ? (0,1),(0,1) ? (2,1), (2, 1) ? (2,2) , (2,2) ? (3, 2) , (3, 2) ? (3,1) , (3,1) ? (7,1) , (7,1) ? (7,0) . 위쪽 강가는 다음과 같은 11 개의 선분으로 표현할 수 있다. (0, 8) ? (0,7),(0, 7) ? (1,7), (1,7) ? (1,6), (1,6) ? (2,6), (2,6) ? (2,7), (2,7) ? (4,7), (4,7) ? (4,6), (4,6) ? (5,6), (5,6) ? (5,7), (5,7) ? (7,7), (7,7) ? (7,8). 강 위에는 4 개의 통나무가 있다. (0, 3) ? (2, 3) , (6, 2) ? (4, 2) , (3, 5) ? (6, 5) , (7, 4) ? (7, 6) . 모든 선분은 (강가이든, 통나무이든) x-축 또는 y-축에 평행하다고 가정하자. 또한 어떤 한 쌍의 통나무도 공통인 영역을 갖지 않고, 통나무와 강가도 공통인 영역을 갖지 않는다. 다시 한번 강조하지만, 개구리는 같은 선분 위라면 어느 위치로든지 에너지를 사용하지 않고 움직일 수 있다. 일단 파리 나라에 개구리가 도착하면 여행은 끝난다.&nbsp;</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13327/1.png" style="height:310px; width:301px"></p>

<p style="text-align:center">그림 1. 강 위의 네 통나무.</p>

<p>위 예에서, 개구리가 최대로 점프할 수 있는 거리가 \(\sqrt{5}\)라고 하자. 파리 나라로 도달하는 한 가지 경로는 먼저 통나무 1로 점프한 다음, 통나무 3으로 점프하고, 마지막으로 파리 나라로 점프하는 것이다. 이때 사용된 에너지의 총합은 \(1^2+\sqrt{5}^2 + 1^2 = 7\)이며, 이것이 최적이라는 것을 어렵지 않게 보일 수 있다. 만약 개구리가 최대로 점프할 수 있는 거리가 2라면, 파리 나라에 도달할 수 없음을 쉽게 보일 수 있다.&nbsp;</p>

<p>개구리가 강을 건너기 위해 필요한 최소 에너지를 계산하는 프로그램을 작성하시오.&nbsp;</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>여러분의 프로그램은 표준 입력에서 입력을 받아야 한다. 입력은 여러 줄로 이루어져 있다. 첫 줄에는 두 정수 n과 m이 주어지는데, 이는 격자의 크기 n × m (3 ≤ n, m ≤ 5,000)을 나타낸다. 다음 줄에는 네 정수 u, v, w, l (2 ≤ u, v, w ≤ 2 ? max(n, m) , 1 ≤ l ≤ min((n ? 1)<sup>2</sup>, (m ? 1)<sup>2</sup>)) 이 주어진다. 아래쪽 강가에는 u개의 꼭짓점이 있고, 위쪽 강가에는 v개의 꼭짓점이 있으며, 강에는 w개의 통나무가 떠있다. 개구리가 최대로 점프할 수 있는 거리는 √l이다. 다음에 오는 u 줄 각각에는 두 정수 x와 y (0 ≤ x < n, 0 ≤ y < m)가 주어지는데, 이는 아래쪽 강가의 한 꼭짓점 (x, y)를 나타낸다. 이 꼭짓점들은 시계방향 순서대로 주어지며, 가장 아래이면서 가장 왼쪽에 오는 꼭짓점이 맨 처음 주어진다. 다음에 오는 v 줄 각각에는 두 정수 x 와 y (0 ≤ x < n, 0 ≤ y < m)가 주어지는데, 이는 위쪽 강가의 한 꼭짓점 (x, y)를 나타낸다. 이 꼭짓점들은 반시계방향 순서대로 주어지며, 가장 위이면서 가장 왼쪽에 오는 꼭짓점이 맨 처음 주어진다. 이웃하는 두 꼭짓점을 이은 선분은 반드시 x-축에 평행이거나 y-축에 평행이다. 마지막 w 줄 각각에는 네 정수 x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub> (0 ≤ x<sub>1</sub>, x<sub>2</sub> < n, 0 ≤ y<sub>1</sub>, y2 < m)가 주어지는데, 이는 선분 (x<sub>1</sub>, y<sub>1</sub>) ? (x<sub>2</sub>, y<sub>2</sub>)로 표현되는 통나무 하나를 표현한다. 반드시 x<sub>1</sub> = x<sub>2</sub>이거나 y<sub>1</sub> = y<sub>2</sub>이다. 아래쪽 강가와 위쪽 강가가 교차하지 않는다는 것은 보장된다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>여러분의 프로그램은 표준 출력으로 출력해야 한다. 각 입력에 대해서 정확히 한 줄을 출력한다. 이 줄에는 개구리가 강을 건너가는데 필요한 에너지의 최솟값을 출력한다. 만약 개구리가 강을 건너갈 수 없다면, -1 을 출력한다.&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 9
8 12 4 5
0 0
0 1
2 1
2 2
3 2
3 1
7 1
7 0
0 8
0 7
1 7
1 6
2 6
2 7
4 7
4 6
5 6
5 7
7 7
7 8
0 3 2 3
4 2 6 2
3 5 6 5
7 4 7 6
','7
','SHORTEST_PATH'),
                                                                                                                (12156,'BAEKJOON','https://www.acmicpc.net/problem/13342',13342,'건물주','2초','512 MB',21,'<p>강호는 구역 N개로 나누어져 있는 도시의 건물주이다. 각각의 구역은 양방향 도로로 이루어져 연결되어져 있다. 각 구역은 0번부터 N-1번까지 번호가 매겨져 있다.</p>

<p>강호는 차를 C대 가지고 있고, 각각의 차는 구역 중 하나에 주차되어 있다. 한 구역에 여러 대의 차가 주차되어 있을 수도 있다.&nbsp;</p>

<p>오늘은 월세를 받는 날이다. 강호는 직접 자신의 건물을 돌아다니면서 월세를 받으려고 한다. 월세를 받아야 하는 건물은 총 M개가 있으며, 월세를 받는 순서는 A<sub>i</sub>로 미리 정해져 있다. 즉, 첫 번째로 A<sub>0</sub> 구역으로 가서 월세를 받고, 그 다음 A<sub>1</sub> 구역으로 가서 월세를 받고, ..., 마지막으로 A<sub>M-1</sub>구역으로 가서 월세를 받아야 한다. 강호는 처음에 0번 구역에 있다.</p>

<p>구역을 이동하는 방법은 걷기와 차 타기 두 가지가 있다. 걷는데 걸리는 시간은 W × 도로의 길이 이며, 차를 타고 이동하는데 걸리는 시간은 D × 도로의 길이이다.</p>

<p>강호가 자신의 차가 주차되어있는 구역에 도착했다면, 차 한 대에 탑승해서 원하는 곳으로 이동할 수 있다. 강호는 한 번 차에서 내린 다음에는 다시는 그 차를 타지 않는다. 또, 월세를 받을 때는 반드시 차에서 내려야 한다.</p>

<p>도로의 정보가 주어졌을 때, 월세를 모두 받는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 N과 주차되어 있는 차의 개수 C, 월세를 받아야 하는 건물의 개수 M, 걷는데 걸리는 시간 W, 차를 타고 이동하는데 걸리는 시간 D가 주어진다. (1 ≤ N, C, M ≤ 50, 1 ≤ D < W ≤ 100)</p>

<p>둘째 줄에는 차가 주차되어 있는 구역이 공백으로 구분해서 주어진다.</p>

<p>셋째 줄에는 월세를 받아야하는 순서 A<sub>i</sub>가 공백으로 구분해서 주어진다. (A<sub>0</sub> ≠ 0)</p>

<p>넷째 줄부터 N개의 줄에는 도시의 도로 정보가 인접 행렬 형식으로 주어진다. i번 줄의 j번째 수는 i번 구역과 j번 구역의 도로 정보를 나타내며, 0인 경우에는 도로가 없는 것, 자연수인 경우에는 그 도로의 길이이다. 도로의 길이는 62를 넘지 않는 자연수이다.</p>

<p>도로는 양방향 도로이기 때문에, i번째 줄의 j번째 수와 j번째 줄의 i번째 수는 항상 같으며, i번째 줄의 i번째 수는 항상 0이다. 또, 이동할 수 없는 구역은 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 월세를 모두 받는데 걸리는 시간의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1의 경우에 구역 0에서 구역 2까지 걸어간 다음, 월세를 받는다. 그 다음 구역 2에서 3으로 걸어가서 다시 월세를 받는다. 구역 1로 걸어간 다음, 차를 타고 구역 0으로 가서 월세를 받는다.</p>

<p>총 걸린 시간은 5×1 + 5×3 + 5×2 + 1×2 + 1×3 + 1×1 = 36 이다.</p>

<p>예제 2의 경우에 구역 0에서 구역 1로 걸어간다. 그 다음 거기서 차를 타고 구역 2로 이동한다. 차에서 내려서 월세를 받은 다음에 구역 2에서 1로, 그리고 0으로 걸어서 이동한다. 이제 구역 0에서 월세를 받으면 된다.</p>

<p>총 걸린 시간은 37×2 + 38×1 + 38×2 + 37×2 = 262 이다.</p>

				</div>
				</div>','4 1 3 5 1
1
2 3 0
0 0 1 0
0 0 0 2
1 0 0 3
0 2 3 0
','36
','SHORTEST_PATH'),
                                                                                                                (12167,'BAEKJOON','https://www.acmicpc.net/problem/13424',13424,'비밀 모임','1초','128 MB',12,'<p>해리와 친구들은 엄브릿지의 감시를 피해 어둠의 마법 방어술을 연습하기 위한 비밀 모임을 하려고 한다. 그들은 아무도 모르게 모임의 장소를 전달하기 위해 가짜 갈레온을 사용하는데, 해리가 자신의 가짜 갈레온에 모임의 장소를 적으면 친구들이 가진 가짜 갈레온에 해리가 적은 장소가 나타난다. 해리가 다니고 있는 호그와트 마법 학교에는 모임에 사용할만한 N개의 방이 있다. 각 방에는 1부터 N까지 번호가 붙어 있으며 중복된 번호는 없다. 마법 학교답게 N개의 방은 M개의 마법으로 만들어진 비밀통로로 연결되어있다. 모든 비밀통로는 양방향 통행이 가능하며 자연수의 길이를 가진다. 모임에 참여하는 친구들은 총 K명이다.</p>

<p>해리는 N개의 방 중에서 한 곳을 정해 오늘 모임의 장소로 이용하려고 한다. 모임 장소를 정하기 전, 호그와트 비밀지도를 이용해 학교 안에 있는 사람들의 현재 위치를 확인해보니 모임에 참여하는 친구들은 N개의 방 중에서 한군데씩에 각각 위치해 있었다. 불행하게도 호그와트 안에서는 순간이동이 금지되어 있어서 모임에 참여하는 친구들은 들키지 않도록 비밀통로만 이용해서 오늘의 모임 장소로 가려고 한다. 이때 이들은 항상 처음 위치에서 모임 장소까지의 이동 거리가 가장 짧은 경로만을 이용한다. 여기서 ‘이동 거리’란 처음 위치에서 모임 장소까지 가기 위해 이용한 비밀 통로들의 길이의 합을 의미한다. 어느 방을 모임 장소로 사용할까 고민하던 해리는 모임에 참석하는 친구들의 이동 거리의 총합이 최소가 되는 방을 오늘의 모임 장소로 사용하기로 했다. 다음 그림은 N = 6, M = 7, K = 2인 경우의 예시이다.</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13424/L1.png" style="height: 214.167px; width: 344.167px;"></p>

<p>위 그래프에서 각 정점에 적힌 숫자는 방의 번호이며, 간선 위의 숫자는 방과 방을 연결하는 비밀통로의 길이이다. 모임에 참석하는 두 친구는 현재 3번, 5번 방에 있다. 만약 오늘 모임의 장소로 2번 방을 이용한다면 3번 방에 있는 친구 A의 가장 짧은 경로는 3번-2번 방 순이며 이동 거리는 2가 된다. 5번 방에 있는 친구 B의 경우 2번 방으로 가는 가장 짧은 경로는 5번-1번-3번-2번 방 순이며 이동 거리는 5가 된다. 이때, 두 친구의 이동 거리의 총합은 7이 된다. 그러나 만약 1번 방을 모임 장소로 선택한다면, 친구 A의 이동 거리는 1이 되며, 친구 B의 이동 거리는 2가 되어, 두 친구의 이동 거리의 총합은 3이 된다. 위 예시에서는 1번, 3번, 또는 5번 방을 오늘 모임의 장소로 이용했을 때 친구들의 이동 거리의 총합이 3으로 최소가 된다.</p>

<p>해리가 오늘의 모임 장소를 가짜 갈레온에 적으면 모임에 참여하는 K명의 친구는 그 사실을 즉시 알게 되며, 현재 하던 일을 모두 중단하고, 바로 오늘의 모임 장소로 이동한다. 해리를 위해 친구들의 이동 거리의 총합이 최소가 되도록 하는 모임 장소를 찾아 출력하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 구성된다. 입력의 첫 번째 줄에 테스트 케이스의 개수를 나타내는 자연수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 방의 개수 N (2 ≤ N ≤ 100), 비밀통로의 개수 M(N-1 ≤ M ≤ N(N - 1)/2)이 공백으로 구분되어 주어진다. 그 다음 줄부터 M개의 줄에 걸쳐 비밀통로의 정보(a, b, c)가 주어진다. a와 b는 비밀통로로 연결된 두 방의 번호이며 c는 a와 b를 연결하는 비밀통로의 길이이다. a와 b는 항상 다르며 c는 1 이상 1,000 이하의 자연수이다. 두 방을 연결하는 비밀통로는 반드시 하나씩만 존재한다. 또한 어떤 방에서 다른 방으로 비밀통로를 이용해서 갈 수 없는 경우는 존재하지 않으며, 같은 비밀통로에 대한 정보가 중복되어 주어지지 않는다. 비밀통로의 정보가 모두 주어진 다음 그 다음 줄에 모임에 참여하는 친구의 수 K(1 ≤ K ≤ N)가 주어진다. 각 테스트 케이스의 마지막 줄에는 모임에 참여하는 친구들이 현재 위치해 있는 방의 번호 K개가 공백으로 구분되어 주어진다. 친구들이 있는 방은 항상 N개의 방 중 하나이며, 방 번호가 중복되는 경우는 없다. 즉, 두 명 이상이 한 방에 있는 경우는 입력으로 주어지지 않는다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>출력은 표준 출력을 사용한다. 입력받은 데이터에 대해, 각 테스트 케이스의 답을 순서대로 1줄에 1개씩 출력한다. 각 테스트 케이스마다 모임에 참여하는 친구들의 이동 거리의 총합이 최소가 되도록 하는 모임 장소의 방 번호를 출력한다. 만약 그러한 장소가 여러 개일 경우, 그중 번호가 가장 작은 방의 번호를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2
6 7
1 2 4
1 3 1
1 5 2
2 3 2
3 4 3
4 5 2
6 5 1
2
3 5
4 5
1 2 2
1 3 1
2 3 2
2 4 3
3 4 6
2
3 4
','1
2
','SHORTEST_PATH'),
                                                                                                                (12181,'BAEKJOON','https://www.acmicpc.net/problem/13549',13549,'숨바꼭질 3','2초','512 MB',11,'<p>수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 0초 후에 2*X의 위치로 이동하게 된다.</p>

<p>수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>수빈이가 5-10-9-18-17 순으로 가면 2초만에 동생을 찾을 수 있다.</p>

				</div>
				</div>','5 17
','2
','SHORTEST_PATH'),
                                                                                                                (12200,'BAEKJOON','https://www.acmicpc.net/problem/13907',13907,'세금','2초','256 MB',17,'<p>주언이는 경제학을 배워 행상인이 되었다. 두 도시를 오가며 장사를 하는데, 통행료의 합이 가장 적은 경로로 이동하려 한다. 도시들은 양방향 도로로 연결되어있으며, 도로마다 통행료가 존재한다.</p>

<p>그런데 정부는 세금 인상안을 발표하였다. 세금을 한 번에 올리면 문제가 발생할 수 있으므로 여러 단계에 걸쳐서 올린다고 한다. 세금이 A만큼 오르면 모든 도로의 통행료가 각각 A만큼 오르게 된다. 세금이 오르게 되면 주언이가 내야 하는 통행료가 변할 수 있다.</p>

<p>주언이를 도와 초기의 최소 통행료와 세금이 오를 때마다의 최소 통행료를 구하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 세 정수 N (2 ≤ N ≤ 1,000), M (1 ≤ M ≤ 30,000), K (0 ≤ K ≤ 30,000)가 주어진다. 각각 도시의 수, 도로의 수, 세금 인상 횟수를 의미한다.</p>

<p>두 번째 줄에는 두 정수 S와 D (1 ≤ S, D ≤ N, S ≠ D)가 주어진다. 각각 출발 도시와 도착 도시 번호를 의미한다. 도시 번호는 1부터 시작한다.</p>

<p>다음 M개의 줄에는 각각 도로 정보를 나타내는 세 정수 a, b (1 ≤ a < b ≤ N), w (1 ≤ w ≤ 1,000)가 주어진다. 도시 a와 도시 b가 통행료 w인 도로로 연결되어 있다는 것을 의미한다.</p>

<p>다음 총 K개의 줄에는 각각 정수 p (1 ≤ p ≤ 10)가 주어진다. 각각 첫 번째, 두 번째, …, K 번째에 인상되는 세금을 의미한다.</p>

<p>S에서 D로 이동할 수 없는 경우는 주어지지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 세금이 오르기 전의 최소 통행료를 출력한다.</p>

<p>두 번째 줄부터 K개의 줄에 각각 첫 번째, 두 번째, …, K 번째 세금이 올랐을 때의 최소 통행료를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>세금이 오르기 전</p>

<p><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13907/1.png" style="height:100px; width:339px"></p>

<p>첫 번째 세금 인상 후</p>

<p><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13907/2.png" style="height:100px; width:325px"></p>

<p>두 번째 세금 인상 후</p>

<p><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13907/3.png" style="height:100px; width:331px"></p>

				</div>
				</div>','3 3 2
1 3
1 3 5
1 2 1
2 3 2
1
2
','3
5
8
','SHORTEST_PATH'),
                                                                                                                (12196,'BAEKJOON','https://www.acmicpc.net/problem/13911',13911,'집 구하기','1초','256 MB',14,'<p>안양에 사는 상혁이는 4년간의 통학에 지쳐 서울에 집을 구하려고 한다. 상혁이가 원하는 집은 세가지 조건이 있다.</p>

<ul>
	<li>맥세권 : 맥세권인 집은 맥도날드와 집 사이의 최단거리가 x이하인 집이다.</li>
	<li>스세권 : 스세권인 집은 스타벅스와 집 사이의 최단거리가 y이하인 집이다.</li>
	<li>맥세권과 스세권을 만족하는 집 중 최단거리의 합이 최소인 집</li>
</ul>

<p>통학 때문에 스트레스를 많이 받은 상혁이는 집을 선택하는 데 어려움을 겪고 있다. 똑똑한 여러분이 상혁이 대신 이 문제를 해결해 주자. 이사 갈 지역의 지도가 그래프로 주어지고 맥도날드와 스타벅스의 위치가 정점 번호로 주어질 때 상혁이가 원하는 집의 최단거리의 합을 출력하는 프로그램을 작성하시오. (맥도날드와 스타벅스가 아닌 정점에는 모두 집이 있다.)</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13911/1.png" style="height:213px; width:336px"></p>

<p>위의 예제 지도에서 사각형은 맥도날드를, 별은 스타벅스가 위치한 정점을 나타낸다. 각 원은 집이 있는 정점을 낸다. x가 6이고 y가 4일 때 가능한 집의 정점은 6이다. 맥도날드까지의 최단거리가 2, 스타벅스까지의 최단거리가 4로 총 합이 6이 되기 때문이다. 정점 7은 맥세권이면서 스세권이지만 맥도날드까지의 최단거리가 6, 스타벅스까지의 최단거리가 2로 총 합이 8로써 정점 6의 값보다 크므로 답이 아니다. 그 외의 정점 2, 3, 4는 맥세권이면서 스세권인 조건을 충족하지 못하므로 답이 될 수 없다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫줄에는 정점의 개수 V(3 ≤ V ≤ 10,000)와 도로의 개수 E(0 ≤ E ≤ 300,000)가 주어진다. 그 다음 E줄에 걸쳐 각 도로를 나타내는 세 개의 정수 (u,v,w)가 순서대로 주어진다. 이는 u와 v(1 ≤ u,v ≤ V)사이에 가중치가 w(1 ≤ w < 10,000)인 도로가 존재한다는 뜻이다. u와 v는 서로 다르며 다른 두 정점 사이에는 여러 개의 간선이 존재할 수도 있음에 유의한다. E+2번째 줄에는 맥도날드의 수 M(1 ≤ M ≤ V-2) 맥세권일 조건 x(1 ≤ x ≤ 100,000,000)가 주어지고 그 다음 줄에 M개의 맥도날드 정점 번호가 주어진다. E+4번째 줄에는 스타벅스의 수 S(1 ≤ S ≤ V-2)와 스세권일 조건 y(1 ≤ y ≤ 100,000,000)가 주어지고 그 다음 줄에 S개의 스타벅스 정점 번호가 주어진다.&nbsp;</p>

<ul>
	<li>맥도날드나 스타벅스가 위치한 정점에는 집이 없다.</li>
	<li>한 정점에 맥도날드와 스타벅스가 같이 위치할 수 있다.</li>
	<li>집이 있는(= 맥도날드나 스타벅스가 위치하지 않은) 정점이 하나 이상 존재한다.</li>
</ul>

<p>&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>&nbsp;상혁이가 원하는 집의 맥도날드까지의 최단거리와 스타벅스까지의 최단거리 합을 출력한다. 만일 원하는 집이 존재하지 않으면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 11
1 2 2
1 4 1
2 4 2
2 3 1
2 7 8
3 7 3
4 5 2
4 6 1
6 7 6
6 8 4
7 8 2
2 6
1 5
1 4
8
','6
','SHORTEST_PATH'),
                                                                                                                (12192,'BAEKJOON','https://www.acmicpc.net/problem/14221',14221,'편의점','2초','512 MB',13,'<p>영선이는 이사할 일이 생겨 집을 알아보고 있다. 영선이는 혼자 살기 때문에, 편의점에서 대충 때울 때가 많아, 집을 고르는 기준을 편의점과의 거리가 가장 가까운 곳으로 하려한다.</p>

<p>영선이가 이사할 도시는 정점과 간선으로 표현할 수 있는데, 이사가려 하는 집의 후보들과 편의점은 정점들 위에 있다.</p>

<p>영선이는 캠프 강사 준비로 바쁘므로, 대신하여 집을 골라주자. 만약 거리가 같은 지점이 여러 개라면 정점 번호가 가장 낮은 곳으로 골라주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>처음 줄에는 정점의 개수 n, 간선의 개수 m이 주어진다.(2 ≤ n ≤ 5,000, 1 ≤ m ≤ 100,000) 다음 m줄에는 a,b,c가 주어지는데 이는 a, b를 잇는 간선의 거리가 c라는 것이다.(1 ≤ a, b ≤ n, 1 ≤ c ≤ 10,000)</p>

<p>다음 줄에는 집의 후보지의 개수 p와 편의점의 개수 q가 주어진다.(2 ≤ p+q ≤ n, 1 ≤ p, 1 ≤ q) 다음 줄에는 집의 후보지들의 정점번호, 그 다음줄에는 편의점의 정점번호가 주어진다. 집의 후보지와 편의점은 서로 겹치지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>편의점으로부터 가장 가까운 지점에 있는 집 후보의 정점 번호를 출력하시오. 만약 거리가 같은 곳이 여러 군데라면 정점 번호가 낮은 곳을 출력하시오.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 9
1 4 1
1 5 2
1 6 3
2 4 2
2 5 3
2 6 1
3 4 3
3 5 1
3 6 2
3 3
1 2 3
4 5 6
','1
','SHORTEST_PATH'),
                                                                                                                (12209,'BAEKJOON','https://www.acmicpc.net/problem/14284',14284,'간선 이어가기 2','2초','512 MB',11,'<p>정점 n개, 0개의 간선으로 이루어진 무방향 그래프가 주어진다. 그리고 m개의 가중치 간선의 정보가 있는 간선리스트가 주어진다. 간선리스트에 있는 간선 하나씩 그래프에 추가해 나갈 것이다. 이때, 특정 정점 s와 t가 연결이 되는 시점에서 간선 추가를 멈출 것이다. 연결이란 두 정점이 간선을 통해 방문 가능한 것을 말한다.</p>

<p>s와 t가 연결이 되는 시점의 간선의 가중치의 합이 최소가 되게 추가하는 간선의 순서를 조정할 때, 그 최솟값을 구하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 n, 간선리스트의 간선 수 m이 주어진다.(2≤n≤5000,1≤m≤100,000)</p>

<p>다음 m줄에는 a,b,c가 주어지는데, 이는 a와 b는 c의 가중치를 가짐을 말한다. (1≤a,b≤n,1≤c≤100,a≠b)</p>

<p>다음 줄에는 두 정점 s,t가 주어진다. (1≤s,t≤n,s≠t)</p>

<p>모든 간선을 연결하면 그래프는 연결 그래프가 됨이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>s와 t가 연결되는 시점의 간선의 가중치 합의 최솟값을 출력하시오,</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 9
1 2 3
1 3 2
1 4 4
2 5 2
3 6 1
4 7 3
5 8 6
6 8 2
7 8 7
1 8
','5
','SHORTEST_PATH'),
                                                                                                                (12208,'BAEKJOON','https://www.acmicpc.net/problem/14285',14285,'간선 끊어가기','2초','512 MB',16,'<p>정점 n개, m개의 간선으로 이루어진 무방향 그래프가 주어진다. 그리고 그래프 내에 있는 m개의 가중치 간선의 정보가 있는 간선리스트가 주어진다. 간선리스트에 있는 간선 하나씩 그래프에 제거해 나갈 것이다. 이때, 특정 정점 s와 t가 비연결이 되는 시점에서 간선 제거를 멈출 것이다. 비연결이란 두 정점이 간선을 통해 방문 불가능한 것을 말한다.</p>

<p>s와 t가 비연결이 되는 시점의 지운 간선의 가중치의 합이 최대가 되게 제거하는 간선의 순서를 조정할 때, 그 최댓값을 구하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정점의 개수 n, 간선리스트의 간선 수 m이 주어진다.(2&nbsp;≤ n ≤ 5000, 1 ≤ m ≤ 100,000)</p>

<p>다음 m줄에는 a, b, c가 주어지는데, 이는 a와 b는 c의 가중치를 가짐을 말한다. (1 ≤ a, b ≤ n,1 ≤ c ≤ 100, a ≠ b)</p>

<p>다음 줄에는 두 정점 s, t가 주어진다.(1 ≤ s, t ≤ n, s ≠ t)</p>

<p>초기에 s와 t는 항상 연결되어 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>s와 t가 비연결되는 시점의 지운 간선의 가중치 합의 최댓값을 출력하시오,</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 9
1 2 3
1 3 2
1 4 4
2 5 2
3 6 1
4 7 3
5 8 6
6 8 2
7 8 7
1 8
','27
','SHORTEST_PATH'),
                                                                                                                (2556,'BAEKJOON','https://www.acmicpc.net/problem/14431',14431,'소수마을','2초','256 MB',13,'<p>소수 마을들의 주민들은 매우 특이한 규칙을 준수한다. 규칙은 바로 “가고 싶은 위치까지의 거리가 소수일 경우에만 간다”라는 것이다. 소수 마을의 주민 승욱이는 소수 마을에서 멀리 떨어진 A마을에 볼일이 있어 그곳까지 가야한다. 소수 마을에서 A마을까지의 단숨에 가고 싶지만 안타깝게도 두 마을의 거리는 소수가 아닐 경우에는 그럴 수가 없다. 그럴 경우에는 다른 마을들을 경유하여 가야한다. (경유하는 마을도 현재 위치에서의 거리가 소수일 경우에만 갈 수 있다.) 소수 마을과 경유할 수 있는 마을들, 그리고 A마을의 위치가 좌표평면 상으로 주어질 때, 승욱이가 소수 마을의 규칙을 준수하여 A마을로 갈 수 있는 최단의 길을 찾는 것을 도와주자. 소수 판정을 위해 마을 간의 거리는 정수 부분만으로 취급한다. 예를 들어, 거리가 3.1415라면 이를 버림하여 3만 취급한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 소수 마을의 위치 (X1,Y1)와 A마을의 위치 (X2,Y2)가 입력된다. 두 번째 줄에 경유할 수 있는 마을의 개수 N (0 ≤ N ≤ 4000)가 입력된다. 세 번째 줄부터 N+2번째 줄까지 경유 할 수 있는 마을들의 위치 (X3,Y3)가 입력된다. 단, 각 마을들의 좌표는 절댓값이 3000을 넘지 않는 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>소수 마을의 규칙을 준수하여 A마을까지 가는 방법 중 제일 짧은 거리로 갈 수 있는 길의 거리합을 출력한다. 만약 소수 마을의 규칙을 준수하여 갈 수 있는 방법이 없는 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14431/1.png" style="height:238px; width:320px"></p>

				</div>
				</div>','1 2 5 4
2
4 1
6 2
','6
','SHORTEST_PATH'),
                                                                                                                (12234,'BAEKJOON','https://www.acmicpc.net/problem/14461',14461,'소가 길을 건너간 이유 7','2초','512 MB',14,'<p>소가 길을 건너는 이유는 그냥 길이 많아서이다. 존의 농장에는 길이 너무 많아서, 길을 건너지 않고서는 별로 돌아다닐 수가 없다.</p>

<p>존의 농장에는 작은 정사각형 목초지가 N×N (3 ≤ N ≤ 100) 격자로 이루어져 있다. <a href="https://www.acmicpc.net/problem/14469">농장의 바깥에는 높은 울타리</a>가 있어서 소가 농장 밖으로 나갈 일은 없다. 이 농장에 사는 소 베시는 한 목초지에서 상하좌우로 인접한 다른 목초지로 이동할 수 있지만, 교통사고를 피하기 위해 차가 안 오는지 확인하고 길을 건너야 한다. 길을 건너는데는 T초 (0 ≤ T ≤ 1,000,000)가 걸린다.</p>

<p>존이 베시에게 체스 대결을 신청했다. 베시는 북서쪽 끝에 있는 목초지에서 남동쪽 끝에 있는 존의 집으로 가야 한다. 길이 멀기 때문에 베시는 가는 도중에 배가 고파진다. 그래서 길을 세 번 건널 때마다 목초지에 있는 풀을 먹어야 한다. 존의 집에 도착할 때도 해당되지만, 출발할 때는 해당되지 않는다. 목초지마다 풀이 자란 정도가 달라서, 풀을 먹는데 걸리는 시간도 다르다.</p>

<p>베시가 가능한 한 빨리 존의 집에 도착할 수 있도록 도와주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 N과 T가 주어진다. 다음 N줄에는 목초지마다 풀을 먹는데 걸리는 시간이 N×N의 형태로 주어진다. 각각의 수는 모두 100,000 이하이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>베시가 존의 집까지 가는데 걸리는 최소 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>30에서 출발해서 가능한 한 빨리 도착하려면 10으로 간 뒤 풀을 먹고, 5로 간 뒤 풀을 먹고, 존의 집인 80으로 가야 한다. 길을 건너는 데 총 16초, 풀을 먹는데 총 15초가 걸린다.</p>

				</div>
				</div>','4 2
30 92 36 10
38 85 60 16
41 13 5 68
20 97 13 80
','31
','SHORTEST_PATH'),
                                                                                                                (12245,'BAEKJOON','https://www.acmicpc.net/problem/14497',14497,'주난의 난(難)','2초','512 MB',12,'<p>주난이는 크게 화가 났다. 책상 서랍 안에 몰래 먹으려고 숨겨둔 초코바가 사라졌기 때문이다. 주난이는 미쳐 날뛰기 시작했다. 사실, 진짜로 뛰기 시작했다.</p>

<p>‘쿵... 쿵...’</p>

<p>주난이는 점프의 파동으로 주변의 모든 친구들을 쓰러뜨리고(?) 누군가 훔쳐간 초코바를 찾으려고 한다. 주난이는 N×M크기의 학교 교실 어딘가에서 뛰기 시작했다. 주난이의 파동은 상하좌우 4방향으로 친구들을 쓰러뜨릴(?) 때 까지 계속해서 퍼져나간다. 다르게 표현해서, 한 번의 점프는 한 겹의 친구들을 쓰러뜨린다. 다음의 예를 보자.</p>

<pre>1 # 1 0 1 1 1
1 1 0 1 0 0 1
0 0 1 * 1 1 1
1 1 0 1 1 1 1
0 0 1 1 0 0 1</pre>

<p>주난이를 뜻하는 *은 (3, 4)에 있고, 초코바를 가진 학생 #는 (1, 2)에 있다. 0은 장애물이 없는 빈 공간임을 뜻하고, 1은 친구들이 서있음을 의미한다. 다음은 주난이의 점프에 따른 생존(?) 학생들의 변화이다.</p>

<pre>1 # 1 0 1 1 1
1 1 0 0 0 0 1
0 0 0 * 0 1 1
1 1 0 0 1 1 1
0 0 1 1 0 0 1</pre>

<p>&nbsp;</p>

<pre>1 # 0 0 0 0 1
0 0 0 0 0 0 0
0 0 0 * 0 0 1
0 0 0 0 0 1 1
0 0 0 0 0 0 1</pre>

<p>&nbsp;</p>

<pre>0 X 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 * 0 0 0
0 0 0 0 0 0 1
0 0 0 0 0 0 0</pre>

<p>위의 예시에서 주난이는 3번의 점프 만에 초코바를 훔쳐간 범인을 찾아낼 수 있다!</p>

<p>주난이를 빨리 멈춰야 교실의 안녕을 도모할 수 있다. 주난이에게 최소 점프 횟수를 알려줘서 교실을 지키자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 주난이가 위치한 교실의 크기 N, M이 주어진다. (1 ≤ N, M ≤ 300)</p>

<p>둘째 줄에 주난이의 위치 x1, y1과 범인의 위치 x2, y2가 주어진다. (1 ≤ x1, x2 ≤ N, 1 ≤ y1, y2 ≤ M)</p>

<p>이후 N×M 크기의 교실 정보가 주어진다. 0은 빈 공간, 1은 친구, *는 주난, #는 범인을 뜻한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>주난이가 범인을 잡기 위해 최소 몇 번의 점프를 해야 하는지 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>파동은 호수에 떨어진 돌맹이의 물 파동처럼 상하좌우 네 방향으로 장애물(친구들)을 만날 때 까지 계속해서 퍼져나간다.</p>

<pre># 0 0 0 0
1 1 1 1 1
0 0 0 0 *</pre>

<p>에서 첫 점프 후에는</p>

<pre># 0 0 0 0
0 0 0 0 0
0 0 0 0 *</pre>

<p>가 되며, 이후 한 번의 추가 점프를 통해 파동이 #에 도달하여 범인을 잡을 수 있다.</p>

				</div>
				</div>','5 7
3 4 1 2
1#10111
1101001
001*111
1101111
0011001
','3
','SHORTEST_PATH'),
                                                                                                                (12237,'BAEKJOON','https://www.acmicpc.net/problem/14611',14611,'월요병','1초','512 MB',18,'<p>일요일 밤, 내일 학교에 가는 것이 괴로워지기 시작했다.</p>

<p>학교에 가지 않을 핑계를 만들기 위해서, 집에서 학교로 가는 길에 벽을 잘 세워 집에서 학교로 가는 길을 모두 막기로 결정하였다.</p>

<p>학교와 집이 있는 동네는 N*M의 칸으로 이루어져있다. 집은 (1, 1)에 위치하고, 학교는 (N, M)에 위치한다.</p>

<p>각각의 칸은 3가지 종류로 나뉜다.</p>

<ul>
	<li>이미 벽이 존재하는 칸 (-2로 나타낼 것이다.)</li>
	<li>벽이 존재하지 않으며, 벽을 세울 수 없는 칸 (-1로 나타낼 것이다.)</li>
	<li>벽이 존재하지 않으며, 비용을 지불하면 벽을 세울 수 있는 칸 (비용이 적혀있을 것이다.)</li>
</ul>

<p>우리는 3번 종류의 칸에 적절히 벽을 세워서 집에서 학교로 가는 길을 막을 것이다. 단, 돈을 절약하기 위해서 비용을 최소로 하고 싶다. 다만 어떻게 벽을 지어도 막을 수 없는 경우가 있을 수 있는데, 이러한 경우도 판단해서 알려주어야 한다.</p>

<p>집에서 학교로 이동할 때는 상하좌우로만 이동할 수 있으며(대각선 방향으로는 이동할 수 없다), 주어진 격자판(N*M) 밖으로 이동할 수 없다. 또한, 집과 학교가 위치한 칸은 벽을 세울 수 없는 칸임이 보장된다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 지도의 행의 수 N, 열의 수 M이 공백을 사이로 주어진다. (2 ≤ N, M ≤ 300) 다음 N 줄에는 각각 M 개 정수가 주어진다. -2는 벽이 있음을 의미하고, -1은 벽을 세울 수 없는 장소를 의미하며, 0 이상의 정수는 벽을 세울 수 있는 장소이며, 정수는 벽을 세우는 비용을 의미한다. 비용 값은 10억을 넘지 않는 정수이다. i 번째 줄의 j 번째 문자는 (i, j)의 정보를 나타낸다.</p>

<p>집과 학교가 위치한 칸((1, 1)와 (N,M))에는 -1가 들어옴이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 학교를 갈 수 없게 만드는 최소 비용을 출력한다. 단, 학교를 갈 수 없게 길을 막을 수 없다면, -1을 출력한다</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제1 설명</p>

<pre>..#
.*.
.*.</pre>

<p>으로 막으면 가능하다,</p>

				</div>
				</div>','3 3
-1 1 -2
1 1 1
1 1 -1
','2
','SHORTEST_PATH'),
                                                                                                                (12242,'BAEKJOON','https://www.acmicpc.net/problem/14618',14618,'총깡 총깡','1초','256 MB',13,'<p dir="ltr">동물 애호가 진서는 총깡총깡 뛰는 동물과 짝폴짝폴 뛰는 동물들을 K마리씩 키운다. 타지로 취업하게 된 진서는 내일 이사를 한다.</p>

<p dir="ltr">이사하게 될 집에서 같이 살게 될 룸메이트 일호는 동물을 싫어하기 때문에 진서는 근처의 집에 동물들을 한마리씩 맡길 예정이다.</p>

<p dir="ltr">진서가 동물들을 맡길 수 있는 집의 종류는 A형 집과 B형 집 2종류 이다.</p>

<p>우연하게도 짝폴짝폴 뛰는 동물과 총깡총깡 뛰는 동물, A형 집, B형 집의 수는 모두 같다.</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14618/1.png" style="height: 461.667px; width: 383.333px;"></p>

<p dir="ltr">진서는 총깡총깡 뛰는 동물들과 짝폴짝폴 뛰는 동물들을 같은 종류의 집에 통일 시켜 맡기고 싶다.</p>

<p dir="ltr">하지만 진서는 총깡총깡 뛰는 동물들을 약간 더 좋아하므로 각 집에서 동시에 출발하여 진서네 집으로 가장 빨리 도착하는 동물이 총깡총깡 뛰는 동물이길 원한다.</p>

<p dir="ltr">진서가 살게 될 집, A형 집, B형 집, A형 집도 B형 집도 아닌 집이 있는 지도가 주어질 때 총깡총깡 뛰는 동물이 A형 집에 살아야 할 지 B형집에 살아야 할지 출력하고 가장 빨리 도착하는 총깡총깡 뛰는 동물이 진서네 집으로 부터 얼마만큼 떨어져 있는지 출력하라.</p>

<p>(만약 총깡총깡 뛰는 동물들이 A형집에 살던 B형집에 살던 상관이 없는 경우는 A형집에 살기로 한다.)</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p dir="ltr">입력의 첫 번째 줄에 전체 집의 수 N과 집과 집사이를 연결하는 도로 M이 공백으로 주어진다. (3 ≤ N ≤ 5,000, 3 ≤ M ≤ 20,000)</p>

<p dir="ltr">입력의 둘째 줄에 진서의 집 J가 주어진다 (1 ≤ J ≤ N)</p>

<p dir="ltr">입력의 셋째 줄에 종류별 동물의 수 K가 주어진다. (2*K ≤ N)</p>

<p dir="ltr">입력의 넷째 줄에 K개의 A형 집이 공백으로 구분되어 주어진다.</p>

<p dir="ltr">입력의 다섯 번째 줄에 K개의 B형 집이 공백으로 구분되어 주어진다.</p>

<p>이후 M개의 줄에 X Y Z(1 ≤ X, Y ≤ N, 1 ≤ Z ≤ 100)가 주어진다. 이는 X번 집과 Y번 집 사이에 Z의 길이를 가지는 도로가 존재한다는 것이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p dir="ltr">총깡총깡 뛰는 동물이 살게 될 집의 종류를 말한 뒤 다음줄에 거리를 출력한다.</p>

<p>A형 집에서만 진서의 집에 갈 수 있는 경우 A를 출력한 뒤 다음 줄에 거리를 출력, B형 집에서만 진서의 집에 갈 수 있는 경우 B를 출력한 뒤 다음 줄에 거리를 출력, A형 집, B형 집 둘다 진서의 집에 갈 수 없는 경우에는 ?1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 6
2
2
1 4
3 5
1 2 3
1 5 3
1 3 10
2 4 7
2 5 2
3 4 2
','B
2
','SHORTEST_PATH'),
                                                                                                                (12253,'BAEKJOON','https://www.acmicpc.net/problem/14630',14630,'변신로봇','1초','128 MB',13,'<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14630/1.png" style="height:194px; width:205px"></p>

<p>승균이는 변신로봇에 심취해있었다. 한 분야가 극에 달한 사람은 그것을 통해 세상을 이해한다는 말이 있는데, 승균이가 바로 그러했다. 승균이는 시시때때로 감정이 변하는 사람들을 보면서 사람은 변신로봇과 같다고 생각했다. 또한, 세계의 흐름은 거대한 변신로봇을 조립하는 과정이며, 그 흐름 속에서 우리의 역할은 변신로봇의 부품으로써 다른 부품들과 올바르게 맞물려있는 것에 있다고 믿고 있었다. 그러나 이런 승균이를 보고 있던 승균이의 선생님 준하는 마음이 편치 않았다. 왜냐하면, 자신이 승균이에게 변신로봇을 소개 시켜준 것은 변신로봇을 통해 과학과 수학에 관심을 갖게 하려는 의도였는데, 준하의 의도와는 달리 승균이가 변신로봇을 통해 철학가가 되어가고 있었기 때문이다. 보다 못한 준하는 변신로봇에 동전투입기를 박아버렸다.</p>

<p>이제 변신을 하기 위해선 동전을 넣어야 하는데, 로봇의 현재 상태에서 부품의 형태가 가까운 변신일수록 돈이 적게 들고 먼 형태일수록 돈이 많이 드는 구조이다. 부품의 형태는 숫자로 나타낼 수 있고, 로봇의 상태는 그 숫자들의 모임으로 나타낼 수 있다. 변신에 필요한 돈은 각 부품들의 숫자 차이를 제곱한 것의 합이 된다. 예를 들어 로봇의 현재 상태가 123이고 다른 상태가 222라고 한다면 변신에 필요한 돈은 (1-2)<sup>2</sup> + (2-2)<sup>2</sup> + (3-2)<sup>2</sup>인 2가 된다.</p>

<p>승균이는 수학을 전혀 못하기 때문에 이대로 가다간 패닉에 빠질지도 모른다. 불쌍한 승균이를 대신해 돈을 가장 적게 사용해서 승균이가 원하는 변신 상태를 만들어주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 변신로봇의 변신 상태의 개수 N이 주어진다. (1≤N≤1,000)</p>

<p>둘째 줄부터 N줄에 걸쳐 각 변신 상태에 대한 부품의 형태가 숫자로 주어진다. 부품의 형태의 길이는 100을 넘지 않는다. 길이가 다른 부품의 형태는 존재하지 않고, 부품의 형태는 0으로 시작할 수 있다.</p>

<p>다음 줄에 현재 변신 상태의 번호와 승균이가 원하는 변신 상태의 번호가 주어진다. 번호는 위에 입력받은 순서대로 1부터 번호가 매겨져 있다고 가정한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 현재 변신 상태로 승균이가 원하는 변신 상태를 만드는 대에 필요한 돈의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
11
33
55
1 3
','16
','SHORTEST_PATH'),
                                                                                                                (12258,'BAEKJOON','https://www.acmicpc.net/problem/14704',14704,'타일 뒤집기 (Hard)','1초','512 MB',24,'<p>지구이는 신기한 게임판을 가지고 있다. 이 게임판에는 한 면은 검은색, 한 면은 흰색으로 칠해진 타일이 N행 N열으로 배치되어 있다. 각 타일은 제자리에서 뒤집을 수 있는데, 타일 하나를 뒤집으면 그 타일과 상하좌우로 인접한 타일들이 같이 뒤집힌다. 지구이는 타일들이 무작위로 배치된 게임판에서 타일들을 적당히 뒤집어서 모든 타일이 흰색 면이 위를 향하도록 만드는 놀이를 좋아한다.</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14704/1.png" style="height: 80px; width: 375px;"></p>

<p>어느 날, 지구이가 게임판을 가지고 놀다가 자리를 비운 사이 지구이의 동생이 이 게임판을 발견했다. 지구이의 동생은 놀이의 규칙을 모르기 때문에, 그냥 처음 상태에서 검은색 면이 위를 향하고 있는 타일들을 전부 한 번씩 뒤집어 보았다. 그러자 놀랍게도 모든 타일이 흰색 면이 위를 향하게 되었다!</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14704/2.png" style="height: 95px; width: 374.167px;"></p>

<p>돌아온 지구이는 동생에게 놀이의 규칙을 알려 주려고 했지만, 그 전에 동생이 즐거워하는 모습을 더 보고 싶어져서 같은 특징을 갖는 게임판을 몇 번 더 만들어 주기로 했다. 지구이는 멋진 해커이기 때문에 게임판의 규칙을 따르지 않고 원하는 타일들만 따로 뒤집어서 원하는 색 배치를 만들 수 있다. 하지만 아무 조건 없이 타일을 뒤집는 것은 별로 재미가 없었기 때문에, 지구이는 게임판에서 몇 개의 타일들은 뒤집지 않고 원하는 배치를 만들어 보기로 했다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 게임판의 크기 N(1 ≤ N ≤ 1, 000)이 주어진다.</p>

<p>두 번째 줄부터 N개의 줄에 걸쳐 게임판의 타일들의 상태를 나타내는 N글자의 문자열이 주어진다. 문자열은 <code>#</code>와 <code>.</code>, <code>-</code>만으로 이루어져 있으며, <code>#</code>는 검은색 면이 위를 향하도록 고정된 타일, <code>.</code>는 흰색 면이 위를 향하도록 고정된 타일, <code>-</code>는 지구이가 마음대로 뒤집을 수 있는 타일을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>N개의 줄에 걸쳐 지구이의 동생이 검은색 면이 위를 향하고 있는 타일들을 전부 한 번씩 뒤집어서 모든 타일이 흰색 면이 위를 향하도록 만들 수 있는 게임판의 모양을 출력한다. 입력 조건과 마찬가지로 검은색 면이 위를 향하고 있는 타일은 <code>#</code>, 흰색 면이 위를 향하고 있는 타일은 <code>.</code>로 나타낸다.</p>

<p>답이 여러 가지일 경우 아무것이나 출력하고, 답이 존재하지 않을 경우 <code>thinking_face</code>를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
-.--
---#
--.-
.---
','#.#.
...#
#...
.#.#
','SHORTEST_PATH'),
                                                                                                                (12264,'BAEKJOON','https://www.acmicpc.net/problem/14938',14938,'서강그라운드','1초','128 MB',12,'<p>예은이는 요즘 가장 인기가 있는 게임 서강그라운드를 즐기고 있다. 서강그라운드는 여러 지역중 하나의 지역에 낙하산을 타고 낙하하여, 그 지역에 떨어져 있는 아이템들을 이용해 서바이벌을 하는 게임이다. 서강그라운드에서 1등을 하면 보상으로 치킨을 주는데, 예은이는 단 한번도 치킨을 먹을 수가 없었다. 자신이 치킨을 못 먹는 이유는 실력 때문이 아니라 아이템 운이 없어서라고 생각한 예은이는 낙하산에서 떨어질 때 각 지역에 아이템 들이 몇 개 있는지 알려주는 프로그램을 개발을 하였지만 어디로 낙하해야 자신의 수색 범위 내에서 가장 많은 아이템을 얻을 수 있는지 알 수 없었다.</p>

<p>각 지역은 일정한 길이 l (1 ≤ l ≤ 15)의 길로 다른 지역과 연결되어 있고 이 길은 양방향 통행이 가능하다. 예은이는 낙하한 지역을 중심으로 거리가 수색 범위 m (1 ≤ m ≤ 15) 이내의 모든 지역의 아이템을 습득 가능하다고 할 때, 예은이가 얻을 수 있는 아이템의 최대 개수를 알려주자.</p>

<p style="text-align:center"><img alt="" src="https://upload.acmicpc.net/ef3a5124-833a-42ef-a092-fd658bc8e662/-/preview/" style="width: 340.833px; height: 347.5px;"></p>

<p>주어진 필드가 위의 그림과 같고, 예은이의 수색범위가 4라고 하자. ( 원 밖의 숫자는 지역 번호, 안의 숫자는 아이템 수, 선 위의 숫자는 거리를 의미한다) 예은이가 2번 지역에 떨어지게 되면 1번,2번(자기 지역), 3번, 5번 지역에 도달할 수 있다. (4번 지역의 경우 가는 거리가 3 + 5 = 8 > 4(수색범위) 이므로 4번 지역의 아이템을 얻을 수 없다.) 이렇게 되면 예은이는 23개의 아이템을 얻을 수 있고, 이는 위의 필드에서 예은이가 얻을 수 있는 아이템의 최대 개수이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 지역의 개수 n (1 ≤ n ≤ 100)과 예은이의 수색범위 m (1 ≤ m ≤ 15), 길의 개수 r (1 ≤ r ≤ 100)이 주어진다.</p>

<p>둘째 줄에는 n개의 숫자가 차례대로 각 구역에 있는 아이템의 수 t (1 ≤ t ≤ 30)를 알려준다.</p>

<p>세 번째 줄부터 r+2번째 줄 까지 길 양 끝에 존재하는 지역의 번호 a, b, 그리고 길의 길이 l (1 ≤ l ≤ 15)가 주어진다.</p>

<p>지역의 번호는 1이상 n이하의 정수이다. 두 지역의 번호가 같은 경우는 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>예은이가 얻을 수 있는 최대 아이템 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5 4
5 7 8 2 3
1 4 5
5 2 4
3 2 3
1 2 3
','23
','SHORTEST_PATH'),
                                                                                                                (7433,'BAEKJOON','https://www.acmicpc.net/problem/15308',15308,'비밀 요원','2초','512 MB',25,'<p>경기과학고가 세워진 터에는 어떤 역사가 숨어 있을까? 시간을 거슬러 올라가 보자.</p>

<p>2000년 전, 경기과학고가 있던 자리에는 도시국가 <em>인호국</em>의 성이 세워져 있었다. 인호국의 성은 $1$에서 $N$까지 번호가 붙은 $N$개의 망루가 $M$개의 성벽들로 연결되어 있는 튼튼한 구조로, 성벽은 두 망루를 잇는 선분 형태로, 망루 외의 지점에서 교차하지 않으며, 모든 망루 사이를 성벽 위를 타고 이동할 수 있도록 되어 있었다. 인호국의 왕 인호는 그 성 안에 국가의 기밀 정보를 숨겨 놓았다.</p>

<p>인호국은 또 다른 도시국가 <em>민석국</em>과 경쟁 중에 있었는데, 민석국의 왕 민석이는 인호국의 기밀 정보를 캐내기 위해 비밀 요원들을 성 안으로 보내기로 한다. 비밀 요원들은 매우 빠르기 때문에 성벽이 가로막고 있지 않는 한 이동 시간을 무시할 수 있다. 또, 비밀 요원들은 인호국의 성벽을 타고 넘어다닐 수 있는데, 이때는 성벽의 높이만큼의 시간이 걸린다.</p>

<p>민석이는 비밀 요원들에게 총 $Q$개의 지점을 순서대로 방문해 조사하고 오라는 명령을 내렸다. 이 지점들은 성벽이나 망루와 겹치지 않음이 보장된다. 민석이는 비밀 요원들이 똑똑하다고 생각했기 때문에, 방문해야 하는 지점들만 알려 주면 알아서 빠르게 갔다 올 것이라고 믿고 있다.</p>

<p>하지만, 비밀 요원들은 생각만큼 똑똑하지 않았다. 그들은 어떻게 움직여야 가장 빠를지 전혀 감을 못 잡고 있다. 비밀 요원들이 빠르게 움직이지 못하면 들켜버리고 말 것이다. 비밀 요원들을 도와주자!</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 망루의 개수 $N$ ($1 \le N \le 200\, 000$) 과 성벽의 개수 $M$ ($N-1 \le M \le N+100$) 이 주어진다.</p>

<p>다음 $N$개의 줄에는 순서대로 $i$번 망루가 놓인 좌표 $x_i$, $y_i$가 주어진다. ($|x_i|, |y_i| \le 10^9$)</p>

<p>다음 $M$개의 줄에는 각 성벽이 잇는 두 망루의 번호 $u_i$, $v_i$와 망루의 높이 $h_i$가 주어진다. ($1 \le u_i, v_i \le N$, $1 \le h_i \le 10^9$)</p>

<p>성벽은 망루 외의 지점에서 교차하지 않음이 보장되며, 임의의 두 망루 사이를 성벽을 타고 오갈 수 있음이 보장된다.</p>

<p>그 다음 줄에는 민석이가 내린 명령의 개수 $Q$ ($1 \le Q \le 200\, 000$) 가 주어진다.</p>

<p>다음 $Q$개의 줄에는 각 지점의 좌표 $a_i$, $b_i$가 주어진다. ($|a_i|, |b_i| \le 10^9$)</p>

<p>모든 지점은 성벽이나 망루와 겹치지 않음이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>$Q$줄에 걸쳐, $i$번째 줄에는 $i-1$번째 지점에서 $i$번째 지점으로 가는 최단 시간을 출력한다.</p>

<p>(단, 0번째 지점의 좌표는 ($\infty$, $\infty$)로 가정한다)</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제를 그림으로 나타내면 다음과 같다.</p>

<p style="text-align:center"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15308/1.png" style="height:537px; width:833px"></p>

				</div>
				</div>','4 5
1 2
3 1
3 3
5 2
1 2 4
1 3 5
2 3 2
2 4 5
3 4 3
3
2 2
4 2
6 2
','4
2
3
','SHORTEST_PATH'),
                                                                                                                (12330,'BAEKJOON','https://www.acmicpc.net/problem/15704',15704,'백준 마라톤 대회','2초(하단참고)','512 MB',16,'<p>백준 마라톤 대회가 열린다. 마라톤 대회는 미리 정해진 코스를 따라서 달려야 하며, 아직 코스는 정해지지 않았다. 마라톤 대회가 열리는 곳은 N개의 교차로와 M개의 양방향 도로로 이루어져 있다. 도로는 두 교차로를 연결한다. 교차로는 1번부터 N번까지 번호가 매겨져 있고, 도로도 1번부터 M번까지 번호가 매겨져 있다.</p>

<p>마라톤 코스는 (V<sub>1</sub>, V<sub>2</sub>, ..., V<sub>k</sub>)로 나타낼 수 있다. 이때, k는 마라톤 코스에 포함되어 있는 교차로의 개수이다. 시작 교차로 V<sub>1</sub>은 항상 1번 교차로, 마지막 교차로 V<sub>k</sub>는 항상 N번 교차로이어야 한다.&nbsp;같은 교차로가 두 번 이상 등장하면 안되고, 연속하는 교차로는 도로로 연결되어 있어야 한다.</p>

<p>마라톤 대회를 열려면 도로를 통제해야 한다. 도로를 통제하려면 비용을 지불해야 할 수도 있고 지불하지 않을 수도 있다. 각 도로에는 도로 통제 비용 C와 지불 인원 상한선 T가 존재한다. P를 마라톤에 참가하는 사람의 수라고 했을 때, P ≤ T인 경우에는 비용을 지불하지 않고 도로를 통제할 수 있다. P > T인 경우에는&nbsp;C×(P-T)<sup>2</sup>원이 도로를 통제하는 비용이다.</p>

<p>마라톤 대회의 예산 중에서 도로 통제에 지불할 수 있는 금액은 최대 K원이다. 마라톤 코스는 참가할 수 있는 사람이 최다가 되게 정하려고 한다. 마라톤 코스를 예산 안에서 적절히 정했을 때, 참가할 수 있는 사람의 수의 최댓값을 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 교차로의 수 N, 도로의 수 M, 예산 K가 주어진다. (2 ≤ N ≤ 100,000, N-1 ≤ M ≤ 100,000, 1 ≤ K ≤ 10<sup>9</sup>)</p>

<p>둘째 줄부터 M개의 줄에는 도로의 정보가 주어진다. 도로의 정보는 네 정수 A, B, C, T (1 ≤ A <&nbsp;B ≤ N, 1 ≤ C, T ≤ 1,000) 로 이루어져 있다. A와 B는 도로가 연결하는 두 교차로의 번호, C와 T는 그 도로&nbsp;통제하는 비용을 계산하는데 쓰이는 값이다.&nbsp;</p>

<p>임의의 두 교차로를 연결하는 도로의 개수는 최대 1개이고, 항상 정답을 구할 수 있는 경우만 입력으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>마라톤 코스를 예산 안에서 적절히 정했을 때, 참가할 수 있는 사람의 수의 최댓값을 첫째 줄에 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1의 경우에 마라톤 코스를 (1, 3)으로 정하면, 3명의 사람이 참가할 수 있게 된다. 이때, 1과 3을 연결하는 도로를 통제하는 비용은 1×(3-1)<sup>2</sup> = 4&nbsp;이다. 4명이 참가하는 경우에는 통제하는 비용이 1×(4-1)<sup>2</sup> = 9가&nbsp;되어서 예산을 초과하게 된다.</p>

<p>예제 2는 예제 1과 같은 경우이지만, 예산이 3원으로 줄어들었다. 따라서, 3명의 사람이 참가할 수 없다. 이때, 2명이 참가하는 경우 통제 비용은 1×(2-1)<sup>2</sup> = 1이다.</p>

<p>예제 3의 경우에는 1번 교차로에서 시작해서 3번 교차로에서 끝나는 마라톤 코스는 (1, 2, 3)밖에 없다. 참가하는 사람의 수와 통제 비용을 계산해보면 아래와 같다.</p>

<ul>
	<li>1명 참가: 5×(1-1)<sup>2</sup> + 0&nbsp;= 0</li>
	<li>2명 참가: 5×(2-1)<sup>2</sup> + 0&nbsp;= 5 + 0 = 5</li>
	<li>3명 참가:&nbsp;5×(3-1)<sup>2</sup> + 0&nbsp;= 20 + 0 = 20</li>
	<li>4명 참가:&nbsp;5×(4-1)<sup>2</sup> + 0&nbsp;= 45 + 0 = 45</li>
	<li>5명 참가: 5×(5-1)<sup>2</sup> + 0 = 80 + 0 =&nbsp;80</li>
	<li>6명 참가:&nbsp;5×(6-1)<sup>2</sup> + 1×(6-5)<sup>2</sup> = 125 + 1 =&nbsp;126</li>
	<li>7명 참가: 5×(7-1)<sup>2</sup> + 1×(7-5)<sup>2</sup> = 180 + 4= 184</li>
</ul>

<p>예산 25로는 최대 3명만 참가가 가능하다.</p>

				</div>
				</div>','3 3 5
1 2 1 1
1 3 1 1
2 3 1 1
','3
','SHORTEST_PATH'),
                                                                                                                (12334,'BAEKJOON','https://www.acmicpc.net/problem/15709',15709,'정기검진','1.5초','256 MB',16,'<p>디디플래닛에 살고 있는 주민들은 정기검진을 받으러 가려고 한다.</p>

<p>디디플래닛에는 총 N개의 집(1, 2, ..., N)과, M개의 병원이 있으며(N + 1, N + 2, ..., N + M), 집이 있는 구역과 병원이 있는 구역은 깊은 강으로 분리되어 있다.&nbsp;이 강을 건너기 위해선 반드시 다리를 거쳐야 하는데, 다리는 모두 B개(N + M + 1, N + M + 2, ..., N + M + B)&nbsp;있으며 모든 다리는 0초만에 건널 수 있다고 가정하자. 또한 디디플래닛에는 집 혹은 병원 혹은 다리를 잇는 도로가 K개 존재한다. 심지어 다리와 다리를 잇는 도로도 존재할 수 있다. 그렇지만 집과 병원사이에는 깊은 강이 있기 때문에, 집과 병원을 잇는 도로는 존재하지 않음에 유의하라.</p>

<p>우리는 다음과 같은 Q개의 질문에 답하여야 한다.</p>

<ul>
	<li>S<sub>i</sub>번집에 있는 주민이 E<sub>i</sub>번 병원까지 가는 데 걸리는 최소한의 시간은 얼마인가?</li>
</ul>

<p>다음 질문을 수행할 수 있는 프로그램을 만들어보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 집의 수 N, 병원의 수 M(1 ≤ N, M ≤ 10,000)과 다리의 수 B(1 ≤ B ≤ 100), 도로의 수 K(1 ≤ K ≤ 2 ×&nbsp;10<sup>4</sup>), 질문의 수 Q(1 ≤ Q ≤ 10<sup>5</sup>)가 공백으로 구분되어 주어진다.</p>

<p>두 번째 줄부터 K개의 줄에는 정수 a, b, K<sub>i</sub>가 공백으로 구분되어 주어진다. 이는 지점 a와 b사이에 도로가 존재하며, 그 도로를 통과하는 데 K<sub>i</sub>(1 ≤ K<sub>i</sub> ≤ 10<sup>9</sup>)의 시간이 소요된다는 것을 의미한다.</p>

<p>그 다음줄부터 Q개의 줄에는 질문의 S<sub>i</sub>와 E<sub>i</sub>를 나타내는 정수가 공백으로 구분되어 주어진다. (1 ≤ S<sub>i</sub> ≤&nbsp;N, N+1 ≤ E<sub>i</sub> ≤&nbsp;N+M)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>i번째 줄에 i번째&nbsp;질문에 대한 답을 각각 출력하라. 만약 S<sub>i</sub>에서 E<sub>i</sub>로 갈 수 없다면 -1을 출력해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2 2 1 5 2
1 5 3
2 5 1
3 5 3
4 5 3
1 2 1
1 3
2 4
','5
4
','SHORTEST_PATH'),
                                                                                                                (7473,'BAEKJOON','https://www.acmicpc.net/problem/15713',15713,'오리날다','1초','128 MB',18,'<blockquote>
<p>나는 꿈을 꾸었죠 네모난 달이 떴죠~! 하늘위로 올라가 달에게 말을 했죠 ~♬</p>

<p>늦은 밤 잠에서 깨어 날개를 흔들었죠 오리는 날 수 없다 엄마에게 혼났죠</p>

<p>이제는 하늘로 날아갈래요 하늘 위 떠있는 멋.진. 달 되고 싶어 !! ★</p>
</blockquote>

<p>그렇다. 예상했던 대로 우리는 오리를 하늘로 올라갈 수 있게 도와줘야 한다. 오리는 y축만 있는 공간에 있으며, 그 곳에는 서로 다른 N개의 트램펄린이 있다. (y축만 있는 공간이지만, 같은 위치에 여러 개의 트램펄린이 존재할 수도 있다!) i번 트램펄린은 위치 y<sub>i</sub>에 있고, 해당 트램펄린을 밟을 경우 오리는 정확히 h<sub>i</sub>만큼 도약해서 y<sub>i</sub> + h<sub>i</sub>까지 올라가게 된다. 그리고 다시 중력의 영향으로 지면을 향해 떨어진다. 오리는 멈춰있거나 떨어지는 도중에 원하는 트램펄린을 다시 밟을 수 있다.</p>

<p>오리는 최소한의 거리만을 이동하고 싶어 하기 때문에 우리는 오리가 하늘에 도착할 때까지 이동해야 하는 거리의 최솟값을 구하는 프로그램을 작성해야 한다.</p>

<p>단, 오리는&nbsp;현재 0의 위치에 있으며 오리는 하늘에 닿기만 해도 하늘에 도착한 것으로 간주한다. 편의상 오리의 크기는 0으로 생각하며, 이동할 때 다른 트램펄린과의 충돌은 무시한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 트램펄린의 개수 N(1 ≤ N ≤ 10<sup>5</sup>)과 하늘의 높이를 의미하는 정수 S(1 ≤ S ≤ 10<sup>9</sup>)가 주어진다.</p>

<p>다음 N개의 줄에는 각각 한 줄씩 두개의 정수 i번째 트램펄린의 위치 y<sub>i</sub>(0 ≤ y<sub>i</sub> ≤ 10<sup>9</sup>)와 해당 트램펄린을 밟을 경우 도약하는 높이 h<sub>i</sub>(0 ≤ h<sub>i</sub>&nbsp;≤&nbsp;10<sup>9</sup>)가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>오리가 하늘에 도착할 때까지 이동해야 하는 거리의 최솟값을 출력하라.</p>

<p>만약 오리가 하늘에 도착할 수 없다면 "Ducks cant fly"를 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>1번째, 3번째, 4번째 트램펄린을 순서대로 밟으면 된다.</p>

<p>오리는 (0~7), (7~6), (6~9), (9~10) 구간을 이동하므로 정답은 12이다.</p>

<p>10에 닿는 순간 오리는 하늘에 도착한 것으로 간주함에 유의하라.</p>

				</div>
				</div>','4 10
0 7
0 5
6 3
9 11
','12
','SHORTEST_PATH'),
                                                                                                                (12336,'BAEKJOON','https://www.acmicpc.net/problem/15723',15723,'n단 논법','2초','128 MB',10,'<blockquote>
<p>모든 중앙대 컴퓨터공학부(소프트웨어학부) 학생들은 미인이다.</p>

<p>지무근은 중앙대 컴퓨터공학부 학생이다.</p>

<p>그러므로 지무근은 미인이다.</p>
</blockquote>

<p>위 연역 논증은 대표적인 삼단논법의 예시이다. 삼단논법이란 전제 두 개와 결론 하나로 이루어진 연역 논증이다. 이것을 응용하면, n개의 전제가 있을 때 m개의 결론을 도출할 수 있을 것이다. 이때의 n과 m은 모든 의미에서 적절한 수라고 가정하자. 자세한 것은 입출력 예시를 확인하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 정수 n(2 ≤ n ≤ 26)이 주어진다.</p>

<p>둘째 줄부터 n개의 줄에 걸쳐 각 줄에 전제가 하나씩 주어진다. 전제는 모두 a is b의 형식으로 주어지며 a와 b는 서로 다른 임의의 알파벳 소문자이다. 특별한 명시는 없지만 모든 전제는 “모든 a는 b이다”라는 의미이다. 하지만 “모든 b는 a이다”의 의미는 될 수 없다. 또한 a는 b이면서 c일 수 없으나, a와 b가 동시에 c일 수는 있다.</p>

<p>n + 2번째 줄에 정수 m(1 ≤ m ≤ 10)이 주어진다. 그 다음 m개의 줄에 걸쳐 각 줄에 하나의 결론이 전제와 같은 형식으로 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>m개의 줄에 걸쳐 각 줄에 결론이 참인지 거짓인지 출력하라. 참일 경우 T, 거짓일 경우 F를 출력하라. 알 수 없는 경우도 거짓이다. 답은 필히 대문자로 출력해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
a is b
b is c
c is d
3
a is d
a is c
d is a
','T
T
F
','SHORTEST_PATH'),
                                                                                                                (12347,'BAEKJOON','https://www.acmicpc.net/problem/15808',15808,'주말 여행 계획','1초','512 MB',16,'<p>영선이는 요즘 여행에 빠져있다. 그래서 짧게나마 여행을 다녀오고 싶었던 영선이는 주말을 활용해 여행 갈 계획을 세우고 있다. 하지만 영선이는 가고 싶은 여행지가 너무 많아 고민 중이며, 숙소 또한 좋은 곳으로 가고 싶기에 여행지와 숙소를 기반으로 계획을 작성하려 한다.</p>

<p>영선이는 가고 싶은 여행지 리스트와 숙소 리스트를 미리 조사하여 작성했다. 그리고 각 여행지와 숙소에 조사한 자료를 통해 기대치를 매겼다. 시간이 없기에 영선이는 여행지 한 곳, 숙소 한 곳을 방문할 것이며, 이때 선택된 장소들의 기대치 합이 최대가 되는 여행 계획을 작성할 것이다.</p>

<p style="text-align: center;"><img alt="" src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15808/1.png" style="width: 398px; height: 314px;"></p>

<p>또한, 여행지와 숙소 사이의 거리가 멀다면 여행지에서 관광을 하는 시간이 줄어들기 때문에, 여행 자체의 재미가 줄어든다고 생각했다. 결국 영선이는 기대치 합에서 둘 사이 거리를 빼기로 하였다.</p>

<p>즉, 여행 계획은 여행지, 숙소 각각의 기대치의 합에서 둘 사이의 거리를 뺀 값을 최대로 하는 계획을 작성하려고 한다. 하지만 어떤 문제나 그렇듯 영선이는 매우 바쁜 관계로 계획을 세울 시간이 없다. 그렇기 때문에 계획을 세우는 것을 당신에게 부탁했다. 영선이가 작성한 여행지와 숙소 리스트 및 인근 지역의 지도를 토대로 영선이의 주말 여행 계획을 세워주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>프로그램의 입력은 표준 입력으로 받는다. 여행을 하고자 하는 지역의 지도는 다음과 같은 정보가 주어진다. 주요 지점들 n개와 그 사이를 연결하는 도로가 주어지고, 도로에는 거리가 표기되어 있다. 여행지와 숙소들은 각각 한 지점에 표기되어 있으며, 여행지와 숙소는 같은 지점에 위치해 있지 않는다. 그리고 모든 지점들은 다른 지점으로 도로를 통하여 이동할 수 있는 경로가 존재한다.</p>

<p>입력의 첫 줄에는 지점의 개수 n이 주어진다. (2 ≤ n ≤ 1000)</p>

<p>다음 n줄에는 각 줄마다 n개의 정수가 주어지며, i번째 줄의 j번째 수 d<sub>ij</sub> 는 i번째 지점에서 j번째 지점까지의 거리이다. 만약 거리가 0이라면 둘 사이의 도로는 존재하지 않는다(0 ≤ d<sub>ij</sub> ≤ 5000, d<sub>ij</sub> = d<sub>ji</sub> , d<sub>ii</sub> = 0)</p>

<p>다음 줄에는 리스트에 작성된 여행지의 개수 p, 숙소의 개수 q가 주어진다. (1 ≤ p,q ≤ n, 2 ≤ p+q ≤ n)</p>

<p>다음 p줄에는 여행지가 위치한 지점번호 l<sub>j</sub> 과 기대치 w<sub>j</sub> 가 주어진다.(1 ≤ l<sub>j</sub> ≤ n, 1 ≤ w<sub>j</sub> ≤ 5000)</p>

<p>다음 q줄에는 숙소가 위치한 지점번호 l<sub>i</sub> 과 기대치 w<sub>i</sub> 가 주어진다.(1 ≤ l<sub>i</sub> ≤ n, 1 ≤ w<sub>i</sub> ≤ 5000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>프로그램의 출력은 표준 출력으로 한다. 여행지와 숙소의 쌍 중 각각의 기대치의 합에서 둘 사이의 거리를 뺀 값이 최대가 되는 값을 출력하시오. 이때, 여행지와 숙소 사이의 경로에 다른 여행지나 숙소가 존재해도 무방하다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6
0 5 0 1 0 0
5 0 3 0 0 5
0 3 0 0 0 2
1 0 0 0 100 0
0 0 0 100 0 3
0 5 2 0 3 0
2 2
3 10
6 11
1 10
4 11
','12
','SHORTEST_PATH'),
                                                                                                                (12355,'BAEKJOON','https://www.acmicpc.net/problem/15906',15906,'변신 이동 게임','2초','512 MB',15,'<p>성호는 새로운 모바일 게임을 다운로드했다. 이 게임은 NxN 크기의 2차원 격자의 시작 지점에 있는 캐릭터를 조작해서 목표 지점까지 이동시키면 클리어되는 게임이다. 캐릭터의 상태는 일반 모드와 변신 모드, 2 가지다. 일반 모드일 때 캐릭터는 한 턴에 상하좌우 중에서 한 방향으로 한 칸 움직일 수가 있지만, 변신 모드라면 움직이는 방식이 달라진다.&nbsp;</p>

<p>격자의 일부 칸에는 워프 지점이 있을 수가 있는데, 캐릭터가 변신 모드라면 한 턴에 캐릭터의 현재 칸을 기준으로 상하좌우 중 한 방향에 있는 가장 가까운 워프 지점으로 이동할 수만 있다. 만약 특정 방향에 워프 지점이 존재하지 않는다면 그 방향으로는 움직일 수 없다.&nbsp;</p>

<p>일반 모드에서 변신 모드가 되는 데에는 t개의 턴이 소모되며, 변신 모드에서 일반 모드로 돌아가는 데에는 턴이 소모되지 않는다. 성호는 요즘 너무 바빠서 게임을 빨리 클리어하고 삭제해버리고 싶었다. 캐릭터가 최초에 1행 1열에 존재하며, 일반 모드인 상태일 때, 성호를 대신하여 게임을 클리어하는 데 필요한 최소 턴 수를 구해주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 2차원 격자의 크기 N(1≤ N ≤ 500), 일반 모드에서 변신 모드로 변신하는 데 소모되는 턴의 수 t(0 ≤ t ≤ 500), 목표 지점의 행과 열의 번호 r(1 ≤ r ≤ N), c(1 ≤ c ≤ N)가 주어진다.</p>

<p>다음 줄에 2차원 격자의 워프 지점 정보가 N개의 줄에 걸쳐 주어진다. 각 줄은 N개의 문자로 이루어져 있으며, 각 문자는 # 이거나 . 이다. #는 워프 지점이 있는 칸을 나타내며, .는 워프 지점이 없는 평범한 칸을 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>게임을 클리어하는 데에 필요한 최소 턴 수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 1에 대해, 일반 모드인 상태로 오른쪽으로 두 번을 이동하면 최소 턴 수이다.</p>

<p>예제 2에 대해, 맨 처음 일반 모드에서 변신 모드로 변신한 다음에 (3,1) 으로 이동한 뒤 (3,3) 으로 이동하면 최소 턴 수이다.</p>

				</div>
				</div>','3 1 1 3
.#.
...
...
','2
','SHORTEST_PATH'),
                                                                                                                (12359,'BAEKJOON','https://www.acmicpc.net/problem/15944',15944,'성공','2초(추가시간없음)','512 MB',19,'<p>당연한 이야기지만, 성공으로 가는 길이 항상 평탄하지만은 않다. 온갖 장애물이 가득하고, 장애물에 막혀서 주저앉을 수도 있다. 그래서 그 장애물을 폭파하려고 한다.</p>

<p>성공으로 가는 길은 N×M격자 위에 놓여 있다. 성공으로 가려면 맨 왼쪽 위 칸에서 시작하여 장애물이 없는 상하좌우로 인접한 칸을 밟으면서 맨 오른쪽 아래 칸에 도착해야 한다. 한 번의 폭파 작업으로 D×D 격자 내에 있는 모든 장애물을 없앨 수 있다. 하지만 세상에 공짜는 없는 법. 폭파 작업에도 큰 힘이 들기 때문에, 성공으로 가려면 최소 몇 번의 폭파 작업이 필요한지 알고 싶다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 격자의 행의 개수 N, 열의 개수 M, 폭파의 범위 D가 주어진다(D ≤ N, M ≤ 500, 1 ≤ D ≤ 100).</p>

<p>그 다음 N개의 줄에 격자의 각 행을 나타내는 길이 M의 문자열이 주어진다. “.”은 장애물이 없는 칸, “#”은 장애물이 있는 칸이다. 출발 지점과 성공에는 장애물이 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 폭파 작업의 최소 횟수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/e14d2149-a512-4d33-ab71-8f4f85f04cd4/-/preview/"></p>

				</div>
				</div>','8 9 3
.########
##.....##
######.##
####...##
####.####
#########
####.####
########.
','2
','SHORTEST_PATH'),
                                                                                                                (7521,'BAEKJOON','https://www.acmicpc.net/problem/15972',15972,'물탱크','2초','512 MB',18,'<p>세로 길이가 <em>N</em>, 가로 길이가 <em>M</em>, 높이가 <em>H</em>인 물탱크가 있다. <em>N</em>, <em>M</em>, <em>H</em>는 모두 양의 정수이다. <그림 1>은 세로 길이가 2, 가로 길이가 3, 높이가 5인 물탱크 모양을 보여준다. <그림 1>에서 보듯이 물탱크 내부는 가로와 세로로 벽이 설치되어 있는데, 내부 각 칸(즉 사각기둥 모양)의 세로와 가로 길이는 1이고 높이는 <em>H</em>가 되도록 벽이 설치되어 있다. 이 물탱크를 위에서 내려다보면 <그림 2>와 같이 각 칸이 정사각형인 격자 모양이 된다. 물탱크 각 칸의 벽에는 물 높이 조정을 위해 구멍이 뚫려 있을 수 있다. 각 칸에는 네 개의 벽이 있는데, 각 벽 내부에는 최대 한 개의 구멍이 뚫려 있을 수 있다. 단, 모서리엔 구멍이 없다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/8560275d-76f2-4881-b05a-d6b72f63bdb2/-/preview/" style="width: 182px; height: 209px;"></p>

<p style="text-align: center;"><그림 1></p>

<p><그림 1>에서 구멍이 있는 높이는 바닥을 기준으로 표시되어 있다. 구멍의 위치를 위에서 보면 <그림 2>처럼 보이는데 이는 물탱크를 위에서 보았을때 어느 벽, 어떤 높이에 구멍이 뚫려 있는지를 알려주며, <그림 1>에선 표시 하기 어려운 물탱크의 구멍 위치도 표시한다. <그림 2>에서 보듯이 물탱크 내부 벽에도 구멍이 있을 수 있다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/02f91c8f-6834-4def-8f74-9e3af33e4c9e/-/preview/" style="width: 298px; height: 218px;"><br>
<그림 2></p>

<p>물탱크에 물을 채울 땐, 모든 구멍을 마개로 막아 물이 새지 못하도록 한 후, 격자의 각 칸 위에 설치된 급수 장치를 통해 물탱크 전체를 물로 채운다. 물이 꽉 찬 후에 구멍을 막고 있는 모든 마개를 제거하면 물이 구멍을 통해 인접한 방이나 외부로 흘러나가게 된다. 어느 정도 시간이 지나면 물이 더 이상 흘러 나가지 않게 되고, 그 때 물탱크 격자의 각 칸에 남아 있는 물의 높이는 서로 다를 수 있다.</p>

<p>참고로, <그림 2>에서 보인 물탱크의 각 칸에 남아 있는 물의 높이를 나타내면 <그림 3>의 괄호 속의 수치와 같다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/92ad0a93-213c-4719-b025-b6d9847fbaba/-/preview/" style="width: 193px; height: 146px;"><br>
<그림 3></p>

<p>벽의 두께를 무시할 때, 물탱크에 남아 있는 물의 총량(부피)을 계산하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>표준 입력으로 다음 정보가 주어진다. 첫 번째 줄에는 물탱크의 세로 길이, 가로 길이, 높이를 나타내는 세 양의 정수 <em>N</em>, <em>M</em>, <em>H</em>가 차례로 주어진다.</p>

<p>다음 줄에는 첫 번째 가로 벽에 설치된 구멍 정보를 나타내는 <em>M</em>개의 정수가 주어진다. 각 정수는 왼쪽부터 시작하여 순서대로 각 칸의 구멍 높이를 의미한다. 구멍의 높이는 0 이상 <em>H</em>미만의 정수이다. 해당 벽에 구멍이 없는 경우는 ?1로 표시한다. 이어지는 줄엔 두 번째 가로 벽에 설치된 구멍 정보가 주어지고, 이런 식으로 <em>N</em>+1 줄에 걸쳐 가로 벽에 설치된 모든 구멍에 대한 정보가 주어진다.</p>

<p>이어지는 줄에는 첫 번째 가로 벽을 공유하는 칸들(<그림 2>에서 맨 윗줄의 칸들)의 세로 벽에 설치된 구멍 정보를 나타내는 <em>M</em>+1개의 정수가 주어진다. 각 정수는 첫 번째 세로 벽부터 시작하여 차례로 각 세로 벽의 구멍 높이를 나타낸다. 그 다음 줄에는 그 다음에 있는 칸들의 세로 벽에 설치된 구멍 정보가 주어진다. 이런 식으로 <em>N</em>줄에 걸쳐 세로 벽에 설치된 모든 구멍 정보가 주어진다.</p>

<p>참고로, 입출력 예에서 보인 첫 번째 예제는 <그림 2>에서 보인 경우에 대응된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>물이 더 이상 흘러 나가지 않는 시점에 물탱크에 남아 있는 물의 총량(부피)을 표준 출력으로 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2 3 5
1 -1 -1
3 2 -1
4 -1 2
-1 -1 4 3
-1 -1 -1 -1
','17
','SHORTEST_PATH'),
                                                                                                                (12361,'BAEKJOON','https://www.acmicpc.net/problem/15983',15983,'순간이동 발판','2초','512 MB',20,'<p>국제 소 줄서기 사진 콘테스트에서 우승한 현욱은 우승 상금을 흥청망청 쓰면서 여행을 다니다 어느 마녀에게 붙잡히고 말았다. 마녀는 현욱이 도망치지 못하게 성 앞에 거대한 미궁을 만들어 놓았고, 마녀로부터 도망치기 위해선 이 미궁을 헤쳐나가 미궁의 출구에 도달해야 한다.</p>

<p>미궁은 1차원의 긴 선분 모양이며, 0부터 100만까지의 정수 좌표로 구역이 나누어져 있다. 이 사이에는 순간이동 발판들이 있는데, 이들은 매초 미궁 내의 다른 구역으로 순간이동한다. 이때&nbsp;그 발판 위에 올라가 있던 사람도 함께 순간이동시킨다. 두 발판이 서로 같은 구역에 있을 때 현욱은 다른 쪽 발판으로 갈아탈 수 있으며, 현욱은 민첩해서 갈아타는 데에는 시간이 소요되지 않는다. 또한 구역들 사이의 간격이 넓기 때문에 서로 다른 구역으로 발판을 이용하지 않고 그냥 뛰어서는 건널 수 없다.</p>

<p>발판들은 순간이동 주기가 있어 각자의 주기만큼이 지나면 다시 처음의 위치로 순간이동하여 반복한다. <strong>각 발판은</strong> <strong>주기 내에서 같은 구역에 2번 이상 나타나지 않는다</strong>. <strong>또한</strong> <strong>두 발판이 방문하는 구역은 최대 한 곳을 제외하고 서로 다르며, 한 구역에는 최대 2개의 발판만이 방문한다.</strong></p>

<p>현재 시각은 0초이고, 발판은 총 <em>N</em>개 있으며 현욱은 첫 번째 발판 위에 올라있다. 첫 번째 발판은 0초일 때 좌표 0인 구역에서 시작하고, 다른 발판은 좌표 0에 방문하지 않는다. 또한 미궁의 출구가 있는 구역에는 최대 하나의 발판만이 방문한다.</p>

<p>마녀에게 잡아먹히기 전에 현욱은 최대한 빨리 미궁에서 탈출해야 한다. 현욱이 미궁에서 탈출하기까지 걸리는 시간은 최소 얼마일까?</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 발판의 수 N과&nbsp;미궁의 출구가 위치한 구역의 좌표 <em>E</em> 가 공백을 사이에 두고 주어진다.</p>

<p>둘째 줄부터 각 발판의 정보가 주어진다. i번째 정보의 첫 줄에는 i번째 발판의 주기 <em>K<sub>i</sub> </em>가 주어지고, 다음 줄에 <em>K<sub>i</sub></em>개의 좌표가 주어진다. 주어지는 순서대로 0초일 때의 좌표, 1초일 때의 좌표, ... <em>K<sub>i&nbsp;</sub></em>- 1초일 때의 좌표이다.</p>

<p>모든 좌표는 10<sup>6</sup> 이하의 음이 아닌 정수이고, 첫 번째 발판의 0초일 때의 좌표는 0임이 보장된다. 또한 입력 전체에서 같은 좌표가 3번 이상 나타나는 경우도 없다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>현욱이 미궁의 출구가 있는 구역에&nbsp;도달하기 위한&nbsp;최소 시간을 출력한다. 만약 도달하는 것이 불가능하다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>노트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>예제 입력 2, 3, 4는 발판들의 주기가 모두 같지 않으므로&nbsp;subtask1에 포함되지 않는다.</p>

				</div>
				</div>','3 20
4
0 1 2 3
4
9 7 5 3
4
15 10 5 20
','7','SHORTEST_PATH'),
                                                                                                                (12375,'BAEKJOON','https://www.acmicpc.net/problem/16118',16118,'달빛 여우','1초(추가시간없음)','512 MB',15,'<p>관악산 기슭에는 보름달을 기다리는 달빛 여우가 한 마리 살고 있다. 달빛 여우가 보름달의 달빛을 받으면 아름다운 구미호로 변신할 수 있다. 하지만 보름달을 기다리는 건 달빛 여우뿐만이 아니다. 달빛을 받아서 멋진 늑대인간이 되고 싶어 하는 달빛 늑대도 한 마리 살고 있다.</p>

<p>관악산에는 1번부터 <em>N</em>번까지의 번호가 붙은 <em>N</em>개의 나무 그루터기가 있고, 그루터기들 사이에는 <em>M</em>개의 오솔길이 나 있다. 오솔길은 어떤 방향으로든 지나갈 수 있으며, 어떤 두 그루터기 사이에 두 개 이상의 오솔길이 나 있는 경우는 없다. 달빛 여우와 달빛 늑대는 1번 나무 그루터기에서 살고 있다.</p>

<p>보름달이 뜨면 나무 그루터기들 중 하나가 달빛을 받아 밝게 빛나게 된다. 그러면 달빛 여우와 달빛 늑대는 먼저 달빛을 독차지하기 위해 최대한 빨리 오솔길을 따라서 그 그루터기로 달려가야 한다. 이때 달빛 여우는 늘 일정한 속도로 달려가는 반면, 달빛 늑대는 달빛 여우보다 더 빠르게 달릴 수 있지만 체력이 부족하기 때문에 다른 전략을 사용한다. 달빛 늑대는 출발할 때 오솔길 하나를 달빛 여우의 두 배의 속도로 달려가고, 그 뒤로는 오솔길 하나를 달빛 여우의 절반의 속도로 걸어가며 체력을 회복하고 나서 다음 오솔길을 다시 달빛 여우의 두 배의 속도로 달려가는 것을 반복한다. 달빛 여우와 달빛 늑대는 각자 가장 빠르게 달빛이 비치는 그루터기까지 다다를 수 있는 경로로 이동한다. 따라서 둘의 이동 경로가 서로 다를 수도 있다.</p>

<p>출제자는 관악산의 모든 동물을 사랑하지만, 이번에는 달빛 여우를 조금 더 사랑해 주기로 했다. 그래서 달빛 여우가 달빛 늑대보다 먼저 도착할 수 있는 그루터기에 달빛을 비춰 주려고 한다. 이런 그루터기가 몇 개나 있는지 알아보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 나무 그루터기의 개수와 오솔길의 개수를 의미하는 정수 <em>N</em>, <em>M</em>(2 ≤ <em>N</em> ≤ 4,000, 1 ≤ <em>M</em> ≤ 100,000)이 주어진다.</p>

<p>두 번째 줄부터 <em>M</em>개의 줄에 걸쳐 각 줄에 세 개의 정수 <em>a</em>, <em>b</em>, <em>d</em>(1 ≤ <em>a</em>, <em>b</em> ≤ <em>N</em>, <em>a</em>&nbsp;≠&nbsp;<em>b</em>, 1 ≤ <em>d</em> ≤ 100,000)가 주어진다. 이는 <em>a</em>번 그루터기와 <em>b</em>번 그루터기 사이에 길이가 <em>d</em>인 오솔길이 나 있음을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 줄에 달빛 여우가 달빛 늑대보다 먼저 도착할 수 있는 나무 그루터기의 개수를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>노트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="첫 번째 예제에 대한 그림" height="240" src="https://upload.acmicpc.net/485e04a2-aaba-4e2b-aa95-ae655e2e00ba/-/preview/" width="395"></p>

<p>5번 그루터기에 달빛을 비추면 달빛 여우가 달빛 늑대보다 먼저 도착할 수 있다. 4번 그루터기에 달빛을 비추면 달빛 여우와 달빛 늑대가 동시에 도착한다.</p>

				</div>
				</div>','5 6
1 2 3
1 3 2
2 3 2
2 4 4
3 5 4
4 5 3','1','SHORTEST_PATH'),
                                                                                                                (12376,'BAEKJOON','https://www.acmicpc.net/problem/16156',16156,'장애물 달리기','2.5초','256 MB',17,'<p>디디학교 <em>N</em>명의 학생들은 <em>N</em> x <em>M</em>크기의 격자판에서 진행되는 장애물 달리기를 하려고 한다. 각 학생 <em>i</em>(<em>i</em> = 1, 2, 3, ..., <em>N</em>)는 처음에 (<em>i</em>, 1)의 위치에 서 있으며, 결승선 <em>M</em>열 즉, (1, <em>M</em>), (2, <em>M</em>), (3, <em>M</em>), ..., (<em>N</em>, <em>M</em>)의 어느 위치에라도 도착하는 것이 목표이다. 학생들은 한 번 이동할 때 상하좌우로 인접한 곳으로 이동하며, 각 위치로 이동하는 데 걸리는 시간은 같거나 다르다. 또한 학생들은 항상 결승선까지 가장 빨리 도착할 수 있는 경로로 이동한다. 교장선생님 디디는 결승선의 각 지점에 도착하는 학생 수만큼 생수를 배치하려고 한다. 이때 (<em>i</em>, <em>M</em>)에 각각 몇 개의 생수를 배치해야 하는 지 구하는 프로그램을 작성하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 격자판의 크기를 나타내는 <em>N</em>,&nbsp;<em>M</em>(1 ≤&nbsp;<em>N</em>, <em>M</em> ≤&nbsp;500)이 공백으로 구분되어 주어진다.</p>

<p>둘째 줄부터&nbsp;<em>N</em>개의&nbsp;줄에는 각각&nbsp;<em>M</em>개의 정수가 공백으로 구분되어 주어진다. 입력의 <em>i</em>+<em>1</em>번째 줄의<em> j</em>번째 정수는 격자판에서&nbsp;(<em>i</em>, <em>j</em>)로 이동할 때 걸리는 시간을 의미하며, 이 값은 10<sup>4</sup>&nbsp;이하의 양의 정수이다. 단, <em>i</em>번째 학생이 이미 (<em>i</em>, <em>1</em>)에 위치해 있으므로&nbsp;시작 시 미리&nbsp;밟고 있는 땅은 이동할 때 걸리는 시간에 포함되지 않지만, 결승선으로 이동하는 시간은 포함된다. 또한 한 학생이 가장 빨리 도착할 수 있는 도착지점은 유일하게 주어짐이&nbsp;보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄부터 <em>N</em>개의 줄에&nbsp;각각 (<em>i</em>, <em>M</em>)의 위치에 몇 개의 생수를 배치해야 하는지 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>각 학생은&nbsp;아래와 같은 경로로 이동한다.</p>

<p>학생 1&nbsp;: (1, 1) -> (1, 2) -> (1, 3) ->&nbsp;(1, 4)</p>

<p>학생 2&nbsp;: (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) -> (3, 4)</p>

<p>학생 3&nbsp;: (3, 1) -> (3, 2) -> (3, 3) -> (3, 4)</p>

<p>학생 4&nbsp;: (4, 1) -> (4, 2) -> (4, 3) -> (3, 3) -> (3, 4)</p>

				</div>
				</div>','4 4
3 4 5 2
1 6 2 8
1 3 4 5
6 2 1 10
','1
0
3
0
','SHORTEST_PATH'),
                                                                                                                (12390,'BAEKJOON','https://www.acmicpc.net/problem/16211',16211,'백채원','2초','512 MB',14,'<p>대구과학고의 인기 아이돌 그룹 D.O.G.의 에이스이자(그의 <What is Love?> 댄스 영상을 찾아보아라.), 3천 명을 아득히 넘는 열혈 추종자를 보유한 슈퍼스타 <strong>백채원</strong>은 오늘 외박을 신청하고 집에 가려 한다. 하지만 <strong>백채원</strong>의 열혈 추종자 중 몇 명은 이 사실을 듣고 <strong>백채원</strong>을 만나러 가기로 한다.</p>

<p>편의상 우리나라에는 N개의 지점이 있고, 이 지점들 중 몇 쌍을 양방향으로 잇는 M개의 도로들로 모든 지점들이 직·간접적으로 연결되어 있다고 생각하자. 각 지점은 1번에서 N번까지로 번호가 붙어 있다. 각 도로의 길이는 다를 수도 있다. 대구과학고는 1번 지점에 있으며, 2번에서 N번까지의 모든 지점에 <strong>백채원</strong>의 집이 하나씩 있다. <strong>백채원</strong>은 1번 지점에 있는 대구과학고에서 <strong>백채원</strong>의 집들 중 하나로 이동하려 한다(몇 번 지점의 집으로 이동할지는 미리 생각해 두었다). 또한, <strong>백채원</strong>의 추종자 K명은 1번이 아닌 서로 다른 K개의 지점에 살고 있는데, 이들은 <strong>백채원</strong>이 대구과학고에서 출발하자마자 각자 전략을 새워서 <strong>백채원</strong>을 만나러 갈 것이다.</p>

<p>당신은, 추종자들이 어떠한 전략을 세워서 <strong>백채원</strong>을 찾으려 하더라도 절대 <strong>백채원</strong>이 추종자 중 누구에게도 붙잡히지 않고 이동할 수 있기 위해서는, <strong>백채원</strong>이 몇 번 지점에 있는 집으로 출발했어야 할지 궁금해졌다. 가능한 지점 번호를 모두 출력하는 프로그램을 작성해 보자.</p>

<p>단, <strong>백채원</strong>은 대구과학고가 있는 1번 지점에는 살지 않는다. 또한, 추종자들과 <strong>백채원</strong>은 항상 도로 위에서 등속력운동을 하며, 모두 같은 속력으로 이동한다고 가정한다. <strong>백채원</strong>이 집이 있는 지점에 도착하는 순간 추종자와 만나도, <strong>백채원</strong>은 추종자에게 붙잡힌 것으로 생각한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 우리나라에 있는 지점의 수 N과 도로의 수 M, <strong>백채원</strong>의 추종자의 수 K가 차례대로 주어진다. (1 ≤ N ≤ 200,000, 1 ≤ M ≤ 500,000, 1 ≤ K ≤ N-1)</p>

<p>둘째 줄부터 M개의 줄에 차례대로 M개의 각 도로가 잇는 지점의 번호 A, B와 이 도로를 통해 두 지점을 오가는 데에 걸리는 시간 T가 주어진다. (1 ≤ A, B ≤ N, 1 ≤ T ≤ 10,000, A ≠ B, 같은 도로가 두 번 주어지지 않는다.)</p>

<p>마지막 줄에는 <strong>백채원</strong>의 추종자들이 사는 지점의 번호를 나타내는 서로 다른 자연수 P<sub>1</sub>, …, P<sub>K</sub>가 공백을 사이에 두고 주어진다. (2 ≤ P<sub>i</sub> ≤ N)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p><strong>백채원</strong>의 집이 될 수 있는 지점의 번호들을 한 줄에 공백을 사이에 두고 <em>오름차순</em>으로 출력하라.</p>

<p>만약 그런 지점이 하나도 없다면, 대신 정수 <code>0</code>을 출력한다.</p>

<p><strong>백채원</strong>은 1번 지점에 집을 가지고 있지 않다는 점에 유의하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 8 2
1 2 2
1 3 3
1 5 3
1 6 4
2 3 2
3 4 4
3 5 1
4 5 4
2 4
','6
','SHORTEST_PATH'),
                                                                                                                (12395,'BAEKJOON','https://www.acmicpc.net/problem/16227',16227,'의약품 수송','1초(추가시간없음)','1024 MB',14,'<p>표면 대부분을 사막이 차지하는 미개척 행성에 두 탐사대가 파견되어 개척지를 세웠다. 이 사막은 매우 황량하여 모래 바람이 세차게 불기 때문에 탐사 차량으로 이동하기 위해선 포장된 도로만을 이용해야 하고 특수 장비를 이용해 중간중간 모래를 씻어주어야 한다. 그렇지 않으면 차량에 모래가 많이 묻어 주행 불능 상태에 빠지게 된다. 모래를 씻는 데에는 5분이 걸리고, 모래를 씻은 후에는 최대 100분간 씻지 않고 주행할 수 있다. 특수 장비는 사막 곳곳에 배치되어 있으며 그 개수는 총 N개이고 관리를 위해 1부터 N까지 차례대로 관리 번호가 붙어 있다. 포장 도로는 개척지 또는 특수 장비가 있는 위치 사이를 연결한다. 두 포장 도로가 양 끝점이 아닌 곳에서 만나는 일은 없다.</p>

<p><meta charset="utf-8"></p>

<p>탐사가 진행되는 도중 한 개척지에서 환자가 발생하여 다른 개척지로부터 의약품을 수송받으려 한다. 탐사 차량으로 의약품을 수송하는 데 걸리는 최소 시간을 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 특수 장비의 개수 N과 포장 도로의 개수 K가 공백으로 구분되어 입력된다. (0 ≤ N ≤ 1000; 1 ≤ K ≤ 3000)</p>

<p><meta charset="utf-8"></p>

<p>둘째 줄부터 K+1째 줄에는 각 줄마다 정수 u, v, t가 공백으로 구분되어 입력된다. (0 ≤ u, v ≤ N+1; 1 ≤ t ≤ 1000)</p>

<p>u와 v는 도로의 양 끝점으로, 특수 장비의 관리 번호를 의미한다. 단, 번호가 0이면 의약품을 보내는 개척지, N+1이면 받는 개척지이다. t는 u에서 v로 (또는 v에서 u로) 가는 데 걸리는 시간을 분 단위로 나타낸 것이다.</p>

<p>항상 두 개척지 사이를 차량으로 오갈 수 있는 경우만 주어진다. 출발 직전, 차량에 묻은 모래는 모두 씻은 상태이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>탐사 차량이 의약품을 수송하는 데 걸리는 최소 시간을 분 단위로 출력한다.</p>

<p><meta charset="utf-8"></p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1 3
0 1 40
1 2 80
0 2 110','125','SHORTEST_PATH'),
                                                                                                                (12416,'BAEKJOON','https://www.acmicpc.net/problem/16475',16475,'수학 미로','1초','512 MB',15,'<p>성일이는 성동구에서 미로탈출을 제일 잘하는 사람이다. 자신의 실력을 검증해보고 싶었던 성일이는, 세상의 모든 어려운 미로를 정복하기 위해 여행을 떠났다. 세계 각국의 어렵다 하는 미로를 손쉽게 정복하던 성일이는, 어느 날 난관에 부딪혔다. 이전과 다른 특징의 미로에 성일이는 혼란스러운 나머지 기절해버렸다. 미로의 특징은 다음과 같았다.</p>

<ol>
	<li>총 N개의 지역이 M개의 길로 이어져 있고, M개의 길은 통행할 수 있는 방향이 하나로 정해져 있다.</li>
	<li>각&nbsp;지역의 번호는 1~N 사이의 정수이다.</li>
	<li>N개의 지역 중 K개의 지역에는 스위치가 있다. 스위치가 있는 지역에 방문할 때에는 스위치를 무조건 눌러야 한다. 이 지역들을 함정 지역이라고 부른다. M개의 길 중 L개의 길은 스위치를 P번 누를 때마다 방향이 거꾸로 변한다. 이 길들을 함정 길이라고 부른다. 스위치를 누른 횟수가 P번이 되면 함정 길들의 방향은 거꾸로 변하고, 스위치를 누른 횟수는 0으로 변한다.&nbsp;</li>
</ol>

<p>잠시 후 깨어난 성일이는, 너무 어려운 미로여서 우리에게 약간의 힌트를 얻고자 한다. 그가 필요로 하는 힌트는 출발지점에서 도착지까지 도달할 수 있는 가장 짧은 거리다. 성일이가 미로를 시작하는 출발점이 S, 도착점이 E라 할 때, 성일이가 미로를 탈출할 수 있도록&nbsp;성일이가 원하는 힌트의 답을 알려주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 N, M, K, L, P, 값이 차례로 주어진다. (1 ≤ N, M ≤ 10,000, 0 ≤ K&nbsp;≤ N, 0 ≤ L&nbsp;≤ M, 1 ≤ P&nbsp;≤ 10)</p>

<p>두 번째 줄에, K개의 함정지역의 번호가 주어진다.</p>

<p>세 번째 줄부터, M-L줄에 걸쳐, 일반 길의 정보가 A, B, C 값으로 주어진다. 이후 L줄에 걸쳐서, 함정 길의 정보가 A,B,C 값으로 주어진다. 이때 A지역에서 B지역으로 이어진 일방통행길 의 거리가 C이다.&nbsp;(0 < C&nbsp;≤ 10,000)</p>

<p>마지막 줄에는 출발지 번호 S와 도착지 번호 E가 주어진다. 출발지점은 함정지역이 아니다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>출발 지점에서 도착 지점으로 가는 최단경로를 출력한다.</p>

<p>경로가 없을 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/ee89d34e-efd2-4eb3-bb0b-34808ad576a5/-/preview/"></p>

<p>그림 같은 경우, 1-2-5-4-3 으로 가는 경우, 7이 걸리지만, 1-2-1-2-1-6-3 으로 가는 경우 6이 걸린다.&nbsp;</p>

				</div>
				</div>','6 9 1 1 2
2
1 2 1
2 1 1
1 6 1
1 5 5
2 5 2
5 3 6
5 4 2
4 3 2
3 6 1
1 3
','6
','SHORTEST_PATH'),
                                                                                                                (12441,'BAEKJOON','https://www.acmicpc.net/problem/16681',16681,'등산','1초','256 MB',14,'<p>주환이는 요즘 등산에 빠졌다. 주환이는 등산을 위해 지도를 가지고 있는데, 그 지도에는 각 지점의 높이와 갈 수 있는 다른 지점까지의 거리가 표시되어 있다.</p>

<p>주환이는 아침에 집에서 출발하여 등산을 갔다가, 오후 수업을 듣기 위해 고려대학교로 돌아와야 한다.</p>

<ol type="A">
	<li>주환이는 지도의 임의의 지점을 골라, 그 지점을 목표로 정한다. 집 또는 고려대학교는 목표로 선택할 수 없다.</li>
	<li>주환이가 집에서 정한 목표에 도달할 때 까지는 항상 높이가 증가하는 방향으로만 이동해야 한다.</li>
	<li>주환이가 정한 목표에 도달한 후, 고려대학교로 갈 때에는 항상 높이가 감소하는 방향으로만 이동해야 한다.</li>
	<li>주환이는 거리 1을 움직일 때 마다 <em>D&nbsp;</em>의 체력이 소모된다.</li>
	<li>주환이는 정한 목표에 도달하면 높이 1당 <em>E</em> 의 성취감을 얻는다. 즉 높이가 <em>h</em>인 목표에 도달하면 <em>hE</em>의 성취감을 얻는다.</li>
</ol>

<p>주환이는 이 등산의 가치를 (얻은 성취감) - (소모한 체력) 으로 계산하기로 하였다. 주환이를 위해 가치가 가장 높은 등산 경로를 선택해주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 지도에 표시된 지점의 개수, 지점을 잇는 경로의 개수, 주환이의 거리 비례 체력 소모량, 높이 비례 성취감 획득량을 나타내는 정수 <em>N</em>, <em>M</em>, <em>D</em>, <em>E</em>가 공백을 사이에 두고 주어진다. (2 ≤&nbsp;<em>N</em> ≤ 100,000, 1 ≤ <em>M</em> ≤ 200,000, 1&nbsp;≤ <em>D</em> ≤ 100, 1 ≤&nbsp; <em>E </em>≤ 100)</p>

<p>두 번째 줄에 <em>N</em>개의 정수 <em>h<sub>1</sub>, ...&nbsp; ,h<sub>N</sub></em>이 공백으로 구분되어 주어진다.&nbsp;<em>h<sub>i</sub></em>는 <em>i </em>번째 지점의 높이를 의미한다. (1 ≤ <em>h<sub>i</sub></em> ≤ 1,000,000, 1 ≤ <em>i </em>≤ <em>N</em>)</p>

<p>세 번째 줄부터 <em>M</em>개의 줄에 걸쳐 세 정수 <em>a, b, n</em>이 공백으로 구분되어 주어진다. 이는 <em>a</em>번 지점과 <em>b</em>번 지점을 잇는 거리 <em>n</em>의 양방향 경로가 있음을 의미한다. (1 ≤ <em>a, b</em> ≤&nbsp;<em>N</em>, 1 ≤&nbsp;<em>n</em> ≤ 100,000)</p>

<p>어떤 지점에서 다른 지점으로 가는 경로가 여러 개 있을 수도 있으며 (등산로는 여러 개가 있을 수 있다), 한 지점에서 출발해 그 지점으로 돌아가는 경로가 있을 수도 있다 (쉼터에서 몇 바퀴 돌며 쉴 수도 있다).</p>

<p>주환이의 집은 1번 지점에 위치하고, 고려대학교는 <em>N</em>번 지점에 위치하며 주환이의 집과 고려대학교의 높이는 1임이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 주환이가 얻을 수 있는 가치의 최댓값을 출력한다. 만약 조건을 만족하는 등산 경로를 선택할 수 없다면, "<code>Impossible</code>"을 쌍따옴표를 제외하고 출력한다. 답이 음수일 수 있음에 유의하여라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 13 4 9
1 4 7 3 10 2 15 1
1 2 3
3 4 2
5 6 6
7 8 2
2 3 4
6 7 2
3 6 1
4 8 3
5 1 6
8 3 5
2 5 4
4 6 3
5 3 8','15','SHORTEST_PATH'),
                                                                                                                (12465,'BAEKJOON','https://www.acmicpc.net/problem/16952',16952,'체스판 여행 2','2초','512 MB',17,'<p>크기가 N×N인 체스판이 있고, 체스판의 각 칸에는 1부터 N<sup>2</sup>까지의 정수가 한 번씩 적혀있다. 지학이는 이 체스판을 이용해서 재미있는 게임을 해보려고 한다.</p>

<p>지학이가 가지고 있는 말은 나이트, 비숍, 룩이다. 가장 먼저 1이 적혀있는 칸에 말 하나를 놓는다. 그 다음, 1, 2, ..., N<sup>2</sup>&nbsp;순서로 이동시키려고 한다.</p>

<p>먼저, 1에 나이트, 비숍, 룩 중 하나를 놓는다. 그 다음, 말을 이동시켜서 2가 적힌 칸으로 이동시킨다. 1에서 2로 이동시킬 때, 다른 수가 적힌 칸을 방문할 수도 있다. 그 다음에는 3이 적힌 칸으로 이동시키고, ..., N<sup>2</sup>이 적힌 칸으로 이동시킨다. 같은 칸을 여러 번 방문하는 것도 가능하다.</p>

<p>지학이가 1초 동안 할 수 있는 행동은 체스판 위에 놓인 말을 이동시키거나, 다른 말로 바꾸는 것이다.</p>

<p>1에서 출발해서, 2, 3, ..., N<sup>2</sup>-1을 방문하고, N<sup>2</sup>까지 도착하는데 걸리는 시간의 최솟값을 구해보자. 최소 시간이 나오는 방법이 여러가지인 경우에는 말을 바꾸는 횟수를 최소로 하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 체스판의 크기 N(3 ≤ N ≤ 10)이 주어진다.</p>

<p>둘째 줄부터 N개의 줄에 체스판에 적힌 수가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 문제에 주어진 대로 방문하는데 필요한 시간의 최솟값과 말을 교체한 횟수를 출력한다.&nbsp;</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
1 9 3
8 6 7
4 2 5
','12 1
','SHORTEST_PATH'),
                                                                                                                (9945,'BAEKJOON','https://www.acmicpc.net/problem/16958',16958,'텔레포트','2초','512 MB',12,'<p>2차원 평면 위에 N개의 도시가 있다. 일부 도시는 특별한 도시이다. (r<sub>1</sub>, c<sub>1</sub>)에 있는 도시에서 (r<sub>2</sub>, c<sub>2</sub>)에 있는 도시로 가는 이동 시간은 |r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|와 같다. 만약, 두 도시가 특별한 도시라면, 텔레포트를 이용해서 이동할 수도 있다. 텔레포트에 걸리는 시간은 T이다.</p>

<p>두 도시의 쌍 M개가 주어졌을 때, 최소 이동 시간을 구해보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 N, 텔레포트하는데 걸리는 시간 T가 주어진다.</p>

<p>둘째 줄부터 N개의 줄에 도시의 정보를 의미하는 세 정수 s, x, y가 1번 도시부터 N번 도시까지 순서대로 주어진다. s가 1인 경우에는 특별한 도시라는 의미이고, 0인 경우는 특별한 도시가 아니라는 의미이다. (x, y)는 도시의 좌표이다.</p>

<p>다음 줄에는 M이 주어지고, 다음 M개의 줄에는 두 도시 A와 B가 주어진다.&nbsp;</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>총 M개의 줄에 걸쳐서 A에서 B에 가는 최소 이동 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 3
0 1 2
0 5 1
1 3 3
1 1 5
0 3 5
1 7 5
5
1 2
1 5
1 6
3 4
4 2
','5
5
6
3
7
','SHORTEST_PATH'),
                                                                                                                (12487,'BAEKJOON','https://www.acmicpc.net/problem/17182',17182,'우주 탐사선','1초','512 MB',13,'<p>우주 탐사선 ana호는 어떤 행성계를 탐사하기 위해 발사된다. 모든 행성을 탐사하는데 걸리는 최소 시간을 계산하려 한다. 입력으로는 ana호가 탐색할 행성의 개수와 ana호가 발사되는 행성의 위치와 ana호가 행성 간 이동을 하는데 걸리는 시간이 2차원 행렬로 주어진다. 행성의 위치는 0부터 시작하여 0은&nbsp;행렬에서 0번째 인덱스에 해당하는 행성을 의미한다.&nbsp;2차원 행렬에서 i, j 번 요소는 i 번째 행성에서 j 번째 행성에 도달하는데 걸리는 시간을 나타낸다. i와 j가 같을 때는 항상 0이 주어진다.&nbsp;모든 행성을 탐사하는데 걸리는 최소 시간을 계산하여라.</p>

<p>탐사 후 다시 시작 행성으로 돌아올 필요는 없으며 이미 방문한 행성도 중복해서 갈 수 있다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 행성의 개수 <em>N</em>과 ana호가 발사되는 행성의 위치 <em>K</em>가 주어진다.&nbsp;(2 ≤&nbsp;<em>N</em>&nbsp;≤ 10, 0 ≤&nbsp;<em>K</em>&nbsp;<&nbsp;<em>N</em>)</p>

<p>다음&nbsp;<em>N&nbsp;</em>줄에 걸쳐 각 행성 간 이동 시간&nbsp;<em>T<sub>ij</sub></em>&nbsp;가&nbsp;<i>N&nbsp;</i>개 씩 띄어쓰기로 구분되어 주어진다.&nbsp;(0 ≤&nbsp;<em>T<sub>ij</sub></em>&nbsp;&nbsp;≤ 1000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>모든 행성을 탐사하기 위한 최소 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 0
0 30 1
1 0 29
28 1 0
','2
','SHORTEST_PATH'),
                                                                                                                (12500,'BAEKJOON','https://www.acmicpc.net/problem/17270',17270,'연예인은 힘들어','1초','256 MB',13,'<p>연예인 김영광을 너무 닮아서 길거리에서 매번 사진이 찍히는 지헌이는 사람들에게 노출되는 것을 매우 꺼려한다. 하지만 친구인 성하와 약속을 하면 성하는 매번 늦기 때문에 길거리에 나온 지헌이는 매번 성하를 기다린다. 약속 장소에서 성하에게 전화를 하면 매번 “가는 중” 이라는 대답만 듣고 기다리는 동안 길거리에서 사람들에게 사진을 찍히는 지헌이는 스트레스를 심하게 받고 있다. 참지 못한 지헌이는 성하의 핸드폰을 해킹하여서 항상 어디 있는지 알 수 있게 되었다.</p>

<p>스트레스가 심해진 지헌이는 성하와의 약속 장소를 바꾸려고 한다. 그 위치는 다음과 같은 조건을 만족해야 한다.&nbsp;장소의 번호는 1부터 차례대로 붙어 있다.</p>

<ol>
	<li>지헌이의 출발 위치와 성하의 출발 위치는 새로운 약속 장소가 될 수 없다.</li>
	<li>성품도 훌륭한 지헌이는 새로운 약속 장소는&nbsp;지헌이가 걸리는 최단 시간과 성하가 걸리는 최단 시간의 합이 최소가 되도록 하고 싶다.</li>
	<li>지헌이가 더 늦게 도착하면 성하에게 안좋은 소리를 들을 것이 뻔하기에, 1번과 2번 조건을 만족하는 장소 중에서도 지헌이가 성하보다 늦게 도착하는 곳은 약속 장소가 될 수 없다.</li>
	<li>위의 세 조건을 모두 만족하는 약속 장소가 여러 곳이 있다면, 그 중에 지헌이로부터 가장 가까운 곳이 최종 약속 장소가 된다. 그런 장소도 여러 곳이 있다면, 그 중에 번호가 가장 작은 장소가 최종 약속 장소가 된다.</li>
</ol>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/fe6c7237-d6f3-417c-9eeb-a368228bc999/-/preview/" style="height: 210px; width: 347.5px;"><br>
&nbsp;</p>

<p>위와 같은 상황이 있다고 했을 때 새로 바꿀 약속 장소를 찾아보자.</p>

<ul>
	<li>(조건 1) 3번과 6번은 지헌이와 성하의 출발지이기 때문에 새로운 약속 장소 후보에서 제외된다.</li>
	<li>(조건 2) 위 상황에서 성하와 지헌의 최단 거리의 합의 최소는 6분이다. 이 때, 조건을 만족하는 약속 장소는 1번, 2번, 5번, 7번이다.</li>
	<li>(조건 3) 5번은 성하가 먼저 도착하여서 기달리고 있기 때문에 지헌이는 꾸중을 들을 위험이 있다. 그래서 5번은 약속 장소 후보에서 제외된다.</li>
	<li>(조건 4) 2번 위치는 성하와 지헌이가 동시에 도착, 7번은 지헌이는 2분 걸려서 도착하고 성하는 4분 걸려서 도착한다. 1번은 지헌이는 1분, 성하는 5분 걸려서 도착한다. 따라서, 지헌이가 원하는 이상적인 약속 장소는 1번이 된다.</li>
</ul>

<p>연예인을 닮아서 고통받는 지헌이를 위해 새로운 약속장소를 찾아주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 약속 장소 후보의 수 <em>V</em>와&nbsp;약속 장소를 연결하는 총 길의 수 <em>M</em>이 주어진다. (2 ≤ <em>V</em> ≤ 100,&nbsp;1 ≤ <em>M</em> ≤ 1,000)</p>

<p>그리고 다음 <em>M</em>개의 각 줄에는 <em>a, b, c</em> 가 주어진다.&nbsp;<em>a, b</em>는 길의 시작과 끝이며 <em>c</em>는 그 길을 지나가는 데 걸리는 시간을 나타낸다.</p>

<p>(1 ≤ a, b ≤ V,&nbsp;<em>c</em>는 10,000이하의 자연수, 길은 양방향이다)</p>

<p>그리고 그 다음 줄에는 지헌이의 위치 <em>J&nbsp;</em>와 성하의 위치 <em>S&nbsp;</em>가 주어진다. (<em>1 ≤&nbsp;J, S ≤&nbsp;V</em>)</p>

<p>지현이와 성하가 항상 만날 수 있는 입력만 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>연예인을 닮아서 고통받는 지헌이를 위한 이상적인 약속 장소의 위치를 출력한다.&nbsp;만약 조건을 만족하는 약속 장소가 없다면 -1을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 10
1 2 2
2 6 3
2 7 2
1 3 1
3 7 2
4 7 5
5 6 2
5 7 2
7 8 2
5 8 2
3 6
','1
','SHORTEST_PATH'),
                                                                                                                (12509,'BAEKJOON','https://www.acmicpc.net/problem/17396',17396,'백도어','2초','512 MB',11,'<p>유섭이는 무척이나 게으르다. 오늘도 할 일을 모두 미뤄둔 채 열심히 롤을 하던 유섭이는 오늘까지 문제를 내야 한다는 사실을 깨달았다. 그러나 게임은 시작되었고 지는 걸 무척이나 싫어하는 유섭이는 어쩔 수 없이 백도어를 해 게임을 최대한 빠르게 끝내기로 결심하였다.</p>

<p>최대한 빨리 게임을 끝내고 문제를 출제해야 하기 때문에 유섭이는 최대한 빨리 넥서스가 있는 곳으로 달려가려고 한다. 유섭이의 챔피언은 총 <em>N</em>개의 분기점에 위치할 수 있다. 0번째 분기점은 현재 유섭이의 챔피언이 있는 곳을, <em>N</em>-1 번째 분기점은 상대편 넥서스를 의미하며 나머지 1, 2, ..., <em>N</em>-2번째 분기점은 중간 거점들이다. 그러나 유섭이의 챔피언이 모든 분기점을 지나칠 수 있는 것은 아니다. 백도어의 핵심은 안 들키고 살금살금 가는 것이기 때문에 적 챔피언 혹은 적 와드(시야를 밝혀주는 토템), 미니언, 포탑 등 상대의 시야에 걸리는 곳은 지나칠 수 없다.</p>

<p>입력으로 각 분기점을 지나칠 수 있는지에 대한 여부와 각 분기점에서 다른 분기점으로 가는데 걸리는 시간이 주어졌을 때, 유섭이가 현재 위치에서 넥서스까지 갈 수 있는 최소 시간을 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 분기점의 수와 분기점들을 잇는 길의 수를 의미하는 두 자연수 <em>N</em>과 M이 공백으로 구분되어 주어진다.(1 ≤ <em>N</em> ≤ 100,000, 1 ≤ <em>M</em> ≤ 300,000)</p>

<p>두 번째 줄에 각 분기점이 적의 시야에 보이는지를 의미하는 <em>N</em>개의 정수 <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ..., <em>a<sub>N</sub></em><sub>-1</sub>가 공백으로 구분되어 주어진다. <em>a<sub>i</sub></em>가 0이면 <em>i </em>번째 분기점이 상대의 시야에 보이지 않는다는 뜻이며, 1이면 보인다는 뜻이다. 추가적으로 <em>a</em><sub>0</sub> = 0, <em>a<sub>N</sub></em><sub>-1</sub> = 1이다., <em>N</em>-1번째 분기점은 상대 넥서스이기 때문에 어쩔 수 없이 상대의 시야에 보이게 되며, 또 유일하게 상대 시야에 보이면서 갈 수 있는 곳이다.</p>

<p>다음 <em>M</em>개의 줄에 걸쳐 세 정수 <em>a</em>, <em>b</em>, <em>t</em>가 공백으로 구분되어 주어진다. (0 ≤ <em>a</em>, <em>b</em> <em>< N</em>, <em>a</em> ≠ <em>b</em>, 1 ≤ <em>t</em> ≤ 100,000) 이는 <em>a</em>번째 분기점과&nbsp;<em>b</em>번째 분기점 사이를 지나는데 <em>t</em>만큼의 시간이 걸리는 것을 의미한다. 연결은 양방향이며, 한 분기점에서 다른 분기점으로 가는 간선은 최대 1개 존재한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 유섭이의 챔피언이 상대 넥서스까지 안 들키고 가는데 걸리는 최소 시간을 출력한다. 만약 상대 넥서스까지 갈 수 없으면 <code>-1</code>을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 7
0 0 0 1 1
0 1 7
0 2 2
1 2 4
1 3 3
1 4 6
2 3 2
3 4 1
','12
','SHORTEST_PATH'),
                                                                                                                (12545,'BAEKJOON','https://www.acmicpc.net/problem/17781',17781,'수열과 쿼리 32','10초','512 MB',25,'<p>길이가 N인 수열 A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>이 주어진다.&nbsp;이때, 다음 쿼리를 수행하는 프로그램을 작성하시오.&nbsp;</p>

<ul>
	<li><code>1 x&nbsp;v</code>:&nbsp;A<sub>x</sub>를 v로 바꾼다.</li>
	<li><code>2 k b<sub>1</sub> ... b<sub>k</sub></code>: 수열 A를 다음 조건을 만족하는 구간으로 나눌 수 있으면 "TAK", 아니면 "NIE"를 출력한다.
	<ul>
		<li>각각의&nbsp;수는 하나의 구간에 포함되어 있어야 한다.</li>
		<li>구간은 겹칠 수 없다.</li>
		<li>각 구간에 들어있는 모든 수를 xor한 결과는 b<sub>1</sub>, ..., b<sub>k</sub> 중 하나와 같아야&nbsp;한다.</li>
	</ul>
	</li>
</ul>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 수열의 크기 N이 주어진다. (1 ≤ N ≤ 100,000)</p>

<p>둘째 줄에는 A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>이 주어진다. (0&nbsp;≤ A<sub>i</sub>&nbsp;<&nbsp;2<sup>20</sup>)</p>

<p>셋째 줄에는 쿼리의 개수 M이 주어진다. (1 ≤ M)</p>

<p>넷째 줄부터 M개의 줄에는 쿼리가 한 줄에 하나씩 주어진다. (1 ≤ x ≤ N, 0 ≤ v, b<sub>i</sub> <&nbsp;2<sup>20</sup>, 1 ≤ k ≤ 5)</p>

<p>1번 쿼리의 개수는 400,000개를 넘지 않으며, 2번 쿼리에서 주어진 k의 합은&nbsp;100,000개를 넘지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>2번 쿼리의 결과를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5
1 2 0 3 0
10
2 1 3
2 1 0
1 3 5
2 2 6 3
1 1 8
1 2 5
1 3 3
1 4 1
1 5 1
2 3 2 4 8
','TAK
TAK
TAK
NIE
','SHORTEST_PATH'),
                                                                                                                (12566,'BAEKJOON','https://www.acmicpc.net/problem/17833',17833,'홍익대학교 지하캠퍼스','1초','256 MB',16,'<p>홍익대학교 서울 캠퍼스의 건물들은 정문부터 후문까지 연결되어 있지만 건물마다 연결되어 있는 층이&nbsp;제각각이다. 예를 들어 정문인&nbsp;<em>R</em>동의 3층으로 나오면 <em>K</em>동의 1층이 있고, <em>L</em>동의 8층으로 나오면 <em>I</em>동의 1층이 있기도 하다.&nbsp;이렇듯 캠퍼스가 작지만 복잡하게 연결되어 있어 학생들 사이에선 홍그와트라는 별명으로 불리고 있다.</p>

<p>건축공학과 학생인 기열이는 이러한 특징이 잘 드러나도록 정문부터 후문까지 연결된 홍익대학교의 지하 캠퍼스를 설계하여 과제로 제출해야 한다. 하지만 기열이는 자기 손으로 과제를 끝내기에 턱없이 시간이 모자란다고 생각하고 포기하기 직전에 놓여있다. 절망에 빠진&nbsp;기열이를 위해 희망을 주도록 하자.</p>

<p>기열이를 위해&nbsp;유명한 건물 모델 사이트에서 M개의 모델을 가져왔다. 해당 모델들은 바로&nbsp;3D프린터로 출력할 수 있으며, 이 모델들을&nbsp;이어 붙이기만 하면 과제를 완성할 수 있도록 되어있다. 또한 모든 모델은&nbsp;좌우로 뒤집어 사용할 수 있도록 만들어졌다. (단 위아래가 바뀌도록 뒤집을 수는 없다.)</p>

<ul>
	<li>&nbsp;과제에 주어진 규격&nbsp;때문에 지하 1층부터 지하 <em>N</em>층까지밖에 건물을 배치할&nbsp;수 없다.</li>
	<li>&nbsp;모든&nbsp;건물은 양 옆면에 출입구가 한 개 씩 있으며 다른 건물과 연결될 때 그림과 같이 출입구끼리 연결되어야한다.</li>
	<li>&nbsp;각 모델에는 건물의 층 수&nbsp;<em>H<sub>i</sub></em>, 출입구가 위치한 층인 <em>E<span style="font-size: 10.8333px;">i1</span></em>, <em>E<span style="font-size: 10.8333px;">i2</span></em>가 정해져 있다. 또한 해당 모델을 3D프린터로 출력하는&nbsp;시간 <em>T<sub>i</sub></em> 또한 주어진다.</li>
	<li>&nbsp;같은 모델을 여러 번 사용하는 것도 가능하지만, 모델을 사용할 때마다 동일한&nbsp;시간이 든다.</li>
	<li>&nbsp;정문의 <em>R</em>층과 후문의<em> D</em>층에는 지하 캠퍼스와 연결되는 출입구가 존재한다.&nbsp;이를 각각 시작점과 끝점으로 하여 홍익대학교 지하캠퍼스를 설계한다</li>
</ul>

<p>샘플의 높이를 맘대로 바꿀 수는 없지만 너비를 바꾸는 것은 매우 쉬운 일이기 때문에 건물을 몇 개나 사용하는지는 중요하지 않다고 할 때, 캠퍼스를 설계할 때 드는 최소 시간을 구해서 기열이에게 알려주자.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/9b4a24d5-c2e4-4374-891a-bdeec9a7d075/-/preview/" width="500dp" style="width: 347.5px; height: 212.5px;"></p>

<p>위와 같이 3개의 모델이 주어진다고 했을 때, 각각 <em>H</em>, <em>T</em>, <em>E<sub>1</sub></em>, <em>E<sub>2</sub></em>값은 각각 모델 아래 박스 안의 값과 같다.</p>

<p><em>N</em>=9, <em>R</em>=3, <em>D</em>=2 라고 할 때, 위&nbsp;세 모델로 캠퍼스를 설계한다면 시간을 최소로 하는 설계 방법은 아래 그림과 같다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/44983b28-7803-419b-8e06-8582338af549/-/preview/" width="500dp" style="width: 347.5px; height: 129.167px;"></p>

<p>이 때 걸리는 시간은 38이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 째 줄에는 건물을 배치할 수 있는 지하 층 수에 해당하는 자연수&nbsp;<em>N</em>이 주어진다. ( N은&nbsp;2&nbsp;≤ <em>N</em> ≤ 2,000 이다.&nbsp;)</p>

<p>둘 째 줄에는 각각 정문과 후문에 출입구가 위치한 층 <em>R</em>과 <em>D</em>가 공백을 사이에 두고 주어진다.&nbsp;(&nbsp;R과 D는 각각 1&nbsp;≤ <i>R</i>&nbsp;≤ <em>N, 1</em>&nbsp;≤ <i>D</i>&nbsp;≤ <em>N</em>&nbsp;인 자연수다. )</p>

<p>셋 째 줄에는 샘플의 개수 <em>M</em>이 주어진다. ( M은 1&nbsp;≤ <em>M&nbsp;</em>≤ 2,000 인 자연수다. )</p>

<p>넷 째 줄부터 <em>M+3</em>번째 줄까지 각 줄에는 샘플의 꼭대기 층 <em>H<sub>i</sub></em>, 수정하는데 걸리는 시간 <em>T<sub>i</sub></em>, 출입구가 있는 층 <em>E<sub>i1</sub></em>, <em>E<sub>i2</sub></em>가 각각 공백을 사이에 두고 주어진다.</p>

<p>( 이 때 위의 입력은 각각&nbsp;2&nbsp;≤&nbsp;<em>H<sub>i </sub></em>≤ <em>N<sub>, </sub></em>1 ≤<em>T<sub>i </sub></em>≤ 1,000,000<em><sub>,&nbsp;</sub></em>1 ≤&nbsp;<em>E<sub>i1 </sub></em>≤&nbsp;<em>H<sub>i , </sub></em>1 ≤&nbsp;<em>E<sub>i2&nbsp;</sub></em>≤&nbsp;<em>H<sub>i&nbsp;&nbsp;</sub></em>를 만족하는 자연수이다. 단,&nbsp;<em>E<sub>i1&nbsp;</sub></em>≠ <em>E<sub>i2</sub></em> 이다. )</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 째 줄에 과제를 끝마치기 위해 필요한 최소 시간을 출력하라.</p>

<p>단, 주어진 모델로 캠퍼스를 설계할 수 없다면 첫 째 줄에 -1을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','9
3 2
3
8 10 7 2
8 20 4 3
5 14 1 3
','34
','SHORTEST_PATH'),
                                                                                                                (12565,'BAEKJOON','https://www.acmicpc.net/problem/17835',17835,'면접보는 승범이네','1초','256 MB',14,'<p>마포구에는 모든 대학생이 입사를 희망하는 굴지의 대기업 <strong>㈜승범이네</strong>&nbsp;본사가 자리를 잡고 있다. 승범이는 <strong>㈜승범이네</strong>의 사장인데, 일을 못 하는 직원들에게 화가 난 나머지 전 직원을 해고하고 신입사원을 뽑으려 한다. 1차 서류전형이 끝난 뒤 합격자들은 면접을 준비하게 되었다.</p>

<p>면접자들은 서로 다른 <em>N</em>개의 도시에 거주한다. 승범이는 면접자들의 편의를 위해 거주 중인 <em>N</em>개 도시 중 <em>K</em>개의 도시에 면접장을 배치했다. 도시끼리는 단방향 도로로 연결되며, 거리는 서로 다를 수 있다. 어떤 두 도시 사이에는 도로가 없을 수도, 여러 개가 있을 수도 있다. 또한 어떤 도시에서든 적어도 하나의 면접장까지 갈 수 있는 경로가 항상 존재한다.</p>

<p>모든 면접자는 본인의 도시에서 출발하여&nbsp;가장 가까운&nbsp;면접장으로 찾아갈 예정이다. 즉, 아래에서 언급되는 <strong>면접장까지의 거리</strong>란 그 도시에서 도달 가능한 가장 가까운 면접장까지의 최단 거리를 뜻한다.</p>

<p>속초 출신 승범이는 지방의 서러움을 알기에 각 도시에서 면접장까지의 거리 중, 그 거리가 가장 먼 도시에서 오는 면접자에게 교통비를 주려고 한다.</p>

<p>승범이를 위해 면접장까지의 거리가 가장 먼 도시와 그 거리를 구해보도록 하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 수 <em>N</em>(2 ≤<em> N</em> ≤ 100,000), 도로의 수 <em>M</em>(1 ≤ <em>M</em> ≤ 500,000), 면접장의 수<em> K</em>(1 ≤ <em>K</em> ≤<em> N</em>)가 공백을 두고 주어진다. 도시는 1번부터 <em>N</em>번까지의 고유한 번호가 매겨진다.</p>

<p>다음 <em>M</em>개의 줄에 걸쳐 한 줄마다 도시의 번호 <em>U</em>, <em>V</em>(<em>U</em> ≠ <em>V</em>)와&nbsp;도로의 길이 <em>C</em>(1 ≤ <em>C</em> ≤ 100,000)가 공백을 두고 순서대로 주어진다. 이는 도시 <em>U</em>에서 <em>V</em>로 갈 수 있는 도로가 존재하고, 그 거리가 <em>C</em>라는 뜻이다.</p>

<p>마지막 줄에 면접장이 배치된 도시의 번호 <em>K</em>개가 공백을 두고 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 면접장까지 거리가 가장 먼 도시의 번호를 출력한다. 만약 그런 도시가 여러 곳이면 가장 작은 번호를 출력한다.</p>

<p>둘째 줄에 해당 도시에서 면접장까지의 거리를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 10 2
2 6 2
1 4 1
6 1 5
2 5 1
5 1 4
4 5 6
6 2 3
3 5 1
3 1 1
5 2 2
1 2
','4
8
','SHORTEST_PATH'),
                                                                                                                (12583,'BAEKJOON','https://www.acmicpc.net/problem/17940',17940,'지하철','1초','256 MB',14,'<p>대학원생인 형욱이는 연구실에 출근할 때 주로 지하철을 이용한다. 지하철은 A와 B, 두 개의 회사에서 운영하고 있다. 두 회사는 경쟁사 관계로 사람들이 상대 회사의 지하철을 이용하는 것을 매우 싫어한다. 그래서 A와 B는 모두 상대 회사의 지하철로 환승할 때 마다 비싼 요금을 받고 있다.&nbsp;</p>

<p>형욱이는 가난한 대학원생이기 때문에 돈을 아끼는 것이 가장 중요하다. 형욱이에게 최적의 출근경로를 찾아주자. 최적의 출근 경로란 환승 횟수를 최소로 하는 경로 중 소요시간이 가장 짧은 경로이다. 여기에서의 환승은 이동하면서 지하철역을 운영하는 회사가 바뀔 때 마다 환승 1회로 계산한다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/1709d1f1-6a5e-4e5a-a662-734f14d3af38/-/preview/" style="height: 200px; width: 250px;"></p>

<p>위의 그림에서 원은 지하철역을 의미하고 선들은 지하철역들이 연결되어 있는 지를 나타낸다. 흰색으로 표시된 지하철역은 A회사가 운영하는 지하철역이고 검은색으로 표시된 역은 B회사가 운영하는 지하철역이다. 이 때 붉게 표시된&nbsp;경로로 이동하는 것이 환승 2회로 가장 적게 환승하면서 시간이 가장 짧은 경로이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 지하철역의 수 N과 도착지의 번호 M이 공백을 사이에 두고 정수로 주어진다. 지하철역은 순서대로 0 부터 N-1까지 존재하며 출발지는 항상 0 이다. (2 ≤ N ≤ 1000, 0 < M < 1000)</p>

<p>그 다음 N 줄에 걸쳐 각각의 지하철역을 운영하는 회사의 정보 C<sub>i</sub>(0 ≤ &nbsp;i < N)가 0 또는 1로 주어진다. 0은 A회사를 뜻하고 1은 B회사를 뜻한다.</p>

<p>그 다음 N 줄은 지하철역간의 연결 상태 E<sub>ij</sub>(0 ≤ E<sub>ij</sub>&nbsp;≤ 1000)가 정수로 주어진다. &nbsp;E<sub>ij</sub>가 0인 경우 i번째 역과 j번째 역이 연결되어 있지 않음을 의미하고 0보다 클 경우 두 역이 연결되어 있으며 이동시간이 E<sub>ij</sub>라는 것을 의미한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>최적의 경로를 이용할 때 환승 횟수와 총 소요 시간을 공백으로 구분하여 출력한다.</p>

<p>또한 출발지와 도착지는 무조건 연결되어 있음이 보장된다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 3
0
1
1
0
1
0
0 3 1 0 10 0
3 0 0 15 0 0
1 0 0 0 0 1
0 15 0 0 10 0
10 0 0 10 0 1
0 0 1 0 1 0
','2 18
','SHORTEST_PATH'),
                                                                                                                (12554,'BAEKJOON','https://www.acmicpc.net/problem/18128',18128,'치삼이의 징검다리 건너기','1초','1024 MB',15,'<p>치삼이는 가로로&nbsp;<em>N</em>, 세로로&nbsp;<em>N</em>만큼의 정사각형 모양 계곡을 지나가려고 한다. 하지만 엄청난 더위로 인해 물이 모두 말라버렸다!</p>

<p>계곡은 땅과 돌로 이루어져 있다.&nbsp;전체&nbsp;땅은&nbsp;1×1크기의 땅들로 이루어져있고 땅에 돌이 존재할 수 있다. 그런데 계곡의 땅과 돌이 너무 뜨거워서 지나갈 수가 없다. 하지만 돌이 있는 부분은 물이 차오르면 식어서 지나갈 수 있게 된다. 다행히 마음씨 좋은 학생들이 치삼이를 위해 땅을 파서 물이 생성되는 곳을 만들어냈고 치삼이는 돌을 밟고 계곡을 지나가기로 했다. 물 생성지에는 땅이나 돌 모두 존재할 수 있다. 물은 물이 존재하는 위치에서 하루에 한 번 물과 인접한 곳으로 퍼진다. 이때, 대각선은 인접해 있다고 보지 않는다.</p>

<p>치삼이는 현재 시작지점(1, 1)에서 도착지점(<em>N</em>,&nbsp;<em>N</em>)까지 가려고 한다. 시작지점(1, 1)과 도착지점(<em>N</em>,&nbsp;<em>N</em>)의 위치에는 항상 돌이 존재하며 물과 만나지 않아도 치삼이가 이동할 수 있다. 치삼이가 이동하는 것에는 시간이 걸리지 않는다. 치삼이는 상, 하, 좌, 우, 대각선으로 이동할 수 있다. 이때 치삼이가 도착지점(<em>N</em>,&nbsp;<em>N</em>)의 위치까지 가장 빠르게 도착하는 경우 며칠이 걸리는지 알아보자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 땅의 크기&nbsp;<em>N</em>(3 ≤&nbsp;<em>N</em>&nbsp;≤ 1,000), 물 생성지 개수&nbsp;<em>W</em>(1 ≤&nbsp;<em>W</em>&nbsp;≤&nbsp;<em>N</em>)가 주어진다.</p>

<p>두 번째 줄부터&nbsp;<em>W</em>+1줄까지 물의 생성 위치&nbsp;<em>x(행), y(열)</em>&nbsp;(1 ≤&nbsp;<em>x, y</em>&nbsp;≤&nbsp;<em>N</em>)가 주어진다.</p>

<p><em>W</em>+2줄부터&nbsp;<em>N</em>개의 줄에&nbsp;냇가의 지도가 주어진다. 1은 돌이 있는 위치를 나타내고, 0은 땅이 있는 위치를 나타낸다.</p>

<p><em>N</em>, <em>W</em>, <em>x</em>, <em>y</em>는 모두 양의 정수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>가장 빠르게 도착지점에 도착하는 일수를 출력한다. 만약 치삼이가 도착지점(<em>N</em>,&nbsp;<em>N</em>)에 도달하지 못하는 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 1
1 1
101
101
011
','3
','SHORTEST_PATH'),
                                                                                                                (7847,'BAEKJOON','https://www.acmicpc.net/problem/18193',18193,'비행기 타고 가요','2초(추가시간없음)','1024 MB',22,'<p>정보과학을 잘하는 사람만 거주할 수 있다는 국가, 경곽국의 존재를 아는가? 경곽국은 총 <em>N</em>개의 도시로 이루어져 있으며, 각각 1번부터 <em>N</em>번까지 번호가 부여되어 있다.</p>

<p>경곽국에서 도시간의 이동수단은 비행기가 유일하다. 모든 도시쌍에 대하여 그 두 도시 사이를 경유하는 비행기가 존재한다. 다만, 비행기를 탑승하기 위해서는 비행기 표가 필요하다. 경곽국에서 구매할 수 있는 비행기 표는 총 <em>M</em>개가 있으며, 각각 1번부터 <em>M</em>번까지 번호가 부여되어 있다. <em>i</em>번 표는 가격이 <em>A<sub>i</sub></em>원이며, 비행기의 출발 도시의 번호가 <em>B<sub>i</sub></em>&nbsp;이상 <em>C<sub>i</sub></em>&nbsp;이하, 도착 도시의 번호가 <em>D<sub>i</sub></em>&nbsp;이상 <em>E<sub>i</sub></em>&nbsp;이하일 때에만 사용할 수 있다(1 ≤&nbsp;<em>i</em> ≤&nbsp;<em>M</em>).</p>

<p>모든 <em>M</em>개의 표는 일회용이며 한 번만 구매할 수 있다.</p>

<p>교준이의 집은 <em>K</em>번 도시에 있다. 현재 교준이는 집에서 놀고 있다.</p>

<p>교준이가 집을 나와 <em>X</em>번 도시로 가기 위해 구매해야 하는 표 값의 합의 최솟값을 <em>W<sub>X</sub></em>라 하자(1 ≤&nbsp;<em>X</em> ≤&nbsp;<em>N</em>). 단, 교준이는 집을 나오기 전에, 필요한 모든 비행기 표를 구매한다. 만일 어떻게 표를 사서 이동하더라도 <em>X</em>번 도시에 이동할 수 없다면, <em>W<sub>X</sub></em> = -1로 정의한다.</p>

<p><em>W</em><sub>1</sub>, ···, <em>W<sub>N</sub></em>의 값을 모두 구하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 경곽국의 도시의 개수를 의미하는 자연수 <em>N</em>, 비행기 표의 총 개수를 의미하는 자연수 <em>M</em>, 교준이의 집이 있는 도시의 번호 <em>K</em>가 사이에 공백을 두고 주어진다.</p>

<p>두번째 줄부터 <em>M</em>개의 줄에 걸쳐, <em>M</em>개의 비행기 표의 정보가 주어진다. (<em>i</em>+1)번째 줄에는 <em>i</em>번 표의 정보를 나타내는 다섯 개의 정수 <em>A<sub>i</sub></em>, <em>B<sub>i</sub></em>, <em>C<sub>i</sub></em>, <em>D<sub>i</sub></em>, <em>E<sub>i</sub></em>가 사이에 공백을 두고 주어진다(1 ≤&nbsp;<em>i</em> ≤ <em>M</em>).</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 <em>N</em>개의 정수 <em>W</em><sub>1</sub>, ···, <em>W<sub>N</sub></em>를 사이에 공백을 두고 차례대로 출력한다.</p>

<p><em>W<sub>K</sub></em> = 0임에 유의하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1 1 1
0 1 1 1 1
','0
','SHORTEST_PATH'),
                                                                                                                (12571,'BAEKJOON','https://www.acmicpc.net/problem/18223',18223,'민준이와 마산 그리고 건우','1초','256 MB',12,'<p>종강을 맞은 민준이는 고향인 마산으로 내려갈 계획을 짜고 있었다. 늘 그랬듯, 마산으로 갈 버스를 예약하려던 순간 민준이는 집으로 가는 다른 방법이 떠올랐다. 그것은 직접 지도를 보고 고향으로 가는 가장 짧은 길을 찾는 것이다.</p>

<p>그때, 먼저 고향으로 내려갔던 친구인 건우에게 연락이 왔다. 건우는 고향으로 내려가던 중 알 수 없는 일에 휘말려 외딴곳에 혼자 남겨지게 되었다. 건우는 유일한 구세주인 민준이에게 도움을 청한 것이었다. 그러나 마산의 남자인 민준이에게는 마산이 먼저였다. 민준이는 처량한 건우를 무시한 채 고향으로 떠나려고 했지만, 만약 고향으로 가는 길에 건우가 있다면 겸사겸사 도움을 줄 수 있을 것 같았다.</p>

<p>지도는 양방향 그래프 형태로 되어있다. 출발지는 1번 정점 마산은 V번 정점이다. 정점은 1~V까지 있다. 건우는 P번 정점에 있다.<br>
그리고 항상 1번 정점에서 P번과 V번 정점으로 갈 수 있는 경로가 존재한다.<br>
중복되는 간선과 자기 자신을 가리키는 간선은 존재하지 않는다.</p>

<p>아래와 같은 그래프가 있을 때,</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/202a6118-5a5c-462c-bce9-e9303701e63a/-/crop/724x635/187,35/-/preview/" style="height: 304.167px; width: 347.5px;"></p>

<p>위의 경우는 최단 경로가 두 가지 있다.<br>
1→3→4→5→6 또는 1→3→5→6 이다. 이것 중에서 건우가 있는 곳, 즉 4번 정점이 포함된 최단 경로가 있으므로 이 경우에는 민준이가 건우를 도울 수 있다.</p>

<p>민준이가 건우를 도와주는 경로의 길이가 최단 경로의 길이보다 길어지지 않는다면, 민준이는 반드시 건우를 도와주러 간다.</p>

<p>어쩌면 지킬 수도 있는 민준이의 우정을 위해 우리가 도와주자!</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 번째 줄에 정점의 개수 V와 간선의 개수 E<em>,</em> 그리고 건우가 위치한 정점 P가 주어진다. (2 ≤&nbsp;<em>V&nbsp;&nbsp;</em>≤ 5,000, 1 ≤&nbsp;<em>E&nbsp;</em>≤ 10,000, 1 ≤&nbsp;<em>P&nbsp;&nbsp;</em>≤&nbsp;<em>V</em>)</p>

<p>두 번째 줄부터 E개의 줄에 걸쳐 각 간선의 정보 a,b,c가 공백으로 구분되어 주어진다. 이는 a번 정점과 b번 정점 사이의 거리가 c임을 의미한다. (1 ≤&nbsp;<em>a</em>,<em>b&nbsp;</em>≤&nbsp;<em>V</em>, 1 ≤&nbsp;<em>c&nbsp;&nbsp;</em>≤ 10,000)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>민준이가 찾은 최단 경로 위에 건우가 있다면 "<code>SAVE HIM</code>" 을 아니면 "<code>GOOD BYE</code>" 를 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','6 7 4
1 2 1
1 3 1
2 3 10
3 4 1
3 5 2
4 5 1
5 6 1
','SAVE HIM
','SHORTEST_PATH'),
                                                                                                                (12593,'BAEKJOON','https://www.acmicpc.net/problem/18253',18253,'최단경로와 쿼리','5초','512 MB',23,'<p>N개의 행과 M개의 열로 이루어진 격자가 있다.</p>

<p>격자의 각 셀에는 가중치가 있다. <em>i</em>행 <em>j</em>열의 가중치를&nbsp;<em>V<sub>i,j</sub></em>로 표기하자.</p>

<p>다음과 같은 쿼리가 <em>Q</em>개 주어진다:</p>

<ul>
	<li><em>r<sub>1</sub> c<sub>1</sub>&nbsp;r<sub>2</sub>&nbsp;c</em><sub><em>2</em>&nbsp;</sub>: <em>r<sub>1</sub></em>행 <em>c<sub>1</sub></em>열에서 <em>r<sub>2</sub></em>행 <em>c<sub>2</sub></em>열로 가는 경로 중 지나는 셀의 가중치 합의 최솟값을 출력하여라.</li>
</ul>

<p>쿼리에 대한 답을 구해보자.</p>

<p>단, 어떤 셀에서 한 번에 이동할 수 있는 셀은 상하좌우로 인접한&nbsp;셀이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 두 정수 <em>N</em>(1&nbsp;≤ <em>N</em>&nbsp;≤ 5)과 <em>M</em>(1&nbsp;≤ <em>M</em>&nbsp;≤ 100,000)이 주어진다.</p>

<p><em>i</em>+1(1&nbsp;≤ <em>i</em>&nbsp;≤ <em>N</em>)번째 줄에는 <em>M</em>개의 정수 <em>V<sub>i,1</sub></em>,&nbsp;<em>V<sub>i,2</sub></em>, ...,&nbsp;<em>V<sub>i,M</sub></em>&nbsp;이 주어진다. (0 ≤ <em>V</em><sub><em>i,j</em> </sub>≤&nbsp;1,000,000,000)</p>

<p><em>N</em>+2번째 줄에 쿼리의 수를 나타내는 정수 <em>Q</em>(1&nbsp;≤ <em>Q</em>&nbsp;≤ 100,000)가 주어진다.</p>

<p>이후 <em>Q</em>개의 줄에 걸쳐 쿼리를 나타내는 4개의 정수 <em>r<sub>1</sub></em>, <em>c<sub>1</sub></em>, <em>r<sub>2</sub></em>, <em>c</em><sub><em>2</em> </sub>(1 ≤ <em>r<sub>1</sub></em>, <em>r<sub>2</sub></em><sub>&nbsp;</sub>≤&nbsp;<em>N</em>, 1 ≤&nbsp;<em>c<sub>1</sub></em>, <em>c<sub>2</sub></em> ≤ <em>M</em>)가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>쿼리에 대한 답을 한 줄에 하나씩 차례로 출력하여라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 5
1 3 2 4 5
1 1 2 3 1
5 4 3 2 1
3
1 1 3 5
2 2 3 3
3 3 3 3
','10
6
3
','SHORTEST_PATH'),
                                                                                                                (12558,'BAEKJOON','https://www.acmicpc.net/problem/18352',18352,'특정 거리의 도시 찾기','2초','256 MB',9,'<p>어떤 나라에는 1번부터 <em>N</em>번까지의 도시와&nbsp;<em>M</em>개의 단방향 도로가 존재한다. 모든 도로의 거리는 1이다.</p>

<p>이 때 특정한 도시 <em>X</em>로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 <em>K</em>인 모든 도시들의 번호를 출력하는 프로그램을 작성하시오.&nbsp;또한 출발 도시 <em>X</em>에서 출발 도시 <em>X</em>로 가는 최단 거리는&nbsp;항상 0이라고 가정한다.</p>

<p>예를 들어 <em>N</em>=4, <em>K</em>=2, <em>X</em>=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/a5e311d7-7ce4-4638-88a5-3665fb4459e5/-/preview/" style="height: 249px; width: 250px;"></p>

<p style="text-align: justify;">이 때 1번 도시에서 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 2인 도시는 4번 도시 뿐이다. &nbsp;2번과 3번 도시의 경우, 최단 거리가 1이기 때문에 출력하지 않는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 도시의 개수 <em>N</em>,&nbsp;도로의 개수 <em>M</em>, 거리 정보 <em>K</em>, 출발 도시의 번호 <em>X</em>가 주어진다. (2 ≤&nbsp;<em>N&nbsp;</em>≤ 300,000, 1 ≤&nbsp;<em>M&nbsp;</em>≤ 1,000,000, 1 ≤&nbsp;<em>K&nbsp;</em>≤ 300,000, 1 ≤&nbsp;<em>X&nbsp;</em>≤&nbsp;<em>N</em>) 둘째 줄부터 <em>M</em>개의 줄에 걸쳐서 두 개의 자연수 <em>A</em>, <em>B</em>가 공백을 기준으로 구분되어 주어진다. 이는 <em>A</em>번 도시에서 <em>B</em>번 도시로 이동하는 단방향 도로가 존재한다는 의미다. (1 ≤&nbsp;<em>A</em>, <em>B&nbsp;</em>≤&nbsp;<em>N</em>) 단, <em>A</em>와 <em>B</em>는 서로 다른 자연수이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p><em>X</em>로부터 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 <em>K</em>인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.</p>

<p>이 때 도달할 수 있는 도시 중에서, 최단 거리가 <em>K</em>인 도시가 하나도 존재하지 않으면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 4 2 1
1 2
1 3
2 3
2 4
','4
','SHORTEST_PATH'),
                                                                                                                (7884,'BAEKJOON','https://www.acmicpc.net/problem/18375',18375,'착한 말 나쁜 말','2.5초(추가시간없음)','1024 MB',22,'<p>N ×&nbsp;N 격자의 각 칸에 양파가 하나씩 심어져 있다. 각각의 양파에는 세균이 한 마리씩 살고 있는데, 이 세균들은 자주 모임을 연다. 이 격자에서 좌표 (r, c)는 r번째 행의 c번째 열에 있는 칸을 뜻한다. 각 세균에게는 두 가지 이동 방법이 있는데, 착한 말과 나쁜 말이다. 나쁜 말을 한 번 하면 a의 에너지가 소모된다. 착한 말을 하려면 지금 세균이 있는 칸이 착한 칸이어야 하며, b의 에너지가 소모된다. 현재 위치가 (r, c)라고 할 때 나쁜 말을 하면 화난 양파가 세균을 옆의 양파로 밀어내서 |r - r|+|c - c| = 1을 만족하는 (r, c)로 이동할 수 있으며, 착한 말을 하면 양파가 순간적으로 성장해서 세균을 높이 띄워주어 max(|r - r|, |c - c|)&nbsp;≤ D를 만족하는 (r, c)로 이동할 수 있다. 당연히 격자 밖으로 나가는 것은 불가능하다.</p>

<p>세균들이 계획한 i일의 모임 일정은 (R<sub>i</sub>, C<sub>i</sub>)에서 열리고, 이 날 태양 빛의 세기에 따라 a = A<sub>i</sub>, b = B<sub>i</sub>가 정해진다. 세균들이 각자 최소의 에너지를 사용하여 이동한다고 할 때, 모든 칸의 세균들이 모이기 위해 세균들이 사용해야 하는 총 에너지 합을 구해주자.&nbsp;단, 양파는 한 번에 세균 하나씩만 이동시킬 수 있다고 한다. 모든 세균들은 모임이 끝난 뒤 자기가 사는&nbsp;양파로 돌아가는데, 이 때는 에너지를 소모하지 않는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>1번째 줄에 격자의 크기 N, 착한 말을 했을 때의 이동 범위 D, 모임 날짜의 수 Q가 공백으로 구분되어 주어진다.</p>

<p>i + 1번째 줄에는 길이 N의 문자열로 격자의 i번째 행의 상태가 주어진다. j번째 문자가 <code>.</code>일 경우 (i, j)는 나쁜 칸이며, <code>#</code>일 경우 착한 칸이다.&nbsp;(1&nbsp;≤&nbsp;i, j&nbsp;≤&nbsp;N)</p>

<p>i + N + 1번째 줄에는 i일의 모임 일정에 대한 정보 R<sub>i</sub>, C<sub>i</sub>, A<sub>i</sub>, B<sub>i</sub>가 공백으로 구분되어 주어진다. (1&nbsp;≤&nbsp;i ≤ Q)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>i번째 줄에 i일의 모임 일정에서 세균들이 사용해야 하는 총 에너지 합을 출력한다.&nbsp;(1 ≤&nbsp;i&nbsp;≤&nbsp;Q)</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 1 2
#..
...
...
1 1 10 1
2 2 1 1
','180
11
','SHORTEST_PATH'),
                                                                                                                (7931,'BAEKJOON','https://www.acmicpc.net/problem/18794',18794,'트리와 쿼리 15','5초','1024 MB',27,'<p>N개의 정점으로 이루어진 트리가 있다. 정점은 1번부터 N번까지 번호가 매겨져 있다. 간선의 가중치는 모두 1이다.</p>

<p>아래의&nbsp;쿼리를 수행하는 프로그램을 작성하시오.</p>

<ul>
	<li><font face="monospace">k v<sub>1</sub> r<sub>1</sub> v<sub>2</sub> r<sub>2</sub> ... v<sub>k</sub> r<sub>k</sub></font>: 어떠한 정점 x가 v<sub>i</sub>와 거리 r<sub>i</sub> 이내에 있다면 (거리가 r<sub>i</sub>보다 작거나 같다면), x가 i번 조건을 만족한다고 하자. 트리에 있는 모든 정점들 중, 쿼리로 주어진 k개 조건 중 1개 이상의 조건을 만족하는 정점의 개수를 출력하라.</li>
</ul>

<p><span style="display:block"><span style="height:0px"><span style="position:absolute">??????</span></span></span></p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 정수 N이 주어진다. (1 ≤ N&nbsp;≤ 100,000)</p>

<p>이후 N-1개의 줄에는 각 간선이 연결하는 두 정점 번호 u,&nbsp;v가 주어진다. (1 ≤ u, v ≤ N)</p>

<p>다음 줄에 정수 M이 주어진다.&nbsp;(1 ≤ M&nbsp;≤ 300,000)</p>

<p>이후 M개의 줄에 위에서 설명한 것과 같은 쿼리가 주어진다. 각 쿼리는 지문과&nbsp;다르게 한 줄에 들어오지 않으며, k + 1개의 줄로 분리되어 주어진다. 예제 입력을 참고하라. (1 ≤ v<sub>i</sub> ≤ N, 0 ≤ r<sub>i </sub>< N, 1 ≤ k)</p>

<p>쿼리로 주어지는 k의 합은 300000을 넘지 않는다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>쿼리의 결과를 한 줄에 하나씩 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','10
1 3
6 4
9 8
1 8
3 4
2 8
10 3
4 5
8 7
2
3
8 1
3 1
3 2
2
7 3
6 0
','10
7
','SHORTEST_PATH'),
                                                                                                                (12639,'BAEKJOON','https://www.acmicpc.net/problem/19537',19537,'전투 시뮬레이션','2초(추가시간없음)','1024 MB',16,'<p>당신은 $H \times W$ 크기의 $2$차원 격자 맵에서 두 세력이 전투를 벌이는 시뮬레이션 게임을 개발하고 있다.&nbsp;</p>

<p>격자의 각 칸은 $y$좌표와 $x$좌표의 쌍 $\left(y, x\right)$로 표현할 수 있다. 첫 번째 줄에 있는 칸들은 왼쪽부터 순서대로 $\left(0, 0\right), \left(0, 1\right), \cdots, \left(0, W-1\right)$로 표현하며, 두 번째 줄의 칸들은 $\left(1, 0\right), \left(1, 1\right), \cdots, \left(1, W-1\right)$로 표현한다. 같은 방법으로 $H$번째 줄까지의 모든 칸들을 좌표로 표현한다. 어떤 칸의 위, 아래, 왼쪽, 오른쪽 칸들은 그 칸에 ‘인접한’&nbsp;칸이라고 한다.</p>

<p>맵은 다양한 지형으로 이루어져 있고 각 지형은 정해진 ‘<strong>험준도</strong>’ 수치를 가진다. 또, 맵에는 여러 유닛이 서로 겹치지 않게 배치되어 있으며, 각 유닛은 전투 중인 두 세력 중 한 세력에 속한다. 각 유닛은 맵 밖으로 벗어나지 않는 한 위치한 곳으로부터 상하좌우로 인접한 칸으로 이동할 수 있다. 이동 시에는 해당 칸의 지형이 가진 험준도만큼의 스태미나를 소모하게 된다. 일부 지형은 너무 험준하여 이동이 불가능할 수도 있다. 세력이 다른 두 유닛이 인접해 있다면 그 둘은 교전 상태이다.</p>

<p>모든 유닛은 전투식량을 든든하게 챙겨 먹고 나왔기 때문에 무한한 스태미나를 가지고 있다. 다만 각 유닛은 한 번의 <strong>약진</strong>에 최대로 소모할 수 있는 스태미나 총량이 제한되어 있으며, 이를 유닛의 ‘<strong>이동력</strong>’이라고 한다. 약진이란 전투 중인 유닛이 비교적 가까운 목표지점까지 빠르게 달려 단숨에 이동하는 전술 행동으로서 하나 이상의 칸을 거쳐 이동하는 것이다. 약진은 목표지점에 다른 유닛이 없어야만 가능하다. 약진 중에 같은 세력의 유닛을 만났다면 통과하여 지나갈 수 있으나, 다른 세력의 유닛을 만났다면 그 유닛과 상하좌우로 인접하게 되는 순간 교전이 벌어지기 때문에 그 자리에 멈춰야만 한다. 하지만, 선택된 유닛이 이미 교전 상태였다면 약진하여 교전에서 벗어날 수 있다.</p>

<p>당신은 게임에 버그가 있는지 테스트하기 위해서 자동으로 임의의 유닛을 선택하여 약진 명령을 내리는 봇을 만들었다. 이 봇은 수행이 불가능한 약진 명령을 내리기도 한다. 목표 지점에 다른 유닛이 있거나, 목표 지점이 이동 불가 지형이거나, 이동력의 한계로 인해 목표 지점에 도달하는 경로가 존재하지 않는 경우, 그 명령은 수행 불가능하다. 게임에 버그가 없다면 이러한 명령은 무시되어야 한다.</p>

<p>이제 버그가 있는지 없는지 확인할 시간이다. 봇이 내린 명령들이 시간 순으로 주어졌을 때, 모든 명령이 순차적으로 처리된 후 각 유닛이 위치한 좌표를 출력하는 프로그램을 작성하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 지형의 종류 수 $N$, 맵의 세로 길이 $H$, 맵의 가로 길이 $W$가 공백으로 구분되어 주어진다. ($1 \leq N \leq 9$, $2 \leq H,W \leq 500$)</p>

<p>이어서 $H$개의 줄에 걸쳐 왼쪽부터 차례대로 각 칸의 지형 번호를 의미하는 $W$개의 정수가 공백으로 구분되어 주어지며, 각 수는 $1$ 이상 $N$ 이하이다.</p>

<p>다음 줄에 $N$개의 정수 $r_1, r_2, \cdots, r_N$ ($-1 \leq r_i \leq 4$, $r_i \neq 0$)이 공백으로 구분되어 주어진다. $r_i$가 $-1$이라면 $i$번째 지형이 너무 험준하여 진입할 수 없음을 의미하며, 이외의 경우에는 $r_i$는 $i$번째 지형의 험준도를 의미한다.</p>

<p>다음 줄에 유닛의 수 $M$이 주어진다. ($1 \leq M \leq H \times W / 4$)</p>

<p>이어서 $M$개의 줄에 걸쳐 $1$번 유닛부터 차례로 각 유닛의 이동력, 세력, 유닛이 있는 칸의 $y$좌표, 유닛이 있는 칸의 $x$좌표 정보를 의미하는 네 개의 정수 $m$, $t$, $a$, $b$가 공백으로 구분되어 주어진다. ($1 \leq m \leq 20$, $0 \leq t \leq 1$, $0 \leq a < H$, $0 \leq b < W$)</p>

<p>각 칸에는 최대 하나의 유닛이 배치되며, 진입 불가능한 지형의 칸에는 유닛이 배치되지 않는다.</p>

<p>다음 줄에 약진 명령의 개수 $K$ ($1 \leq K \leq 10\ 000$)가 주어진다.</p>

<p>이어서 $K$개의 줄에 걸쳐 약진 명령을 의미하는 세 정수 $u$, $a$, $b$가 공백으로 구분되어 주어진다. ($1 \leq u \leq M$, $0 \leq a < H$, $0 \leq b < W$) 이는 $u$번 유닛을 $\left(a, b\right)$로 약진시키는 명령이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>$M$개의 줄에 걸쳐 모든 약진 명령이 처리된 후의 유닛의 위치를 출력한다. $i$번 유닛이 $\left(a_i, b_i\right)$에 위치할 경우 $i$번째 줄에 두 정수 $a_i$, $b_i$를 공백으로 구분하여 출력한다.</p>

					</div>

				<div class="headline">
				<h2>노트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>첫 번째 약진 명령의 경우, 적대 세력 유닛을 고려하지 않는다면 $\left(2, 0\right)$ → $\left(2, 1\right)$ → $\left(2, 2\right)$ → $\left(2, 3\right)$ → $\left(1, 3\right)$과 같은 경로로 이동하여 도달할 수 있다. 하지만 $\left(3, 3\right)$에 위치한 적대 세력 유닛으로 인해 $\left(2, 3\right)$에서 교전이 발생하므로 $\left(1, 3\right)$에는 도달할 수 없고, 교전이 발생하지 않도록 우회해서 이동할 수 있는 경로가 없으므로 마찬가지로&nbsp;도달할 수 없다. 따라서 이 명령은 수행 불가능하므로 무시된다.</p>

<p>두 번째 약진 명령은 목표 위치가 이동 불가 지형이기에 수행 불가능하므로 무시된다.</p>

<p>세 번째 약진 명령은 $\left(2, 0\right)$ → $\left(3, 0\right)$ → $\left(4, 0\right)$ → $\left(4, 1\right)$ → $\left(4, 2\right)$ → $\left(4, 3\right)$의 경로로 움직이면 $7$의 스태미나를 소모하여 이동할 수 있다. 이는 유닛의 이동력보다 크지 않은 값이므로 수행할 수 있는 명령이다.</p>

<p>따라서 모든 명령이 처리된 후 $1$번 유닛은 마지막 명령에 의해 $\left(4, 3\right)$에 위치하고 $2$번 유닛은 초기 위치에 그대로 위치히게 된다.</p>

				</div>
				</div>','3 5 5
1 1 3 3 2
3 3 3 1 2
1 1 1 2 1
2 2 1 1 1
1 1 1 1 3
1 3 -1
2
7 0 2 0
4 1 3 3
3
1 1 3
2 4 4
1 4 3
','4 3
3 3
','SHORTEST_PATH'),
                                                                                                                (3420,'BAEKJOON','https://www.acmicpc.net/problem/19648',19648,'미하일 2마리','7초(추가시간없음)','1024 MB',18,'<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/b905d9c8-e386-470b-a776-3bb2bcf0dbbb/-/preview/" style="width: 335px; height: 126.667px;"></p>

<p>메이플스토리에는 235레벨 이후에 갈 수 있는 에스페라란 지역이 있다. "거울에 비친 빛의 신전"이&nbsp;사냥 효율이 상당히 좋아서 인기가 많다. 여기서 사냥하는 것을 <strong>신전 사냥</strong>이라고 한다. 위의&nbsp;그림은 해당 지역을&nbsp;그래프로 나타낸 것이다.</p>

<p>2019년에 이 신전 사냥과 관련된 재밌는 떡밥이 있었다. 보통 2명이서 사냥을 하면 몹 리젠 속도가 2명이 사냥하는 속도를 따라잡지 못해서 비효율적인데, 미하일이란 직업의 경우에는 사냥 능력이 좋지 않아서 미하일 2명이서 사냥할 때는 서로 영향을 받지 않고 사냥할 수 있었다고 알려진 것이다.</p>

<p>그래서 미하일 2명이&nbsp;파티를 짜고 사냥을 하기로 결심했다. 해당 그림에서 파란색 원 2개로 표기된 곳이 미하일 2명의 사냥 시작점으로 총 <em>n</em>초 동안 다음과 같이 사냥을 할 것이다.</p>

<ol>
	<li>미하일들은 무조건 매 초마다 그림에서 표기된 그래프에 따라서 움직여야 하며, 절대로&nbsp;가만히 있으면 안 된다.</li>
	<li>그래프에서 각 간선의 거리는 전부&nbsp;1이다.</li>
	<li>미하일들은 매 초마다 거리 1만 움직일 수 있다.</li>
	<li>미하일의 위치 2곳이 <em>a</em>, <em>b</em>라면&nbsp;<em>a</em>에서 <em>b</em>로 가는 최단 경로와&nbsp;<em>b</em>에서 <em>a</em>로 가는 최단 경로의 길이는 각각 3 이상이어야 한다.</li>
</ol>

<p>이 때, <em>n</em>초 동안 사냥할 수 있는 총 방법 수를 1,000,000,007로 나눈 나머지를 구하시오.&nbsp;미하일 2명이 각각 위치한 곳이&nbsp;<em>a</em>, <em>b</em>인 경우와 <em>b</em>, <em>a</em>에 있는 경우는&nbsp;서로 다른 경우로&nbsp;취급한다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 정수&nbsp;<em>n&nbsp;</em>(1 ≤&nbsp;<em>n&nbsp;</em>≤ 1,000,000,000)이 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p><em>n</em>초 동안 사냥할 수 있는 총 방법 수를 1,000,000,007로 나눈 나머지를 구하시오.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','1
','5
','SHORTEST_PATH'),
                                                                                                                (12666,'BAEKJOON','https://www.acmicpc.net/problem/19650',19650,'개미여행','1초','1024 MB',23,'<p>지금 개미 마을에서는 싸움이 일어났다! 다양한 소속의 개미들이 열심히 싸우고 있다. 싸움을 싫어하는 철수 개미는 다른 개미들이 싸우는 것에 신경 쓰지 않고 여행을 가려고 한다.</p>

<p>철수는 (<em>s<sub>x</sub></em>, <em>s<sub>y</sub></em>)에서 (<em>e<sub>x</sub>, e<sub>y</sub></em>)로 이동하려고 한다. 만약 철수가 어떤 소속에 포함되었다는 오해를 사게 되면 철수는 싸움에 휘말리게 되고 평화로운 여행 계획은 망하게 된다.</p>

<p>구체적으로는, 특정 그룹 내에 있는 임의의 서로 다른 개미 3마리를 골랐을 때, 그 개미들을 꼭짓점으로 하는 삼각형 안에 있다면 철수는 그 그룹의 소속이라는 오해를 사게 된다. 삼각형 테두리를 지나는 것은 허용되고 특정 그룹 내에 있는 임의의 개미 3마리를 골랐을 때 개미들이 한 직선 위에 있는 경우는 없다.</p>

<p>철수가 해당 오해를 사는 일 없이 (<em>e<sub>x</sub>, e<sub>y</sub></em>)에 최단 거리로 이동한다고 했을 때 철수가 이동하는 거리는 얼마인가?</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 <em>s<sub>x</sub>, s<sub>y</sub>, e<sub>x</sub>, e<sub>y</sub></em>가 주어진다. 다음 줄에는 소속의 개수 <em>N</em>이 주어진다.</p>

<p>다음 줄부터 <em>N</em>개의 소속에 대한 정보가 나타난다. 소속에 대한 정보는 여러 줄에 걸쳐 나타난다. 첫번째 줄에는 소속에 포함된 개미의 마리 수 <em>M</em>이 주어진다. 다음 해당 소속의 개미들의 좌표 <em>p<sub>x</sub>, p<sub>y</sub></em>가 <em>M</em>줄에 걸쳐 차례로 주어진다. 문제에 있는 모든 <em>x</em>&nbsp;좌표와 <em>y</em>&nbsp;좌표는 절댓값이 100,000을 넘지 않는 정수이다.</p>

<p>철수를 제외한 개미들의 수는 100마리를 넘지 않고, 시작점과 도착점을 포함한 어떤 좌표도 같은 위치에 있지 않다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>철수가 도착점에 도달할 수 있는 경우, 철수가 이동한 거리를 출력한다. 절대/상대 오차가 10<sup>?6</sup> 이하일 경우 정답으로 인정한다.</p>

<p>철수가 도착점에 도달할 수 없다면 <span style="color:#e74c3c;"><code><span style="background-color:#ecf0f1;">-1</span></code></span>을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','0 0 10 0
1
3
3 0
5 0
4 -1
','10.0000000
','SHORTEST_PATH'),
                                                                                                                (12667,'BAEKJOON','https://www.acmicpc.net/problem/19701',19701,'소 운전한다.','0.5초','1024 MB',15,'<p>소들은 날아다니는 대신 그냥 운전을 하기로 했다. 소들이 사는 대한민국에는 도시가 $V$개 있고, 두 도시를 양방향으로 잇는 고속도로가 $E$개 있다. 물론 소들은 선린인터넷고가 있는 $1$번 도시에 산다. 아, 이건 꿀팁인데, 모든 고속도로의 가운데에는 돈까스를 파는 휴게소가 하나씩 있다.</p>

<p>이제 휴가철이 되어서 소들이 여행을 떠난다. 여러분도 알다시피, 암소 베시는 다른 도시로 여행을 떠나려 한다. 베시는 고속도로들을 적절히 타고 이동해서 목적지에 도착할 것이다. 이 때, 경로를 잘 골라서 $1$번 도시에서 베시가 여행갈 도시까지 가는 데에 걸리는 시간의 최솟값을 구하라. 아, 어떤 도시로 여행갈 지는 비밀이다. 그러니 $2$번에서 $N$번까지의 각각의 도시에 대해, $1$번 도시에서 이 도시로 가는 데 걸리는 시간의 최솟값을 구하라.</p>

<p>... 그러나 베시는 문득 공허함을 느낀다. 베시는 이 문제가 다익스트라 알고리즘(Dijkstra algorithm)으로 너무 쉽게 풀린다는 사실도 알았을 뿐더러, 고속도로의 휴게소에서 파는 돈까스를 먹고 싶은 자신의 속마음을 알게 되었다. 베시는 모든 고속도로에 있는 돈까스를 모두 조사해, 돈까스의 맛을 수치화해 적어두었다. 베시는 휴가를 가는 경로에 있는 휴게소 가운데 정확히 한 곳에 들러서 돈까스를 사 먹을 것이다. 베시가 여행갈 수 있는 $2$번에서 $N$번까지의 각 도시에 대해, 경로와 들를 휴게소를 잘 골라서 $1$번 도시에서 이 도시로 가는 데 걸리는 시간에서 가는 도중에 휴게소를 적절히 하나 들러서 먹는 돈까스의 맛을 뺀 값의 최솟값을 구하라. 물론, 돈까스를 먹는 시간은 가는 데 걸리는 시간에 포함하지 않는다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 대한민국에 있는 도시의 개수 $V$와 고속도로의 개수 $E$가 주어진다.</p>

<p>둘째 줄부터 $E$개의 줄에는 각각의 고속도로의 정보가 주어진다. 각 줄에는, 고속도로가 잇고 있는 두 도시 $x$, $y$, $x$에서 $y$로 가는 데 걸리는 시간 $t$, 휴게소에서 파는 돈까스의 맛을 나타내는 값 $k$가 차례대로 공백을 사이에 두고 주어진다.</p>

<p>같은 두 도시 쌍을 잇는 고속도로가 두 개 이상 있는 경우는 없다. 모든 도시들은 고속도로를 이용해 직, 간접적으로 연결되어 있다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>총 $V-1$개의 정수를 한 줄에 하나씩 출력한다. $i$번째로 출력하는 정수는, $1$번 도시에서 $i+1$번 도시에서 가는 데에 걸리는 시간에서 가는 도중에 먹는 돈까스의 맛을 뺀 값의 최솟값이다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 5
1 2 2 1
2 3 3 2
2 4 4 3
1 3 6 2
4 3 3 4
','1
3
3
','SHORTEST_PATH'),
                                                                                                                (12677,'BAEKJOON','https://www.acmicpc.net/problem/19855',19855,'3분 그래프 리턴즈','3초(추가시간없음)','1024 MB',25,'<p><strong>3분 그래프</strong>라는 음식을 아는가? 3분 그래프는 서울대학교 컴퓨터공학부 학생들의 지친 심신을 위로해 주는 보양식으로, 이름에서 알 수 있듯 간편한 조리 방식과 깊은 풍미를 가지고 있어 널리 사랑받는 음식이다. 작년에 출시된 3분 그래프 평면맛의 인기에 힘입어, 3분 그래프 제조업체 스눕스는 야심작 <strong>3분 그래프 구간맛</strong>을 출시했다.</p>

<p style="margin-top: 15px;"><img alt="3-min-graph" src="https://upload.acmicpc.net/fd908ad7-6e11-4124-9ffc-73b68fa35d93/-/preview/" style="display: block; margin-left: auto; margin-right: auto; width: 366.667px; max-width: 440px; height: 360px;"></p>

<p style="margin-bottom: 15px; text-align: center;">3분 그래프 구간맛. 국산 정점을 쓴다.</p>

<p>3분 그래프 구간맛은 이름에서 알 수 있듯 정점이 <span style="font-style: italic;">N</span>개인 <strong>구간 그래프</strong>의 형태이다. 각 정점은 위치가 고정된 수직선 상의 구간 형태이며, 겹치는 구간끼리는 간선으로 이어져 고정되어 있다. 끝점끼리 겹치는 구간도 겹치는 구간으로 생각한다. <span style="font-style: italic;">i</span>번째 정점은 [<span style="font-style: italic;">s</span><sub><span style="font-style: italic;">i</span></sub>, <span style="font-style: italic;">e</span><sub><span style="font-style: italic;">i</span></sub>]의 구간으로 나타나며, <span style="font-style: italic;">t</span><sub><span style="font-style: italic;">i</span></sub>의 맛을 가지고 있다.</p>

<p>서울대학교 컴퓨터공학부는 아니지만 미식가인 규민이는 큰 마음을 먹고 3분 그래프 구간맛을 샀다. 그런데 규민이는 사이클 알러지가 있기 때문에, <strong>정점을 몇 개 빼내서</strong> 모든 사이클을 제거한 뒤에 먹어야 한다. 물론 정점을 빼낼 때는 그 정점에 연결된 간선도 자연스럽게 제거된다.</p>

<p>규민이는 3분 그래프 구간맛을 최대한 맛있게 즐기고 싶기 때문에, 몇 개의 정점을 빼낸 뒤 남아 있는 정점들의 맛을 합한 값이 최대가 되었으면 한다. 규민이가 3분 그래프를 3분 안에 먹을 수 있도록 여러분이 이 작업을 대신 수행해주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫째 줄에는 구간의 개수 <span style="font-style: italic;">N</span>이 주어진다.</p>

<p>둘째 줄부터 <span style="font-style: italic;">N</span>개의 줄에 걸쳐 각 구간을 나타내는 정보가 주어진다. (<span style="font-style: italic;">i&nbsp;</span>+ 1)번째 줄에는 세 정수 <span style="font-style: italic;">s</span><sub><span style="font-style: italic;">i</span></sub>, <span style="font-style: italic;">e</span><sub><span style="font-style: italic;">i</span></sub>, <span style="font-style: italic;">t</span><sub><span style="font-style: italic;">i</span></sub>가 공백을 사이에 두고 주어지는데, 이는 <span style="font-style: italic;">i</span>번째 구간이 [<span style="font-style: italic;">s</span><sub><span style="font-style: italic;">i</span></sub>, <span style="font-style: italic;">e</span><sub><span style="font-style: italic;">i</span></sub>]이며, <span style="font-style: italic;">t</span><sub><span style="font-style: italic;">i</span></sub>의 맛을 가지고 있다는 의미이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 규민이가 먹을 수 있는 정점들의 맛을 합한 값의 최댓값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
1 3 10
3 5 20
5 7 30
','60
','SHORTEST_PATH'),
                                                                                                                (12680,'BAEKJOON','https://www.acmicpc.net/problem/20007',20007,'떡 돌리기','1초','512 MB',12,'<p>군인인 성현이는 전역 후에 새 집으로 이사를 갔다. 주변 이웃과 친하게 지내고 싶은 마음에 이웃집에 떡을 돌리기로 했다. 떡은 한번에 하나씩만 들고 갈 수 있다. 집들 사이에는 총 M개의 양방향 도로가 있다. 귀찮은 성현이는 하루에 X보다 먼&nbsp;거리를&nbsp;걷지 않고 거리가 가까운 집부터 방문한다. 또 잠은 꼭 본인&nbsp;집에서 자야 하므로 왕복할 수 없는 거리는 다음날 가기로 다짐한다. N-1개의 이웃집 모두에게 떡을 돌리기 위해서는 최소 며칠이 소요될 것인가.</p>

<p>집의 번호는 0번부터 N-1번까지 차례대로 붙어있다.</p>

<div id="dicLayer" style="color: rgb(0, 0, 0); font-size: 12px; font-family: Arial; background: -webkit-linear-gradient(bottom, rgb(255, 235, 0), rgb(255, 220, 0)); width: 400px; height: 150px; display: none;">
<div id="dicLayerContents">&nbsp;</div>

<div id="dicLayerSub">&nbsp;</div>
</div>

<div id="dicRawData" style="display: none;">&nbsp;</div>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째줄에 N, M,&nbsp;X, Y가 공백으로 구분되어 입력된다. (2&nbsp;≤ N ≤ 1,000, 1 ≤ M ≤ 100,000, 1 ≤ X&nbsp;≤ 10,000,000, 0&nbsp;≤ Y < N)</p>

<p>두번째 줄부터 M+1번째 줄까지 A와 B 그리고 A집과 B집 사이의 도로의 길이 C가 주어진다. (0&nbsp;≤ A,B <&nbsp;N, 1 ≤ C&nbsp;≤ 10,000) 단, A와 B는 서로 다른 수이고, C는 정수이다.</p>

<p>단, A집과 B집을 연결하는 도로는 유일하다.</p>

<div id="dicLayer" style="color: rgb(0, 0, 0); font-size: 12px; font-family: Arial; background: -webkit-linear-gradient(bottom, rgb(255, 235, 0), rgb(255, 220, 0)); width: 400px; height: 150px; display: none;">
<div id="dicLayerContents">&nbsp;</div>

<div id="dicLayerSub">&nbsp;</div>
</div>

<div id="dicRawData" style="display: none;">&nbsp;</div>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>성현이의 집을 Y 라고 할 때, 이웃집 모두에 떡을 돌리기 위한 최소 일을 출력한다. 만약 모두 방문할수 없으면 -1을 출력한다.</p>

<div id="dicLayer" style="color: rgb(0, 0, 0); font-size: 12px; font-family: Arial; background: -webkit-linear-gradient(bottom, rgb(255, 235, 0), rgb(255, 220, 0)); width: 400px; height: 150px; display: none;">
<div id="dicLayerContents">&nbsp;</div>

<div id="dicLayerSub">&nbsp;</div>
</div>

<div id="dicRawData" style="display: none;">&nbsp;</div>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 6 21 0
0 1 6
0 2 3
0 3 10
1 2 2
2 4 7
3 4 8
','3
','SHORTEST_PATH'),
                                                                                                                (12702,'BAEKJOON','https://www.acmicpc.net/problem/20160',20160,'야쿠르트 아줌마 야쿠르트 주세요','1초','1024 MB',13,'<p>야쿠르트를 외치며 잠에서 깼다. 오늘은 야쿠르트로 하루를 시작하려고 한다.</p>

<p>야쿠르트 아줌마는 10개의 지점을 최단 시간으로 이동하며 들리신다. 각 지점에서 야쿠르트 아줌마보다 같거나 더 일찍 도착한 사람에게 야쿠르트를 팔고 바로 다음 지점으로 출발하신다. 각 지점은 정점 위에 있고 지정된 차례에만 야쿠르트를 판매한다. 야쿠르트를 파는 데 지연되는 시간은 없으며, 오직 이동 시에만 해당 도로의 가중치만큼 시간이 지연된다.</p>

<p>야쿠르트 아줌마는 10개의 지점을 순서대로 방문하며, 10개의 지점 중 첫 번째 지점에서 출발한다. 만약 <em>i</em>번째 지점에서 <em>i</em>+1번째 지점으로 이동 가능한 경로가 없다면 <em>i</em>+2지점으로 이동하신다.&nbsp;<em>i</em>+2로 갈 수 없으면 <em>i</em>+3, <em>i</em>+4...(≤ <em>V</em>)로 이동하신다.</p>

<p>내가 출발하는 시간과 야쿠르트 아줌마가 출발하는 시간은 같다.</p>

<p>내가 출발하는 정점 번호와 야쿠르트 아줌마의 동선을 알려주면 어느 지점으로 가야 야쿠르트를 살 수 있을지 알려줘!!</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에는 정점의 개수 <em>V</em>(1&nbsp;≤ <em>V</em> ≤ 10,000)와 도로의 개수 <em>E</em>(0 ≤ <em>E</em> ≤ 100,000)가 정수로 주어진다.</p>

<p>그 다음 <em>E</em> 줄에 걸쳐 각 도로를 나타내는 세 개의 정수 (<em>u</em>, <em>v</em>, <em>w</em>)가 순서대로 주어진다. 이는 <em>u</em> 와 <em>v</em>(1 ≤ <em>u</em>, <em>v</em> ≤ <em>V</em>) 사이에 가중치가 <em>w</em>(1 ≤ <em>w</em> ≤ 100,000)인 도로가 존재한다는 뜻이다. 정점 사이에는 여러 개의 간선이 존재할 수도 있음에 유의한다.</p>

<p><em>E</em>+2번째 줄에는 야쿠르트 아줌마가 야쿠르트를 파는 10개 지점의 정점 번호가 주어진다. <em>E</em>+3번째 줄에는 내가 출발하는 정점 번호가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>야쿠르트를 살 수 있는 정점이 여러 개라면 그 중 가장 작은 정점 번호를 출력한다.</p>

<p>야쿠르트를 살 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
1 2 1
1 4 1
2 3 1
2 3 1
3 4 1
1 2 3 4 5 1 2 3 4 5
5
','-1
','SHORTEST_PATH'),
                                                                                                                (12703,'BAEKJOON','https://www.acmicpc.net/problem/20161',20161,'왜 동전은 하나씩만 뒤집는 거야','1초','1024 MB',17,'<blockquote>
<p><em>영원한 건 절대 없어</em></p>

<p><em>결국에 넌 변했지</em></p>

<p><em>이유도 없어 진심이 없어</em></p>

<p><em>사랑 같은 소리 따윈 집어 쳐</em></p>

<p><em>오늘밤은 삐딱하게</em></p>
</blockquote>

<p><삐딱하게>를 감명 깊게 들은 정훈이는 삐딱해졌다. 정훈이는 혼자서 <em>N</em>개의 동전을 뒤집는 놀이를 조용히 하고 있었다. 원하는 동전을 하나 뒤집는 방식까지 불만인 정훈이는 화가 나서 책상을 쳤다. 그랬더니 한 번에 <em>K</em>개의 연속된 동전 중에 하나를 제외하고 모두 뒤집어졌다.</p>

<p>놀란 정훈이는 몇 번 해보다가 삐딱한 마음으로 책상을 치면 지정한 연속된 <em>K</em>개의 동전에서 원하는 동전 하나를 제외한 모두를 뒤집는 능력을 발견했다. 신나서 책상을 두드리던 정훈이는 손이 아파 이 능력만을 이용하여 동전들을 현재 상태에서 원하는 상태로 만드는 능력의 최소 사용 횟수를 구하려고 한다.</p>

<p>최소 횟수를 구하려고 하니 또 불만이 생긴 정훈이를 도와 최소 횟수를 구하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 두 정수 동전의 개수 <em>N</em> (1 ≤&nbsp;<em>N</em> ≤&nbsp;100)과&nbsp;뒤집는 범위 <em>K</em> (1 ≤ <em>K</em> ≤&nbsp;min(10, <em>N</em>))가 주어진다.</p>

<p>다음 줄에는 동전의 현재 상태가 주어진다. 0이 앞면, 1이 뒷면이다.</p>

<p>그다음 줄에는 원하는 동전의 상태가 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>정훈이가 책상을 쳐서 동전을 뒤집는 최소 횟수를 출력한다.</p>

<p>불가능한 경우 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 2
0 0 0 0 0
1 1 1 0 0
','3
','SHORTEST_PATH'),
                                                                                                                (10091,'BAEKJOON','https://www.acmicpc.net/problem/20168',20168,'골목 대장 호석 - 기능성','3초','512 MB',11,'<p>소싯적 호석이는 골목 대장의 삶을 살았다. 호석이가 살던 마을은 <em>N</em> 개의 교차로와 <em>M</em> 개의 골목이 있었다. 교차로의 번호는 1번부터 <em>N&nbsp;</em>번까지로 표현한다.&nbsp;골목은 서로 다른 두 교차로를 양방향으로 이어주며 임의의 두 교차로를 잇는&nbsp;골목은 최대 한 개만 존재한다. 분신술을 쓰는 호석이는 모든 골목에 자신의 분신을 두었고, 골목마다 통과하는 사람에게 수금할 것이다. 수금하는 요금은 골목마다 다를 수 있다.</p>

<p>당신은 <em>A&nbsp;</em>번 교차로에서 <em>B&nbsp;</em>번 교차로까지 <em>C&nbsp;</em>원을 가지고 가려고 한다. 호석이의 횡포를 보며 짜증은 나지만, 분신술을 이겨낼 방법이 없어서 돈을 내고 가려고 한다. 하지만 이왕 지나갈 거면, 최소한의 수치심을 받고 싶다. 당신이 받는 수치심은&nbsp;경로 상에서 가장 많이 낸 돈에 비례하기 때문에, 결국 갈 수 있는 다양한 방법들 중에서 최소한의 수치심을 받으려고&nbsp;한다. 즉, 한 골목에서 내야 하는 최대 요금을 최소화하는 것이다.</p>

<p style="text-align: center;"><img alt="" src="https://i.imgur.com/72X0NKv.png" style="width: 390px; height: 293.333px;"></p>

<p>예를 들어, 위의 그림과 같이 5개의 교차로와 5개의 골목이 있으며, 당신이 1번 교차로에서 3번 교차로로 가고 싶은 상황이라고 하자. 만약 10원을 들고 출발한다면 2가지 경로로 갈 수 있다. 1번 -> 2번 -> 3번 교차로로 이동하게 되면 총 10원이 필요하고 이 과정에서 최대 수금액을 5원이었고, 1번 -> 4번 -> 5번 -> 3번 교차로로 이동하게 되면 총 8원이 필요하며 최대 수금액은 6원이 된다. 최소한의 수치심을 얻는 경로는 최대 수금액이 5인 경로이다. 하지만 만약 8원밖에 없다면, 전자의 경로는 갈 수 없기 때문에 최대 수금액이 6원인 경로로 가야 하는 것이 최선이다.</p>

<p>당신은 앞선 예제를 통해서, 수치심을 줄이고 싶을 수록 같거나 더 많은 돈이 필요하고, 수치심을 더 받는 것을 감수하면 같거나 더 적은 돈이 필요하게 된다는 것을 알게 되었다. 마을의 지도와 골목마다 존재하는 호석이가 수금하는 금액을 안다면, 당신이 한 골목에서 내야하는 최대 요금의 최솟값을 계산하자. 만약 지금 가진 돈으로는 절대로 목표 지점을 갈 수 없다면 -1 을 출력하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 교차로 개수 <em>N</em>, 골목 개수 <em>M,</em> 시작 교차로 번호 <em>A</em>, 도착 교차로 번호 <em>B</em>, 가진 돈 <em>C</em> 가 공백으로 구분되어 주어진다. 이어서 <em>M</em> 개의 줄에 걸쳐서 각 골목이 잇는 교차로 2개의 번호와, 골목의 수금액이&nbsp;공백으로 구분되어 주어진다. 같은 교차로를 잇는 골목은 최대 한 번만 주어지며, 골목은 양방향이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>호석이가 지키고 있는 골목들을 통해서 시작 교차로에서 도착 교차로까지 <em>C</em> 원 이하로 가는 경로들 중에, 지나는 골목의 요금의&nbsp;최댓값의 최솟값을 출력하라. 만약 갈 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5 1 3 10
1 2 5
2 3 5
1 4 1
4 5 6
5 3 1
','5
','SHORTEST_PATH'),
                                                                                                                (12705,'BAEKJOON','https://www.acmicpc.net/problem/20182',20182,'골목 대장 호석 - 효율성 1','3초','512 MB',13,'<p>소싯적 호석이는 골목 대장의 삶을 살았다. 호석이가 살던 마을은 <em>N</em> 개의 교차로와 <em>M</em> 개의 골목이 있었다. 교차로의 번호는 1번부터 <em>N&nbsp;</em>번까지로 표현한다.&nbsp;골목은 서로 다른 두 교차로를 양방향으로 이어주며 임의의 두 교차로를 잇는&nbsp;골목은 최대 한 개만 존재한다. 분신술을 쓰는 호석이는 모든 골목에 자신의 분신을 두었고, 골목마다 통과하는 사람에게 수금할 것이다. 수금하는 요금은 골목마다 다를 수 있다.</p>

<p>당신은 <em>A&nbsp;</em>번 교차로에서 <em>B&nbsp;</em>번 교차로까지 <em>C&nbsp;</em>원을 가지고 가려고 한다. 호석이의 횡포를 보며 짜증은 나지만, 분신술을 이겨낼 방법이 없어서 돈을 내고 가려고 한다. 하지만 이왕 지나갈 거면, 최소한의 수치심을 받고 싶다. 당신이 받는 수치심은&nbsp;경로 상에서 가장 많이 낸 돈에 비례하기 때문에, 결국 갈 수 있는 다양한 방법들 중에서 최소한의 수치심을 받으려고&nbsp;한다. 즉, 한 골목에서 내야 하는 최대 요금을 최소화하는 것이다.</p>

<p style="text-align: center;"><img alt="" src="https://i.imgur.com/72X0NKv.png" style="width: 390px; height: 293.333px;"></p>

<p>예를 들어, 위의 그림과 같이 5개의 교차로와 5개의 골목이 있으며, 당신이 1번 교차로에서 3번 교차로로 가고 싶은 상황이라고 하자. 만약 10원을 들고 출발한다면 2가지 경로로 갈 수 있다. 1번 -> 2번 -> 3번 교차로로 이동하게 되면 총 10원이 필요하고 이 과정에서 최대 수금액을 5원이었고, 1번 -> 4번 -> 5번 -> 3번 교차로로 이동하게 되면 총 8원이 필요하며 최대 수금액은 6원이 된다. 최소한의 수치심을 얻는 경로는 최대 수금액이 5인 경로이다. 하지만 만약 8원밖에 없다면, 전자의 경로는 갈 수 없기 때문에 최대 수금액이 6원인 경로로 가야 하는 것이 최선이다.</p>

<p>당신은 앞선 예제를 통해서, 수치심을 줄이고 싶을 수록 같거나 더 많은 돈이 필요하고, 수치심을 더 받는 것을 감수하면 같거나 더 적은 돈이 필요하게 된다는 것을 알게 되었다. 마을의 지도와 골목마다 존재하는 호석이가 수금하는 금액을 안다면, 당신이 한 골목에서 내야하는 최대 요금의 최솟값을 계산하자. 만약 지금 가진 돈으로는 절대로 목표 지점을 갈 수 없다면 -1 을 출력하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 교차로 개수 <em>N</em>, 골목 개수 <em>M,</em> 시작 교차로 번호 <em>A</em>, 도착 교차로 번호 <em>B</em>, 가진 돈 <em>C</em> 가 공백으로 구분되어 주어진다. 이어서 <em>M</em> 개의 줄에 걸쳐서 각 골목이 잇는 교차로 2개의 번호와, 골목의 수금액이&nbsp;공백으로 구분되어 주어진다. 같은 교차로를 잇는 골목은 최대 한 번만 주어지며, 골목은 양방향이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>호석이가 지키고 있는 골목들을 통해서 시작 교차로에서 도착 교차로까지 <em>C</em> 원 이하로 가는 경로들 중에, 지나는 골목의 요금의&nbsp;최댓값의 최솟값을 출력하라. 만약 갈 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5 1 3 10
1 2 5
2 3 5
1 4 1
4 5 6
5 3 1
','5
','SHORTEST_PATH'),
                                                                                                                (12706,'BAEKJOON','https://www.acmicpc.net/problem/20183',20183,'골목 대장 호석 - 효율성 2','5초','512 MB',14,'<p>소싯적 호석이는 골목 대장의 삶을 살았다. 호석이가 살던 마을은 <em>N</em> 개의 교차로와 <em>M</em> 개의 골목이 있었다. 교차로의 번호는 1번부터 <em>N&nbsp;</em>번까지로 표현한다.&nbsp;골목은 서로 다른 두 교차로를 양방향으로 이어주며 임의의 두 교차로를 잇는&nbsp;골목은 최대 한 개만 존재한다. 분신술을 쓰는 호석이는 모든 골목에 자신의 분신을 두었고, 골목마다 통과하는 사람에게 수금할 것이다. 수금하는 요금은 골목마다 다를 수 있다.</p>

<p>당신은 <em>A&nbsp;</em>번 교차로에서 <em>B&nbsp;</em>번 교차로까지 <em>C&nbsp;</em>원을 가지고 가려고 한다. 호석이의 횡포를 보며 짜증은 나지만, 분신술을 이겨낼 방법이 없어서 돈을 내고 가려고 한다. 하지만 이왕 지나갈 거면, 최소한의 수치심을 받고 싶다. 당신이 받는 수치심은&nbsp;경로 상에서 가장 많이 낸 돈에 비례하기 때문에, 결국 갈 수 있는 다양한 방법들 중에서 최소한의 수치심을 받으려고&nbsp;한다. 즉, 한 골목에서 내야 하는 최대 요금을 최소화하는 것이다.</p>

<p style="text-align: center;"><img alt="" src="https://i.imgur.com/72X0NKv.png" style="width: 390px; height: 293.333px;"></p>

<p>예를 들어, 위의 그림과 같이 5개의 교차로와 5개의 골목이 있으며, 당신이 1번 교차로에서 3번 교차로로 가고 싶은 상황이라고 하자. 만약 10원을 들고 출발한다면 2가지 경로로 갈 수 있다. 1번 -> 2번 -> 3번 교차로로 이동하게 되면 총 10원이 필요하고 이 과정에서 최대 수금액을 5원이었고, 1번 -> 4번 -> 5번 -> 3번 교차로로 이동하게 되면 총 8원이 필요하며 최대 수금액은 6원이 된다. 최소한의 수치심을 얻는 경로는 최대 수금액이 5인 경로이다. 하지만 만약 8원밖에 없다면, 전자의 경로는 갈 수 없기 때문에 최대 수금액이 6원인 경로로 가야 하는 것이 최선이다.</p>

<p>당신은 앞선 예제를 통해서, 수치심을 줄이고 싶을 수록 같거나 더 많은 돈이 필요하고, 수치심을 더 받는 것을 감수하면 같거나 더 적은 돈이 필요하게 된다는 것을 알게 되었다. 마을의 지도와 골목마다 존재하는 호석이가 수금하는 금액을 안다면, 당신이 한 골목에서 내야하는 최대 요금의 최솟값을 계산하자. 만약 지금 가진 돈으로는 절대로 목표 지점을 갈 수 없다면 -1 을 출력하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 줄에 교차로 개수 <em>N</em>, 골목 개수 <em>M,</em> 시작 교차로 번호 <em>A</em>, 도착 교차로 번호 <em>B</em>, 가진 돈 <em>C</em> 가 공백으로 구분되어 주어진다. 이어서 <em>M</em> 개의 줄에 걸쳐서 각 골목이 잇는 교차로 2개의 번호와, 골목의 수금액이&nbsp;공백으로 구분되어 주어진다. 같은 교차로를 잇는 골목은 최대 한 번만 주어지며, 골목은 양방향이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>호석이가 지키고 있는 골목들을 통해서 시작 교차로에서 도착 교차로까지 <em>C</em> 원 이하로 가는 경로들 중에, 지나는 골목의 요금의&nbsp;최댓값의 최솟값을 출력하라. 만약 갈 수 없다면 -1을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5 1 3 10
1 2 5
2 3 5
1 4 1
4 5 6
5 3 1
','5
','SHORTEST_PATH'),
                                                                                                                (12716,'BAEKJOON','https://www.acmicpc.net/problem/20313',20313,'출퇴근','1초','1024 MB',13,'<p>윤이는 유니마을에 거주하는 주민이다. 유니마을은 $1$번부터 $N$번까지 번호가 붙은 $N$개의 건물로 이루어져 있다. 윤이는 그 중 $A$번 건물에 거주하고 있으며, $B$번 건물에 있는 회사로 매일 출퇴근한다.</p>

<p>유니마을은 다음과 같은 구조를 가지고 있다. $N$개의 건물을 잇는 $M$개의 양방향 도로 $R_i$가 있고, 적절한 순서로 도로를 이용하면 임의의 두 건물 사이에 이동이 가능하다. 도로 $R_i$는 서로 다른 $U_i$번 건물과 $V_i$번 건물을 이으며, $R_i$를 거쳐 이동하는 데에는 $T_i$ 만큼의 시간이 소요된다. 한 쌍의 건물을 직접 잇는 도로는 최대 하나이다.</p>

<p>그러던 어느 날, 윤이는 자신이 마법을 쓰면 교통 상황을 바꾸어서 각 도로들을 이동하는데 소모되는 시간을 바꿀 수 있음을 알게 되었다. 윤이는 최대 $K$번 마법을 쓸 수 있는데, 마법을 $k$번&nbsp;사용하고 나면 모든 $i$에 대해 도로 $R_i$를 이동하는 데 걸리는 시간이 $T_{i, k}$가 된다고 한다. 윤이는 건물에 있을 때만 마법을 사용할 수 있고, 도로를 지나가는 중에 마법을 사용할 수는 없다.</p>

<p>윤이는 마법을 적절히 활용해서 최단 시간으로 회사까지 도착하고자 한다. 윤이를 도와 회사까지 도착하는 데 필요한 최단 시간을 구하시오.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 줄에 $N$과 $M$, 그리고 $A$와 $B$가 주어진다.</p>

<p>다음 $M$개의 줄에 걸쳐 $U_i, V_i, T_i$의 값이 공백을 사이에 두고 주어진다. $(1 \le i \le M)$</p>

<p>다음 줄에 $K$가 주어진다.</p>

<p>다음 $K$개 줄의 $k$번째 줄에는 $T_{1, k}, T_{2, k}, \cdots, T_{M, k}$가 사이에 공백을 두고 주어진다. $(1 \le k \le K)$</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>윤이가 마법을 적절히 활용했을 때 회사까지 도착하는데 걸리는 최단 시간을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','2 1 2 1
2 1 5
0
','5
','SHORTEST_PATH'),
                                                                                                                (12726,'BAEKJOON','https://www.acmicpc.net/problem/20421',20421,'화살표 미로 (Hard)','3초','512 MB',18,'<p><u><strong>입력 제한 외 난이도에 따른 문제의 차이는 없다.</strong></u></p>

<p>민규는 25년간의 외로운 수련 끝에 드디어 마법사가 되었다. 마법사가 된 민규에게는 꿈이 있었으니.. 마법같이 멋진 테마파크를 짓는 것이었다! 민규는 테마파크의 첫 상품으로 "화살표 미로"를 공개했다.</p>

<p>화살표 미로는 평범한 미로와 다른 점이 많다. 이 미로는 R×C 개의 방으로 이루어져 있다. 모든 방이 서로 이동할 수 없도록 사방이 벽으로 막혀있고, 각 방마다 완전히 다른 테마의 화려한 볼거리로 꾸며져 있다.</p>

<p><img alt="화살표 미로 지도" src="https://upload.acmicpc.net/72b9fd07-3d6e-48b6-8d83-fc3b1e3133ea/-/preview/" style="width: 50%"></p>

<p><그림 1> 화살표 미로의 지도 (예제1)</p>

<p>사방이 벽으로 막혀있다면 어떻게 다른 방으로 이동할 수 있을까? 민규는 각 방마다 특별한 마법진을 그려 각 마법진에 그려져 있는 화살표의 방향으로 <strong>한 칸</strong> 순간이동 할 수 있도록 설계했다! 미로의 가장 바깥벽은 마그마로 둘러싸여 있어, <strong>미로를 둘러싸고 있는 가장 바깥벽을 넘어가 미로 자체를 탈출하지는 못한다</strong>.</p>

<p>화살표 미로를 이용하는 고객들은 미로의 가장 왼쪽 위인 (1,1)방에 있는 입구에서 시작해 다양한 방들을 경험하고, 미로의 가장 오른쪽 아래인 (R,C)방에 있는 출구를 끝으로 미로를 마쳐야한다. 만약 그러지 못한다면 영원히 화살표 미로를 헤매게 될 것이다! 당연하지만, 처음 민규가 그려둔 마법진의 화살표 방향에 따라 출구에 가지 못할 수 있다.</p>

<p>민규는 화살표 미로를 사람들이 안전하게 즐길 수 있도록 화살표 미로의 입구에서 특별한 주문서를 팔기로 했다. 주문서는 화살표를 반시계 방향으로 회전시키는 L 주문서와 시계 방향으로 회전시키는 R 주문서 두 종류가 있다. 이 주문서를 사용하면 해당 방향으로 화살표가 90도 회전하게 된다. 몇 장의 주문서를 한 마법진에 연달아 사용해 180도, 270도 회전하도록 만들 수도 있다. <strong>민규는 수익을 극대화 하기 위해 L 주문서와 R 주문서를 각각 한 장씩 묶어 한 세트로만 팔고 있다.</strong></p>

<p>화살표 미로를 이용하는 고객들은 미로에 입장하고서야 지도를 받을 수 있어, 화살표 미로에서 영원히 헤매지 않으려면 울며 겨자 먹기로 대량의 주문서 세트를 구매해야만 했다. 화살표 미로를 즐겨 이용하던 민규의 친구 준서도 이런 불편을 겪고 있었다.</p>

<blockquote>
<p>준서 : 아니, 적어도 지금 가진 걸론 충분한지 아닌지는 말해 줘야 하는 거 아니야 ??</p>
</blockquote>

<p>준서의 불평에 지친 민규는 특별히 준서에게만, <strong>준서가 가지고 있는 주문서 세트로 출구까지 가는 데 충분하냐</strong>는 질문에 단 한 번 "<code>Yes</code>" 또는 "<code>No</code>"로 대답해주기로 했다. 정확하게 답해주는 것은 민규에게 매우 어려운 일이기 때문에, 민규는 당신에게 질문에 대신 답해주는 프로그램을 의뢰했다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫번째 줄에는 미로의 행 <em>R</em>, 열 <em>C</em>, 준서가 가진 주문서 세트의 개수 <em>K</em>가 주어진다.</p>

<p>두번째 줄부터 <em>R</em>줄에 걸쳐 화살표 미로의 지도가 입력된다. 각 줄마다 "<code>UDLR</code>"로만 이루어진 길이 <em>C</em>의 문자열이 입력되며, <code>U</code>는 위, <code>D</code>는 아래, <code>L</code>은 왼쪽, <code>R</code>은 오른쪽으로 이동 가능한 마법진을 뜻한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>준서의 질문에 대한 답을 "<code>Yes</code>" 또는 "<code>No</code>"로 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3 3 1
RDR
URU
UDR
','Yes
','SHORTEST_PATH'),
                                                                                                                (12729,'BAEKJOON','https://www.acmicpc.net/problem/20445',20445,'구간 겹치기','1초','1024 MB',17,'<p><em>n</em>개의 구간이 주어진다. 하나의 구간은 두 정수 <em>s</em>, <em>e</em>로 표현되며, 이는 수직선 상에서 [<em>s</em>, <em>e</em>]를 모두 덮고 있다는 뜻이다.</p>

<p>다음은 <em>q</em>개의 쿼리가 주어진다. 하나의 쿼리는 두 정수 <em>a</em>, <em>b</em>로 표현되며, 수직선 상에서 [<em>a</em>, <em>b</em>]가 모두 덮어질 수 있도록 하나 이상의 구간을 선택하였을 때의 최소 비용을 출력하라는 뜻이다.</p>

<p>비용은 선택한 구간의 각 길이의 합으로 계산한다. 구간의 길이는 구간이 덮고 있는 정수의 개수다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째&nbsp;줄에 구간의 개수 <em>n</em>(1 ≤&nbsp;<em>n</em> ≤&nbsp;100), 쿼리의 개수 <em>q</em>(1 ≤&nbsp;<em>q</em> ≤&nbsp;111,222)가 공백을 사이에 두고 주어진다.</p>

<p>다음 <em>n</em>개의 줄에&nbsp;구간의 정보(<em>s</em>, <em>e</em>)가 한 줄에 하나씩 주어진다. (-10<sup>9</sup> ≤&nbsp;<em>s</em> < <em>e</em> ≤&nbsp;10<sup>9</sup>)</p>

<p>다음 <em>q</em>개의 줄에&nbsp;쿼리의 정보(<i>a</i>, <em>b</em>)가 한 줄에 하나씩 주어진다. (-10<sup>9</sup> ≤ <i>a</i>&nbsp;< <i>b</i>&nbsp;≤&nbsp;10<sup>9</sup>)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>쿼리의 정답을 한 줄에 하나씩 순서대로 출력한다. 불가능할 경우&nbsp;-1을&nbsp;출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>빠른 입출력을 사용하도록 하자.</p>

				</div>
				</div>','3 3
1 3
3 10
4 8
1 7
5 11
2 3
','11
-1
3
','SHORTEST_PATH'),
                                                                                                                (8119,'BAEKJOON','https://www.acmicpc.net/problem/20536',20536,'남부순환로','5초','1536 MB',27,'<p>서울의 남부를 잇는 <em>남부순환로</em>&nbsp;는 $N$ 개의 크기가 같은 <em>블록</em>&nbsp;으로 나눌 수 있다. $i$번 블록 ($1 \leq i \leq N$)의 왼쪽에는 $i - 1$ 번 블록이 존재하며 ($i = 1$ 일 때를 제외), 오른쪽에는 $i + 1$ 번 블록이 존재한다 ($i = N$ 일 때를 제외). 이름이 순환로이지만, $N$ 번 블록의 오른쪽에 $1$ 번 블록이 인접하지 않음에 유의하라.</p>

<p>남부순환로에는 가로등이 전혀 설치되어 있지 않아서, 밤이 되면 어둡고 이상한 기운이 도는 것으로 악명이 높다. 이 문제를 해결하기 위해, 남부순환로1119길 주민 김준원은 몇 개의 블록에 가로등을 설치하기로 했다.&nbsp;</p>

<p>가로등을 설치할 때, 김준원은 $N$ 개의 블록에 대해서 하나의 가로등을 설치할지 말지를 결정한다. 만약 $i$ 번 블록에 가로등을 설치하기로 결정하였다면, 김준원은 $W_i$ 의 비용을 들여 가로등을 설치한다. 설치하지 않기로 결정하였다면, 비용이 부과되지 않는다. 작업이 끝난 이후, 모든 블록은 가로등이 설치되어 있거나, 왼쪽 / 오른쪽에 인접한 블록에 가로등이 설치되어 있어야 한다. 작업의 <em>전체 비용</em>&nbsp;은 각 가로등을 설치하는 데 든 비용의 합이다.&nbsp;</p>

<p>김준원이 위 조건을 만족시키면서 가로등을 설치하는 모든 경우를 생각해 보자. 두 경우가 다르다는 것은 어떠한 블록 $1 \le i \le N$ 이 존재하여 한 경우에는 $i$ 번 블록에 가로등이 있고, 다른 경우에는 가로등이 없음을 뜻한다. (즉, 자신 또는 인접한 블록에 가로등이 설치되어 있어야 한다는 조건을 무시하면 모든 경우는 $2^N$ 가지가 있다.) 이 모든 경우를 전체 비용이 감소하지 않는 순서대로 정렬하였을 때, 모든 $1 \le i \le K$ 에 대해, 정렬된 배열의 $i$ 번째 원소의 전체 비용들을 모두 출력하라. 만약 경우의 수가 $i$ 미만이라면,&nbsp;-1을 출력하라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 두 정수 $N, K$가 공백으로 구분되어 주어진다. ($1 \le N, K \le 250\,000$)</p>

<p>두 번째 줄에 $N$ 개의 정수 $W_1, W_2 \cdots W_N$가 공백으로 구분되어 주어진다. $W_i$ 는 $i$번 블록에 가로등을 설치하는 데 필요한 비용이다. ($0 \leq W_i \leq 10^9$)</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>$K$ 개의 줄을 출력한다. 이 중 $i$ 번째 줄에는, 정렬된 배열의 $i$ 번째 원소의 전체 비용을 출력하라. 만약 경우의 수가 $i$ 미만이라면,&nbsp;-1을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 3
1 3 10 3 1
','4
4
5
','SHORTEST_PATH'),
                                                                                                                (5639,'BAEKJOON','https://www.acmicpc.net/problem/20547',20547,'신입생 청원이','2초','512 MB',16,'<p dir="ltr">CTP대학교 신입생 청원이는 최대한 많은 시간 동안 교수님들의 수업을 강의실에서 들어보고 싶은 로망이 있었다. 그래서 청원이는 우선 오늘 하루 동안의 CTP대학교의 시간표를 확인하고 최대한 많은 시간 동안 강의를 듣고자 한다. 청원이가 확인한 시간표에는 오늘 수강할 수 있는 $N$개의 강의와 $M$개의 강의실 이동 시간 목록에 대한 정보가 적혀 있다. 각 강의는 이름, 시작 시간 그리고 끝나는 시간이 적혀있고, 강의실 이동 시간 목록에는 서로 다른 두 강의실의 이름과 둘 사이의 이동 소요 시간이 적혀 있다.&nbsp;모든 강의는 서로 다른 강의실에서 열리지만, 시간이 겹치는 것들이 존재한다. 강의실은 강의 시작 시간, 끝나는 시간에 상관없이 들어가고 나올 수 있으며 강의실에 지각해도 해당 강의의 남은 강의 시간에 대해서 강의를 들을 수 있다. 청원이는 강의 시작 시간이 가장 빠른 강의실에 해당 강의 시작 전에 미리 앉아있다. 단, 시작 시간이 같은 강의가 존재한다면, 이름이 사전 순으로 빠른 강의실에 앉아있다. 청원이는 강의 시간 계산을 깔끔하게 하기 위해서 분 단위로만 강의실을 이동한다. 예를 들어, 5시 10분부터 5시 20분까지 강의가 진행중인 강의실에 있었다면 10분 동안 강의를 들은 것이다. 청원이는 강의실을 이동할 때, 이동하고자 하는 강의실까지&nbsp;이동시간을 알고있는 경우에만 이동할 수 있다. 단, 다른 강의실을 거쳐 가는 것은 가능하다.&nbsp;오늘 하루 청원이가 최대한 많은 시간의 강의를 들을 수 있도록 도와주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에는 청원이가 오늘 하루 동안 듣고 싶은 강의의 개수 $N$, 청원이가 알고 있는 강의실 이동 시간 소요 목록의 개수$M$이 공백으로 구분되어 주어진다.</p>

<p>그 다음 줄 부터 $N$개의 줄에 대해서 강의 이름 $S$, 시작시간&nbsp;$X$,&nbsp;끝나는 시간 $Y$가&nbsp;공백으로 구분되어 주어진다.</p>

<p>$X$와&nbsp;$Y$는 각각&nbsp;HH:mm 형태로 주어진다. (오전 3시 3분인 경우&nbsp;03:03으로 주어진다, 오후 11시 11분인 경우 23:11으로 주어진다.)</p>

<p>그 다음 줄 부터 $M$개의 줄에 대해서 강의 이름 $A$, 강의 이름 $B$, $A$&nbsp;와 $B$&nbsp;강의실 이동 간 소요되는 시간 $Z$가 공백으로 구분되어 주어진다.</p>

<p>$Z$는 $X$,$Y$ 양방향에 대한 이동시간 정보이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>청원이가 오늘 하루 들을 수 있는 최대한의 강의 시간의 총 시간을 HH:mm&nbsp;형태로 출력한다.</p>

<p>(예를 들어, 최대 7시간을 강의에 참여할 수 있다면 07:00로, 최대 12시간 12분를 강의에 참여할 수 있다면 12:12으로 출력한다.)</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 5
hightech 10:00 10:50
leehogwan 11:00 11:50
ohogwan 11:50 13:00
jeongsuck 13:00 14:00
hightech leehogwan 00:03
hightech jeongsuck 00:12
hightech ohogwan 00:03
leehogwan jeongsuck 00:10
ohogwan jeongsuck 00:03
','03:41
','SHORTEST_PATH'),
                                                                                                                (12739,'BAEKJOON','https://www.acmicpc.net/problem/20549',20549,'인덕이의 고민','2초','256 MB',15,'<p>오리를 좋아하는 인덕이는 오리를 바라보며 마음의 안식을 얻는다. 오리는<em> N×N</em>의 정사각형 모양으로 이루어진 인경호에서 유유자적하게 헤엄을 친다. 인경호는 1×1 크기의 칸으로 나누어져 있다.</p>

<p>각각의 칸은 (<em>X, Y</em>)로 나타내며, <em>X</em>는&nbsp;가장 위에서부터 떨어진 칸의 개수, <em>Y</em>는&nbsp;가장 왼쪽으로부터 떨어진 칸의 개수이다. X와&nbsp;Y는 0부터 시작한다.&nbsp;</p>

<p>그런 인덕이에게 요즘 큰 고민이 생겼다. 기껏 먹이를 주어도 먹이가 떠내려가서 오리가 다 먹지 못하기 때문이다.</p>

<p>고민하던 인덕이는 1학년 때&nbsp;배웠던 생명과학 과목의 내용을 활용하면 오리의 유전자에 변형을 가하여 원하는 대로 이동시킬 수 있다는 것을 알게 되었다.</p>

<p>단, 너무 오래전에 들은 과목이기 때문에, 이 방법은 아래와 같은 제한사항이 붙는다.</p>

<ul>
	<li>체스에서 각각 <strong>나이트</strong>, <strong>비숍</strong>, <strong>룩</strong>이 이동하는 방향으로만 이동시킬 수 있고, 도착 지점에 먹이가 있으면 그 지점에 있는&nbsp;먹이를 먹는다. 오리는 인경호 바깥으로 이동할 수 없다.</li>
	<li>한 번의 변형에서 이동 명령에 따라 오리의 유전자는&nbsp;과부하를&nbsp;받고,&nbsp;한번 이동하고 나면 변형이 풀린다.</li>
</ul>

<p>오리가 <strong>과부하</strong>를 많이 받으면 인덕이도 슬퍼한다.</p>

<p>오리가 모든 먹이를 먹으면서 가장<strong> 과부하</strong>를 적게 받게 만들어서 인덕이의 고민을 덜어주자!</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에&nbsp;인경호의 가로, 세로 크기&nbsp;<em>N(</em>3&nbsp;<em>≤&nbsp;N&nbsp;≤&nbsp;</em>50<em>)</em>이 주어진다.</p>

<p>두 번째 줄에 오리를 각각 <strong>나이트,&nbsp; 비숍, 룩</strong>이 갈 수 있는 이동으로 이동시킬 때, 오리가 받는 <strong>과부하</strong>의 양&nbsp;<em>A</em>, <em>B</em>, <em>C (</em>1<i> </i>≤<em> A, B, C&nbsp;</em> ≤<em>&nbsp;</em>50<em>)</em>이&nbsp;차례대로 주어진다.</p>

<p>세 번째 줄에는 오리의 시작&nbsp;위치의 x좌표, y좌표에 해당하는 <em>X</em>,<em>Y(</em>0 ≤&nbsp;<em>X, Y&nbsp;</em>≤ N-1<em>)</em>가 주어진다.</p>

<p>그 다음줄에 먹이의 수 <em>M(</em>1 ≤&nbsp;<em>M&nbsp;</em>≤<em> </em>4<em>)</em>이 주어진다</p>

<p><em>M</em>줄에 걸쳐서 먹이의 x좌표, y좌표에 해당하는&nbsp;<em>X<sub>i</sub>, Y<sub>i</sub>&nbsp;(</em>0<i> </i>≤&nbsp;<em>X<sub>i</sub>, Y<sub>i&nbsp;</sub></em>≤&nbsp;<em>N </em>-1<em>)&nbsp;</em>가&nbsp;차례대로 주어진다.</p>

<p>오리의 시작위치와 각 먹이의 좌표는 전부 서로 다르게 주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>유전자 변형을 이용해서 오리가 주어진 먹이를 모두 먹게 되었을 때 오리가 받는 과부하의 총합의 최소를 출력하자.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p><strong>나이트</strong>, <strong>비숍</strong>, <strong>룩</strong>이 한번의 이동으로 도달할 수 있는 칸은 각각 다음과 같다.</p>

<p><img alt="" src="https://upload.acmicpc.net/6c3ac847-3c5a-432c-b9ce-b60b64dac98d/-/preview/" style="width: 301px; height: 300px;"></p>

<p><br>
<img alt="" src="https://upload.acmicpc.net/cef86704-40b4-4df2-aa49-1e7beed434e2/-/preview/" style="height: 300px; width: 300px;"></p>

<p><br>
<img alt="" src="https://upload.acmicpc.net/75825a8c-6d71-4fa9-b1c3-b855b731e1fe/-/preview/" style="width: 300px; height: 300px;"></p>

<p>그림 출처 : 위키백과(<a href="https://ko.wikipedia.org/wiki/%EB%A3%A9_(%EC%B2%B4%EC%8A%A4)">https://ko.wikipedia.org/wiki/%EB%A3%A9_(%EC%B2%B4%EC%8A%A4)</a></p>

<p><br>
위 예시는 <em>N</em>이 8일때의 예시이며, N의 크기가 증가하거나 감소함에따라 <strong>룩</strong>이나 <strong>비숍</strong>이 도달 할 수 있는 칸도 증가하거나 감소한다.</p>

				</div>
				</div>','5
1 2 3
0 0
3
0 3
1 1
3 3
','5
','SHORTEST_PATH'),
                                                                                                                (12753,'BAEKJOON','https://www.acmicpc.net/problem/20668',20668,'카트라이더','1초','512 MB',14,'<p>카트라이더는 플레이어가 주어진 맵에서 차를 타고 출발 지점에서 시작해 경로를 따라 목적지까지 최대한 빨리 도착하는 것이&nbsp;목표인 게임이다.</p>

<p>이때 맵에는 다양한 지름길이 존재하여 목적지까지 갈 수 있는 방법은 다양하다.</p>

<p>카트라이더의 맵은 다음과 같은 무방향 가중 그래프로 나타낼 수 있다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/66acc209-9c1e-4a92-a63c-366bfb71b9d8/-/preview/" style="width: 341.667px; height: 127.5px;"></p>

<p style="text-align: center;"><그림 1> 예제 입력1 예시</p>

<p>카트라이더는 레이싱 게임이기 때문에 플레이어는 일정 속도로 이동한다.</p>

<p>플레이어는 1의 속도로 출발지에서 생성되고, 출발지를 포함한 모든 정점을 방문할 때마다 속도를 1 증가, 1 감소, 또는 그대로 유지할 수 있다. 시작 직후 출발지에서 속도를 올리는 것도 가능하다.</p>

<p>속도는 1 미만으로 내려갈 수 없다.</p>

<p>정점 사이의 간선은 길을 뜻하고, 간선은 길이와 속도 제한을 가진다.</p>

<p>간선을 통과할 때에는 길이를 속도로 나눈 만큼의 시간이 소모된다.</p>

<p>길의 코스가 어려운 구간에서는 속도가 빠르면 벽에 충돌할 수 있기 때문에 속도 제한을 넘긴 상태일 때에는 그 길을 사용할 수 없다.</p>

<p>카트라이더 맵이 주어졌을 때 출발 지점에서 목적지까지 이동할 때 걸리는 최단 시간을 구하여라.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫번째 줄에는 정점의 개수 <em>N</em> 과 간선의 개수 <em>M</em> 이 차례로 주어진다. (2 ≤&nbsp;<em>N</em> ≤&nbsp;10,000, 1 ≤&nbsp;<em>M</em> ≤&nbsp;100,000)</p>

<p>다음 <em>M&nbsp;</em>개의 줄에는 각 간선의 정보인 4개의 정수가 주어진다.</p>

<p>간선이 연결하는 정점 <em>A</em>, 정점 <em>B</em>, 간선의 길이 <em>L</em>, 속도 제한 <em>K</em> 가 차례로 주어진다. (1 <= <em>A, B</em> <= <em>N,&nbsp;</em>1 <= <em>L</em> <= 100,000, 1 <= <em>K</em> <= 10)</p>

<p>1번 정점은 출발지이고, <em>N&nbsp;</em>번 정점은 목적지이다.</p>

<p>입력으로 주어진 그래프는 출발지에서 목적지까지 이동할 수 있는 경로가 항상 존재한다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>출발지에서 목적지까지 이동하는데&nbsp;필요한 최소 시간을 출력해라.</p>

<p>출력 값은 정확히 <strong>소수점 9자리까지 반올림하여 출력</strong>해야 한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">
				<p>double, long double 등의 실수형을 사용하여 출력할 경우 유효 숫자 범위로 인해 틀릴 수 있다.</p>

				</div>
				</div>','3 3
1 2 2 3
2 3 6 3
1 3 7 3
','3.000000000
','SHORTEST_PATH'),
                                                                                                                (12763,'BAEKJOON','https://www.acmicpc.net/problem/20926',20926,'얼음 미로','1초(추가시간없음)','1024 MB',14,'<p style="text-align: center;"><img alt="" height="250px" src="https://upload.acmicpc.net/5fa6f462-a6c2-4dff-a2e7-a1ce6d9d0541/-/preview/"></p>

<p>탐험가 테라는 얼음 미로에 갇혔다. 얼음 미로의 바닥은 빙판으로 되어 있어 발을 내디디면 바위에 부딪힐 때까지 미끄러진다. 예를 들어, 위 그림에서 테라가 왼쪽 방향으로 이동한다면 중간에 멈출 수 없고&nbsp;왼쪽 바위에 부딪힐 때까지 미끄러진다. 얼음 미로 바깥은 절벽이기 때문에 빠지면 탈출할 수 없다.</p>

<p>얼음 미로에는 $4$가지 오브젝트가 있다.</p>

<ol>
	<li><img alt="" height="32px" src="https://upload.acmicpc.net/1727be99-41c5-41d1-8f49-85745820114a/-/preview/">&nbsp; 테라 : 얼음 미로에 갇힌 탐험가. 상하좌우 $4$방향으로 이동할 수 있다. 얼음 미로에 단 $1$명의 테라만 존재한다.&nbsp;테라가 최초 위치한 빙판의 <strong>미끌 시간</strong>은 $0$이다.</li>
	<li><img alt="" height="32px" src="https://upload.acmicpc.net/1019dc88-5904-48c4-8db5-748efaa17076/-/preview/">&nbsp; 바위 : 통과할 수 없다. 미끄러지다 부딪히면 앞에서 멈춘다.</li>
	<li><img alt="" height="32px" src="https://upload.acmicpc.net/2fb7171d-22a1-4bae-82a1-241738606465/-/preview/">&nbsp; 구멍 : 이곳에 빠지면 영영 탈출할 수 없다.</li>
	<li><img alt="" height="32px" src="https://upload.acmicpc.net/ed684f4e-0a35-4ffc-a961-5d9a1efdee96/-/preview/">&nbsp; 출구 : 이곳에 방문하는 즉시&nbsp;얼음 미로를 탈출한다. 얼음 미로에 단 $1$개의 출구만 존재한다.</li>
</ol>

<p>어떤 빙판 위에서 미끄러지는 데 걸리는 시간을 <strong>미끌 시간</strong>이라고 하자. 각 빙판마다 <strong>미끌 시간</strong>은 다를 수 있다.</p>

<p>테라가 어느 한쪽 방향으로 이동할 때, 테라가 미끄러지는 동안&nbsp;위치한 빙판의 <strong>미끌 시간</strong>을 더하면 이동 시간을 구할 수 있다. 단, 이동 시간 계산과 관련하여 두 가지 규칙이 있다.</p>

<p style="text-align: center;"><img alt="" height="252px" src="https://upload.acmicpc.net/4675606f-626c-453f-8e83-c562190177bf/-/preview/"></p>

<ul>
	<li>테라가 어느 한쪽 방향으로 이동을 시작할 때, 시작 빙판의 <strong>미끌 시간</strong>은 포함하지 않는다.</li>
	<li>테라가 출구로 들어갈 때,&nbsp;출구 빙판의 <strong>미끌 시간</strong>은 포함하지 않는다.</li>
</ul>

<p>위&nbsp;그림에서 테라가 위로 이동할 때의 이동 시간을 계산하자. 테라가 현재 서 있는, 시작 빙판의 <strong>미끌 시간</strong> $4$와&nbsp;출구 빙판의 <strong>미끌 시간</strong> $0$을&nbsp;제외하면 $1 + 2 = 3$ 만큼의 시간이 걸린 뒤&nbsp;출구를 통해 탈출함을 알 수 있다.</p>

<p>저체온증이 시작된 테라는 얼음 미로를 가능한 한 빨리 탈출하고 싶다.&nbsp;얼음 미로를 탈출하는 데 걸리는 최단 시간을 계산하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 얼음 미로의 가로 크기를 나타내는 정수 $W$($2 \le W \le 500$), 세로 크기를 나타내는 정수 $H$($2 \le H&nbsp;\le 500$)가 주어진다.</p>

<p>두 번째 줄부터 $H$개의&nbsp;줄에 걸쳐 얼음 미로에 대한 정보가 주어진다.</p>

<p>테라는 <span data-darkreader-inline-color="" style="color: rgb(231, 76, 60); --darkreader-inline-color:#e95849;"><code>T</code></span>, 바위는 <span data-darkreader-inline-color="" style="color: rgb(231, 76, 60); --darkreader-inline-color:#e95849;"><code>R</code></span>, 구멍은 <span data-darkreader-inline-color="" style="color: rgb(231, 76, 60); --darkreader-inline-color:#e95849;"><code>H</code></span>, 출구는 <span data-darkreader-inline-color="" style="color: rgb(231, 76, 60); --darkreader-inline-color:#e95849;"><code>E</code></span>로 나타낸다.</p>

<p>빙판의 <strong>미끌 시간</strong> $t$는 $0$ 이상 $9$ 이하의 정수로 나타낸다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>얼음 미로를 탈출할 수 있다면 최단 탈출 시간을 출력한다.</p>

<p>얼음 미로를 탈출할 수 없다면 <span data-darkreader-inline-color="" style="color: rgb(231, 76, 60); --darkreader-inline-color:#e95849;"><code>-1</code></span>을&nbsp;출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
2E115
32411
11313
R42TH
124R6
','9
','SHORTEST_PATH'),
                                                                                                                (10120,'BAEKJOON','https://www.acmicpc.net/problem/21278',21278,'호석이 두 마리 치킨','1초','512 MB',11,'<p>컴공 출신은 치킨집을 하게 되어있다. 현실을 부정하지 말고 받아들이면 마음이 편하다. 결국 호석이도 2050년에는 치킨집을 하고 있다. 치킨집 이름은 "호석이 두마리 치킨"이다.</p>

<p>이번에 키친 도시로 분점을 확보하게 된 호석이 두마리 치킨은 도시 안에 2개의 매장을 지으려고 한다. 도시는 <em>N</em> 개의 건물과 <em>M</em> 개의 도로로 이루어져 있다. 건물은 1번부터 <em>N</em>번의 번호를 가지고 있다.&nbsp;i 번째&nbsp;도로는 서로 다른 두 건물 <em>A<sub>i&nbsp;</sub></em>번과&nbsp;<em>B<sub>i</sub></em>&nbsp;번 사이를&nbsp;1 시간에 양방향으로&nbsp;이동할 수 있는 도로이다.</p>

<p>키친 도시에서 2개의 건물을 골라서 치킨집을 열려고 한다. 이 때 아무 곳이나 열 순 없어서 모든 건물에서의 접근성의 합을 최소화하려고 한다. 건물 <em>X</em> 의 접근성은 <em>X</em> 에서 가장 가까운 호석이 두마리 치킨집까지 왕복하는 최단 시간이다. 즉, "모든 건물에서 가장 가까운 치킨집까지 왕복하는&nbsp;최단 시간의 총합"을 최소화할 수 있는 건물 2개를 골라서 치킨집을 열려고 하는 것이다.</p>

<p>컴공을 졸업한 지 30년이 넘어가는 호석이는 이제 코딩으로 이 문제를 해결할 줄 모른다. 알고리즘&nbsp;퇴물 호석이를 위해서 최적의 위치가 될 수 있는 건물 2개의 번호와 그 때의 "모든 건물에서 가장 가까운 치킨집까지 왕복하는 최단 시간의 총합"을 출력하자. 만약 이러한 건물 조합이&nbsp;여러 개라면, 건물 번호 중 작은 게 더 작을수록, 작은 번호가 같다면 큰 번호가 더 작을수록 좋은 건물 조합이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 건물의 개수 <em>N</em>과 도로의 개수 <em>M</em> 이 주어진다. 이어서 <em>M</em> 개의 줄에 걸쳐서 도로의 정보 <em>A<sub>i&nbsp;</sub>, B<sub>i</sub></em> 가 공백으로 나뉘어서 주어진다. 같은 도로가 중복되어 주어지는 경우는 없다. 어떤 두 건물을 잡아도&nbsp;도로를 따라서 오고 가는 방법이 존재함이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>한 줄에 건물 2개가 지어질 건물&nbsp;번호를 오름차순으로 출력하고, 그때 모든 도시에서의 왕복 시간의 합을 출력한다.</p>

<p>만약 건물 조합이 다양하게 가능하면, 작은 번호가 더 작은 것을, 작은 번호가 같다면 큰 번호가 더 작은 걸 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 4
1 3
4 2
2 5
3 2
','1 2 6
','SHORTEST_PATH'),
                                                                                                                (12810,'BAEKJOON','https://www.acmicpc.net/problem/21731',21731,'메시라이브','12초(추가시간없음)','1536 MB',28,'<p>운전 브이로그를 찍어 큰 부와 명예를 얻은 메시는 라이브 방송에 도전하려고 한다.</p>

<p>인덱스국에는 $n$개의 도시가 있다. 메시가 방송을 켜는 도시는 $1$번 도시이고, 편집자가 사는 $n$번 도시로 영상을 전송하려고 한다. 인덱스국의 영토는 무한한 2차원 좌표평면이고, 각 도시는 무시할 수 있는 크기의 한 점으로 볼 수 있다. 메시는 원활한 통신을 위해 두 도시 사이를 잇는 양방향 유선 통신 회선 $m$개를 설치했다. 각 통신선은 두 도시를 양 끝점으로 하는 선분 형태로, 간섭을 방지하기 위해 서로 다른 두 통신선은 끝점 이외에 교차하지 않는다. $i$번 통신선은 최대 $w_{i}$bps로 데이터를 전송할 수 있다. 아래 그림은 가능한 통신 네트워크의 한 예이다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/b17a584a-8fd4-46db-b828-fd0713856ff4/-/preview/" style="width: 358.333px; height: 210.833px;"></p>

<p style="text-align: center;">각 원은 도시, 선분들은 통신선을 의미한다.<br>
&nbsp;</p>

<p>한 도시에 통신선을 통해 전달된 데이터는 바로 도시에 연결된 다른 통신선을 타고 흘러나갈 수 있다. 데이터가 통신선을 통해 전달되는 시간은 무시할 수 있을 정도로 짧다. $i$번 통신선을 통해 전달되는 단위 시간 당 데이터의 양은 용량을 넘을 수 없음에 주의하자. 아래 그림은 데이터가 전달되는 모습의 한 예로, $1$번 도시에서 $8$번 도시까지 25bps의 속도로 데이터가 전달되고 있다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/6b2ed121-3d34-4944-9f89-8f025097b80f/-/preview/" style="width: 358.333px; height: 214.167px;"></p>

<p style="text-align: center;">붉게 표시된 통신선은 데이터를 최대한으로 수송하고 있는 선들이다.</p>

<p>메시는 고화질 영상을 전송하기 위해, $1$번 도시에서 $n$번 도시로&nbsp;최대 몇 bps의 데이터를 전송할 수 있는지 여러분에게 물어보았다. 인플루언서 메시를 도와주어 부를 축적해보도록 하자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>입력의 첫 줄에 정수 $n, m$이 주어진다.</p>

<p>이후 $n$개의 줄에 걸쳐 $i$번 도시의 좌표를 나타내는 정수 $x_{i}, y_{i}$가 주어진다. $(1 \le i \le n)$</p>

<p>이후 $m$개의 줄에 걸쳐 $u_{j}, v_{j}, w_{j}$가 공백으로 구분되어 주어진다. $j$번 통신선은 $u_{j}, v_{j}$번 도시를 연결한다. $(1 \le j \le m)$</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫째 줄에 답을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','8 12
0 0
1 1
1 0
1 -1
2 1
2 0
2 -1
3 0
1 2 8
1 3 10
1 4 11
2 5 7
3 5 6
3 6 7
3 7 4
4 7 8
5 6 6
5 8 100
6 8 9
7 8 10
','25
','SHORTEST_PATH'),
                                                                                                                (12831,'BAEKJOON','https://www.acmicpc.net/problem/21940',21940,'가운데에서 만나기','1초','512 MB',12,'<p>준형이는 내일 친구들을&nbsp;만나기로 했다. 준형이와 친구들은 서로 다른 도시에 살고 있다.</p>

<p>도시를 연결하는 도로는 일방 통행만 있어서 도시 $A_{i}$에서 도시 $B_{i}$로 가는 시간과 도시 $B_{i}$에서 도시 $A_{i}$로 가는 시간이 다를 수 있다.</p>

<p>준형이와 친구들은 아래 조건을 만족하는&nbsp;도시 $X$를 선택하여 거기서 만나려고 한다.</p>

<ul>
	<li><strong>왕복시간</strong>은 자신이 살고 있는 도시에서 도시 $X$로 이동하는 시간과 도시 $X$에서 다시 자신이 살고 있는 도시로 이동하는 시간을 합한 것이다.</li>
	<li>준형이와 친구들이 도로를 이용하여 갈 수 있는 도시만 선택한다.</li>
	<li>준형이와 친구들의 <strong>왕복시간</strong> 들 중 최대가 최소가 되는 도시 $X$를 선택한다.</li>
	<li><strong>준형이와 친구들이 이동할 수 있는 도시가 최소한 하나 이상이 있음을 보장한다.</strong></li>
</ul>

<p>도시가 많다보니 계산하기 힘들다. 준형이와 친구들을 대신하여 도시 $X$를 알려주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에는 도시의 개수 $N$과 도로의 개수 $M$이 주어진다.</p>

<p>두 번째 줄부터 M + 1줄까지 도시 $A_{i}$, 도시 $B_{i}$, 도시 $A_{i}$에서 도시 $B_{i}$로 이동하는데 걸리는 시간 $T_{i}$가 공백으로 구분되어 주어진다.</p>

<p>$M + 2$줄에는 준형이와 친구들의 총 인원 $K$가 주어진다.</p>

<p>$M + 3$줄에는 준형이와 친구들이 살고 있는 도시의 번호 $C_{i}$가 공백으로 구분되어&nbsp;주어진다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>위 조건을 만족하는 도시 $X$의 번호를 출력한다. 만약 가능한 도시 $X$가 여러 개인 경우는 도시의 번호를 오름차순으로 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4 9
1 2 9
2 3 9
3 1 9
1 4 1
4 1 1
2 4 1
4 2 1
3 4 1
4 3 1
3
1 2 3
','4
','SHORTEST_PATH'),
                                                                                                                (12836,'BAEKJOON','https://www.acmicpc.net/problem/22116',22116,'창영이와 퇴근','2초','512 MB',12,'<p>창영이의 퇴근길은 출근길과 조금 다르다. 창영이는 건강을 위해 따릉이를 빌려 타고 퇴근하는 습관을 기르고 있다.</p>

<p>창영이의 퇴근길은 <em>N</em>×<em>N</em> 크기의 격자로 표현된다. 창영이는 <em>A<sub>1,1</sub></em>에서 출발하여 <em>A<sub>N,N</sub></em>까지 이동할 계획이다. 창영이는 상하좌우&nbsp;인접한 격자로 한 번에 한 칸씩 이동할 수 있다. 각 격자&nbsp;<em>A<sub>r,c</sub></em>에는 자연수가 적혀 있는데, 이는 해당 지역의 높이를 뜻한다. 인접한 격자 사이의&nbsp;<strong>높이 차이의 절댓값</strong>을 <strong>경사</strong>라고 하고, 경사가 클수록&nbsp;경사가 가파르다고 하자.</p>

<p>따릉이는 가격에 따라 성능이 다르다. 비싼 따릉이는 경사가 가파르더라도 내리지 않고 타고 갈 수 있지만, 값싼 따릉이는 경사가 가파르면 힘들고 위험하기 때문에 내려서 이동해야 한다.</p>

<p>창영이는 최소한의 비용으로 따릉이를 빌려서, 따릉이에서 한 번도&nbsp;내리지 않고 집에 도착하고 싶다. 그러기 위해선 창영이가 지날 수 있는 최대 경사의 최솟값을 알아야만 한다. 여러분들이 창영이를 도와주자.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫째 줄에 격자의 크기 <em>N</em>이 주어진다.</p>

<p>둘째 줄부터 <em>N</em>개의 줄에 걸쳐 각 격자의 높이 정보가 주어진다. 첫 번째로 주어지는 값이 <em>A<sub>1,1</sub></em>이고, 마지막으로 주어지는 값이 <em>A<sub>N,N</sub></em>이다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p><em>A<sub>1,1</sub></em>에서 <em>A<sub>N,N</sub></em>까지,&nbsp;경로상의 최대 경사의 최솟값을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','4
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
','0
','SHORTEST_PATH'),
                                                                                                                (12851,'BAEKJOON','https://www.acmicpc.net/problem/22255',22255,'호석사우루스','1초','512 MB',14,'<p>음머... 미련한 소인 호석사우루스는 융통성 따위 일절 가지지 않는다. 자신의 철칙에 맞게 우직하게 미궁을 탈출하려고 한다. 미궁은 $N$행 $M$열의 격자로 이루어져 있고 각 칸마다 입장하는 순간 받는 충격량이 있다. 같은 방을 여러 번 들어가면, 들어갈 때마다 같은 충격량을 받게 된다. 당연히 똑똑한 소라면 최소의 충격을 받으면서 미궁을 탈출하던가, 애초에 미궁에 안 빠지도록 머리를 썼겠지만, 호석사우루스는 그런 거 없다!</p>

<p>그의 철칙은, 이동 방식에 있다. 매 이동 시 마다 움직일 수 있는 방향이 다르다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/b1d82464-be27-449a-bf77-e8b6e5281b5b/-/preview/" style="height: 133.333px; width: 361.667px;"></p>

<ul>
	<li>$3K$ 번째 이동 시에는 상, 하, 좌, 우로 인접한 곳 중 한 칸으로 이동할 수 있다.</li>
	<li>$3K+1$ 번째 이동 시에는 상, 하로 인접한 곳 중 한 칸으로 이동할 수 있다.</li>
	<li>$3K+2$ 번째 이동 시에는 좌, 우로 인접한 곳 중 한 칸으로 이동할 수 있다.</li>
	<li>만약 이동하려는 곳에 벽이 있으면 이동할 수 없다.</li>
	<li>최초의 이동은 1번째 이동이고, 이후에 2번째, 3번째 이동이다.</li>
</ul>

<p>자신의 철칙을 지키되, 아픈 건 싫어하는 호석사우루스를 도와서 탈출구까지의 최소 충격량을 구해주자!</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 격자의 크기 $N$, $M$이 주어진다.</p>

<p>두 번째 줄에 시작 지점과 도착 지점의 정보인&nbsp;$S_x$, $S_y$, $E_x$, $E_y$ 가 공백으로 구분되어 주어진다. 시작 지점이 $S_x$행&nbsp;$S_y$열이며 도착 지점이 $E_x$행&nbsp;$E_y$열임을 의미한다. 시작 지점과 도착 지점은 항상 다르다.</p>

<p>세 번째 줄부터 $N$ 개 줄에 걸쳐서&nbsp;지도의 정보가 주어진다. 각 줄마다 $M$ 개의 정수가 주어진다. $i+2$번 줄의 $j$번째 숫자는 $i$행 $j$열에 위치한 격자의 충격량을 의미한다. 만약 충격량 정보가&nbsp;$-1$이라면 해당 격자는 벽임을 의미한다.</p>

<p>시작점과 도착점의 충격량은 0 임이 보장된다.</p>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>첫 번째 줄에 호석사우루스가 탈출하는 과정에서 받는 최소 충격량을 출력한다. 만약 탈출하지 못한다면 $-1$ 을 출력한다.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','5 5
1 1 5 5
0 -1 1 -1 1
1 1 1 1 1
-1 1 1 1 1
1 1 -1 1 1
1 1 1 1 0
','7
','SHORTEST_PATH'),
                                                                                                                (10973,'BAEKJOON','https://www.acmicpc.net/problem/22278',22278,'두 최단 경로','5초','1024 MB',30,'<p>$N$ 개의 정점과 $M$ 개의 간선이 있는 그래프가 있다. 각 간선에는 방향성이 있으며, 음이 아닌 정수 가중치를 가진다.</p>

<p>모든 $2 \le i \le N$ 에 대해서, 1번 정점에서 $i$ 번 정점으로 가는 두 개의 겹치지 않는 경로들 중, 비용 합의 최솟값을 계산하라. 경로가 겹치지 않는다는 것은, 같은 간선을 공유하지 않는다는 것이다. 경로의 비용은, 경로에 속하는 간선의 가중치를 전부 합한 값이다.</p>


					<div class="headline">
					<h2>입력</h2>
					</div>
					<div id="problem_input" class="problem-text">
					<p>첫 번째 줄에 테스트 케이스의 수 TC가 주어진다. 이후 TC개의 테스트 케이스가 새 줄로 구분되어 주어진다. 각 테스트 케이스는 다음과 같이 구성되었다.</p>

<ul>
	<li>첫 번째 줄에 정수 $N, M$이 주어진다.</li>
	<li>이후 $M$ 개의 줄에 세 정수 $u_i, v_i, w_i$ 가 주어진다. $u_i$ 번 정점에서 $v_i$ 번 정점으로 가는 가중치 $w_i$ 의 간선이 존재한다는 뜻이다.</li>
</ul>

					</div>

					<div class="headline">
					<h2>출력</h2>
					</div>
					<div id="problem_output" class="problem-text">
					<p>각 테스트 케이스 마다 한 줄에 $N-1$ 개의 정수를 출력하라. 이 중 $i$ 번째 정수는, 1번 정점에서 $i+1$ 번 정점으로 가는 두 개의 겹치지 않는 경로들 중, 비용 합의 최솟값을 뜻한다. 만약 두 개의 겹치지 않는 경로가 존재하지 않는다면 <code>-1</code>을 출력하라.</p>

					</div>

				<div class="headline">
				<h2>힌트</h2>
				</div>
				<div id="problem_hint" class="problem-text">

				</div>
				</div>','3
3 4
1 2 1
1 3 2
2 3 3
3 2 4
2 2
1 2 1
2 1 0
5 7
1 2 4
2 3 3
1 3 8
3 5 3
4 5 2
5 4 7
1 5 1
','7 6
-1
-1 15 -1 11
','SHORTEST_PATH');